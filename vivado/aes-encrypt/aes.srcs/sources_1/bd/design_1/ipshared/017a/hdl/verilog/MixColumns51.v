// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.3
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module MixColumns51 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        in_V_address0,
        in_V_ce0,
        in_V_q0,
        in_V_address1,
        in_V_ce1,
        in_V_q1,
        out_V_address0,
        out_V_ce0,
        out_V_we0,
        out_V_d0,
        out_V_address1,
        out_V_ce1,
        out_V_we1,
        out_V_d1
);

parameter    ap_ST_fsm_state1 = 7'd1;
parameter    ap_ST_fsm_state2 = 7'd2;
parameter    ap_ST_fsm_state3 = 7'd4;
parameter    ap_ST_fsm_state4 = 7'd8;
parameter    ap_ST_fsm_state5 = 7'd16;
parameter    ap_ST_fsm_state6 = 7'd32;
parameter    ap_ST_fsm_state7 = 7'd64;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
output  [3:0] in_V_address0;
output   in_V_ce0;
input  [7:0] in_V_q0;
output  [3:0] in_V_address1;
output   in_V_ce1;
input  [7:0] in_V_q1;
output  [3:0] out_V_address0;
output   out_V_ce0;
output   out_V_we0;
output  [7:0] out_V_d0;
output  [3:0] out_V_address1;
output   out_V_ce1;
output   out_V_we1;
output  [7:0] out_V_d1;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg[3:0] in_V_address0;
reg in_V_ce0;
reg[3:0] in_V_address1;
reg in_V_ce1;
reg[3:0] out_V_address0;
reg out_V_ce0;
reg out_V_we0;
reg[7:0] out_V_d0;
reg[3:0] out_V_address1;
reg out_V_ce1;
reg out_V_we1;
reg[7:0] out_V_d1;

reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [6:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [63:0] tmp_4_fu_135_p1;
reg   [63:0] tmp_4_reg_361;
wire    ap_CS_fsm_state2;
wire   [0:0] tmp_fu_127_p3;
wire   [3:0] tmp_67_fu_140_p1;
reg   [3:0] tmp_67_reg_371;
wire   [63:0] tmp_7_fu_150_p1;
reg   [63:0] tmp_7_reg_377;
wire   [4:0] i_V_fu_155_p2;
reg   [4:0] i_V_reg_387;
reg   [7:0] t_V_reg_392;
wire    ap_CS_fsm_state3;
reg   [7:0] rhs_V_reg_399;
wire   [63:0] tmp_9_fu_166_p1;
reg   [63:0] tmp_9_reg_406;
wire   [63:0] tmp_s_fu_176_p1;
reg   [63:0] tmp_s_reg_416;
reg   [7:0] rhs_V_39_reg_426;
wire    ap_CS_fsm_state4;
reg   [7:0] rhs_V_40_reg_434;
wire   [7:0] ret_V_7_fu_228_p2;
reg   [7:0] ret_V_7_reg_441;
wire    ap_CS_fsm_state5;
wire   [7:0] ret_V_10_fu_271_p2;
reg   [7:0] ret_V_10_reg_446;
wire   [7:0] ret_V_13_fu_314_p2;
reg   [7:0] ret_V_13_reg_451;
wire   [7:0] ret_V_16_fu_352_p2;
reg   [7:0] ret_V_16_reg_456;
reg   [4:0] p_s_reg_116;
reg    ap_block_state1;
wire    ap_CS_fsm_state7;
wire    ap_CS_fsm_state6;
wire   [3:0] ret_V_fu_144_p2;
wire   [3:0] ret_V_2_fu_161_p2;
wire   [3:0] ret_V_4_fu_171_p2;
wire   [7:0] ret_V_17_fu_181_p2;
wire   [7:0] ret_V_18_fu_185_p2;
wire   [0:0] tmp_69_fu_201_p3;
wire   [7:0] p_i_cast_cast_cast_fu_209_p3;
wire   [7:0] r_V_fu_195_p2;
wire   [7:0] ret_V_67_fu_190_p2;
wire   [7:0] tmp2_fu_222_p2;
wire   [7:0] tmp1_fu_217_p2;
wire   [7:0] ret_V_68_fu_234_p2;
wire   [0:0] tmp_71_fu_244_p3;
wire   [7:0] p_i23_cast_cast_cast_fu_252_p3;
wire   [7:0] r_V_22_fu_238_p2;
wire   [7:0] tmp4_fu_265_p2;
wire   [7:0] tmp3_fu_260_p2;
wire   [7:0] ret_V_69_fu_277_p2;
wire   [0:0] tmp_73_fu_287_p3;
wire   [7:0] p_i28_cast_cast_cast_fu_295_p3;
wire   [7:0] r_V_23_fu_281_p2;
wire   [7:0] tmp6_fu_308_p2;
wire   [7:0] tmp5_fu_303_p2;
wire   [7:0] ret_V_70_fu_320_p2;
wire   [0:0] tmp_75_fu_330_p3;
wire   [7:0] r_V_24_fu_324_p2;
wire   [7:0] tmp7_fu_346_p2;
wire   [7:0] p_i33_cast_cast_cast_fu_338_p3;
reg   [6:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 7'd1;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((tmp_fu_127_p3 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        p_s_reg_116 <= i_V_reg_387;
    end else if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        p_s_reg_116 <= 5'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_fu_127_p3 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        i_V_reg_387 <= i_V_fu_155_p2;
        tmp_4_reg_361[4 : 0] <= tmp_4_fu_135_p1[4 : 0];
        tmp_67_reg_371 <= tmp_67_fu_140_p1;
        tmp_7_reg_377[3 : 1] <= tmp_7_fu_150_p1[3 : 1];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        ret_V_10_reg_446 <= ret_V_10_fu_271_p2;
        ret_V_13_reg_451 <= ret_V_13_fu_314_p2;
        ret_V_16_reg_456 <= ret_V_16_fu_352_p2;
        ret_V_7_reg_441 <= ret_V_7_fu_228_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        rhs_V_39_reg_426 <= in_V_q0;
        rhs_V_40_reg_434 <= in_V_q1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        rhs_V_reg_399 <= in_V_q1;
        t_V_reg_392 <= in_V_q0;
        tmp_9_reg_406[0] <= tmp_9_fu_166_p1[0];
tmp_9_reg_406[3 : 2] <= tmp_9_fu_166_p1[3 : 2];
        tmp_s_reg_416[3 : 2] <= tmp_s_fu_176_p1[3 : 2];
    end
end

always @ (*) begin
    if (((tmp_fu_127_p3 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((tmp_fu_127_p3 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        in_V_address0 = tmp_9_fu_166_p1;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        in_V_address0 = tmp_4_fu_135_p1;
    end else begin
        in_V_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        in_V_address1 = tmp_s_fu_176_p1;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        in_V_address1 = tmp_7_fu_150_p1;
    end else begin
        in_V_address1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state2))) begin
        in_V_ce0 = 1'b1;
    end else begin
        in_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state2))) begin
        in_V_ce1 = 1'b1;
    end else begin
        in_V_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        out_V_address0 = tmp_9_reg_406;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        out_V_address0 = tmp_4_reg_361;
    end else begin
        out_V_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        out_V_address1 = tmp_s_reg_416;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        out_V_address1 = tmp_7_reg_377;
    end else begin
        out_V_address1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state7))) begin
        out_V_ce0 = 1'b1;
    end else begin
        out_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state7))) begin
        out_V_ce1 = 1'b1;
    end else begin
        out_V_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        out_V_d0 = ret_V_13_reg_451;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        out_V_d0 = ret_V_7_reg_441;
    end else begin
        out_V_d0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        out_V_d1 = ret_V_16_reg_456;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        out_V_d1 = ret_V_10_reg_446;
    end else begin
        out_V_d1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state7))) begin
        out_V_we0 = 1'b1;
    end else begin
        out_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state7))) begin
        out_V_we1 = 1'b1;
    end else begin
        out_V_we1 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((tmp_fu_127_p3 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state2;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

always @ (*) begin
    ap_block_state1 = ((ap_start == 1'b0) | (ap_done_reg == 1'b1));
end

assign i_V_fu_155_p2 = (5'd4 + p_s_reg_116);

assign p_i23_cast_cast_cast_fu_252_p3 = ((tmp_71_fu_244_p3[0:0] === 1'b1) ? 8'd27 : 8'd0);

assign p_i28_cast_cast_cast_fu_295_p3 = ((tmp_73_fu_287_p3[0:0] === 1'b1) ? 8'd27 : 8'd0);

assign p_i33_cast_cast_cast_fu_338_p3 = ((tmp_75_fu_330_p3[0:0] === 1'b1) ? 8'd27 : 8'd0);

assign p_i_cast_cast_cast_fu_209_p3 = ((tmp_69_fu_201_p3[0:0] === 1'b1) ? 8'd27 : 8'd0);

assign r_V_22_fu_238_p2 = ret_V_68_fu_234_p2 << 8'd1;

assign r_V_23_fu_281_p2 = ret_V_69_fu_277_p2 << 8'd1;

assign r_V_24_fu_324_p2 = ret_V_70_fu_320_p2 << 8'd1;

assign r_V_fu_195_p2 = ret_V_17_fu_181_p2 << 8'd1;

assign ret_V_10_fu_271_p2 = (tmp4_fu_265_p2 ^ tmp3_fu_260_p2);

assign ret_V_13_fu_314_p2 = (tmp6_fu_308_p2 ^ tmp5_fu_303_p2);

assign ret_V_16_fu_352_p2 = (tmp7_fu_346_p2 ^ p_i33_cast_cast_cast_fu_338_p3);

assign ret_V_17_fu_181_p2 = (t_V_reg_392 ^ rhs_V_reg_399);

assign ret_V_18_fu_185_p2 = (rhs_V_39_reg_426 ^ ret_V_17_fu_181_p2);

assign ret_V_2_fu_161_p2 = (tmp_67_reg_371 | 4'd2);

assign ret_V_4_fu_171_p2 = (tmp_67_reg_371 | 4'd3);

assign ret_V_67_fu_190_p2 = (rhs_V_40_reg_434 ^ ret_V_18_fu_185_p2);

assign ret_V_68_fu_234_p2 = (rhs_V_reg_399 ^ rhs_V_39_reg_426);

assign ret_V_69_fu_277_p2 = (rhs_V_40_reg_434 ^ rhs_V_39_reg_426);

assign ret_V_70_fu_320_p2 = (t_V_reg_392 ^ rhs_V_40_reg_434);

assign ret_V_7_fu_228_p2 = (tmp2_fu_222_p2 ^ tmp1_fu_217_p2);

assign ret_V_fu_144_p2 = (tmp_67_fu_140_p1 | 4'd1);

assign tmp1_fu_217_p2 = (t_V_reg_392 ^ p_i_cast_cast_cast_fu_209_p3);

assign tmp2_fu_222_p2 = (ret_V_67_fu_190_p2 ^ r_V_fu_195_p2);

assign tmp3_fu_260_p2 = (rhs_V_reg_399 ^ p_i23_cast_cast_cast_fu_252_p3);

assign tmp4_fu_265_p2 = (ret_V_67_fu_190_p2 ^ r_V_22_fu_238_p2);

assign tmp5_fu_303_p2 = (rhs_V_39_reg_426 ^ p_i28_cast_cast_cast_fu_295_p3);

assign tmp6_fu_308_p2 = (ret_V_67_fu_190_p2 ^ r_V_23_fu_281_p2);

assign tmp7_fu_346_p2 = (ret_V_18_fu_185_p2 ^ r_V_24_fu_324_p2);

assign tmp_4_fu_135_p1 = p_s_reg_116;

assign tmp_67_fu_140_p1 = p_s_reg_116[3:0];

assign tmp_69_fu_201_p3 = ret_V_17_fu_181_p2[32'd7];

assign tmp_71_fu_244_p3 = ret_V_68_fu_234_p2[32'd7];

assign tmp_73_fu_287_p3 = ret_V_69_fu_277_p2[32'd7];

assign tmp_75_fu_330_p3 = ret_V_70_fu_320_p2[32'd7];

assign tmp_7_fu_150_p1 = ret_V_fu_144_p2;

assign tmp_9_fu_166_p1 = ret_V_2_fu_161_p2;

assign tmp_fu_127_p3 = p_s_reg_116[32'd4];

assign tmp_s_fu_176_p1 = ret_V_4_fu_171_p2;

always @ (posedge ap_clk) begin
    tmp_4_reg_361[63:5] <= 59'b00000000000000000000000000000000000000000000000000000000000;
    tmp_7_reg_377[0] <= 1'b1;
    tmp_7_reg_377[63:4] <= 60'b000000000000000000000000000000000000000000000000000000000000;
    tmp_9_reg_406[1] <= 1'b1;
    tmp_9_reg_406[63:4] <= 60'b000000000000000000000000000000000000000000000000000000000000;
    tmp_s_reg_416[1:0] <= 2'b11;
    tmp_s_reg_416[63:4] <= 60'b000000000000000000000000000000000000000000000000000000000000;
end

endmodule //MixColumns51
