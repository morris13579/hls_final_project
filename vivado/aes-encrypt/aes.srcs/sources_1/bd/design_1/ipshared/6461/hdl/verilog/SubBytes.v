// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.3
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module SubBytes (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        in_0_V_read,
        in_1_V_read,
        in_2_V_read,
        in_3_V_read,
        in_4_V_read,
        in_5_V_read,
        in_6_V_read,
        in_7_V_read,
        in_8_V_read,
        in_9_V_read,
        in_10_V_read,
        in_11_V_read,
        in_12_V_read,
        in_13_V_read,
        in_14_V_read,
        in_15_V_read,
        out_0_V,
        out_0_V_ap_vld,
        out_1_V,
        out_1_V_ap_vld,
        out_2_V,
        out_2_V_ap_vld,
        out_3_V,
        out_3_V_ap_vld,
        out_4_V,
        out_4_V_ap_vld,
        out_5_V,
        out_5_V_ap_vld,
        out_6_V,
        out_6_V_ap_vld,
        out_7_V,
        out_7_V_ap_vld,
        out_8_V,
        out_8_V_ap_vld,
        out_9_V,
        out_9_V_ap_vld,
        out_10_V,
        out_10_V_ap_vld,
        out_11_V,
        out_11_V_ap_vld,
        out_12_V,
        out_12_V_ap_vld,
        out_13_V,
        out_13_V_ap_vld,
        out_14_V,
        out_14_V_ap_vld,
        out_15_V,
        out_15_V_ap_vld
);

parameter    ap_ST_fsm_state1 = 2'd1;
parameter    ap_ST_fsm_state2 = 2'd2;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
input  [7:0] in_0_V_read;
input  [7:0] in_1_V_read;
input  [7:0] in_2_V_read;
input  [7:0] in_3_V_read;
input  [7:0] in_4_V_read;
input  [7:0] in_5_V_read;
input  [7:0] in_6_V_read;
input  [7:0] in_7_V_read;
input  [7:0] in_8_V_read;
input  [7:0] in_9_V_read;
input  [7:0] in_10_V_read;
input  [7:0] in_11_V_read;
input  [7:0] in_12_V_read;
input  [7:0] in_13_V_read;
input  [7:0] in_14_V_read;
input  [7:0] in_15_V_read;
output  [7:0] out_0_V;
output   out_0_V_ap_vld;
output  [7:0] out_1_V;
output   out_1_V_ap_vld;
output  [7:0] out_2_V;
output   out_2_V_ap_vld;
output  [7:0] out_3_V;
output   out_3_V_ap_vld;
output  [7:0] out_4_V;
output   out_4_V_ap_vld;
output  [7:0] out_5_V;
output   out_5_V_ap_vld;
output  [7:0] out_6_V;
output   out_6_V_ap_vld;
output  [7:0] out_7_V;
output   out_7_V_ap_vld;
output  [7:0] out_8_V;
output   out_8_V_ap_vld;
output  [7:0] out_9_V;
output   out_9_V_ap_vld;
output  [7:0] out_10_V;
output   out_10_V_ap_vld;
output  [7:0] out_11_V;
output   out_11_V_ap_vld;
output  [7:0] out_12_V;
output   out_12_V_ap_vld;
output  [7:0] out_13_V;
output   out_13_V_ap_vld;
output  [7:0] out_14_V;
output   out_14_V_ap_vld;
output  [7:0] out_15_V;
output   out_15_V_ap_vld;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg out_0_V_ap_vld;
reg out_1_V_ap_vld;
reg out_2_V_ap_vld;
reg out_3_V_ap_vld;
reg out_4_V_ap_vld;
reg out_5_V_ap_vld;
reg out_6_V_ap_vld;
reg out_7_V_ap_vld;
reg out_8_V_ap_vld;
reg out_9_V_ap_vld;
reg out_10_V_ap_vld;
reg out_11_V_ap_vld;
reg out_12_V_ap_vld;
reg out_13_V_ap_vld;
reg out_14_V_ap_vld;
reg out_15_V_ap_vld;

reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [1:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [7:0] sbox_V158_address0;
reg    sbox_V158_ce0;
wire   [7:0] sbox_V158_q0;
wire   [7:0] sbox_V158_address1;
reg    sbox_V158_ce1;
wire   [7:0] sbox_V158_q1;
wire   [7:0] sbox_V158_address2;
reg    sbox_V158_ce2;
wire   [7:0] sbox_V158_q2;
wire   [7:0] sbox_V158_address3;
reg    sbox_V158_ce3;
wire   [7:0] sbox_V158_q3;
wire   [7:0] sbox_V158_address4;
reg    sbox_V158_ce4;
wire   [7:0] sbox_V158_q4;
wire   [7:0] sbox_V158_address5;
reg    sbox_V158_ce5;
wire   [7:0] sbox_V158_q5;
wire   [7:0] sbox_V158_address6;
reg    sbox_V158_ce6;
wire   [7:0] sbox_V158_q6;
wire   [7:0] sbox_V158_address7;
reg    sbox_V158_ce7;
wire   [7:0] sbox_V158_q7;
wire   [7:0] sbox_V158_address8;
reg    sbox_V158_ce8;
wire   [7:0] sbox_V158_q8;
wire   [7:0] sbox_V158_address9;
reg    sbox_V158_ce9;
wire   [7:0] sbox_V158_q9;
wire   [7:0] sbox_V158_address10;
reg    sbox_V158_ce10;
wire   [7:0] sbox_V158_q10;
wire   [7:0] sbox_V158_address11;
reg    sbox_V158_ce11;
wire   [7:0] sbox_V158_q11;
wire   [7:0] sbox_V158_address12;
reg    sbox_V158_ce12;
wire   [7:0] sbox_V158_q12;
wire   [7:0] sbox_V158_address13;
reg    sbox_V158_ce13;
wire   [7:0] sbox_V158_q13;
wire   [7:0] sbox_V158_address14;
reg    sbox_V158_ce14;
wire   [7:0] sbox_V158_q14;
wire   [7:0] sbox_V158_address15;
reg    sbox_V158_ce15;
wire   [7:0] sbox_V158_q15;
reg    ap_block_state1;
wire   [63:0] tmp_2_fu_489_p1;
wire   [63:0] tmp_2_1_fu_494_p1;
wire   [63:0] tmp_2_2_fu_499_p1;
wire   [63:0] tmp_2_3_fu_504_p1;
wire   [63:0] tmp_2_4_fu_509_p1;
wire   [63:0] tmp_2_5_fu_514_p1;
wire   [63:0] tmp_2_6_fu_519_p1;
wire   [63:0] tmp_2_7_fu_524_p1;
wire   [63:0] tmp_2_8_fu_529_p1;
wire   [63:0] tmp_2_9_fu_534_p1;
wire   [63:0] tmp_2_10_fu_539_p1;
wire   [63:0] tmp_2_11_fu_544_p1;
wire   [63:0] tmp_2_12_fu_549_p1;
wire   [63:0] tmp_2_13_fu_554_p1;
wire   [63:0] tmp_2_14_fu_559_p1;
wire   [63:0] tmp_2_s_fu_564_p1;
wire    ap_CS_fsm_state2;
reg   [1:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 2'd1;
end

SubBytes101_sbox_bkb #(
    .DataWidth( 8 ),
    .AddressRange( 256 ),
    .AddressWidth( 8 ))
sbox_V158_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(sbox_V158_address0),
    .ce0(sbox_V158_ce0),
    .q0(sbox_V158_q0),
    .address1(sbox_V158_address1),
    .ce1(sbox_V158_ce1),
    .q1(sbox_V158_q1),
    .address2(sbox_V158_address2),
    .ce2(sbox_V158_ce2),
    .q2(sbox_V158_q2),
    .address3(sbox_V158_address3),
    .ce3(sbox_V158_ce3),
    .q3(sbox_V158_q3),
    .address4(sbox_V158_address4),
    .ce4(sbox_V158_ce4),
    .q4(sbox_V158_q4),
    .address5(sbox_V158_address5),
    .ce5(sbox_V158_ce5),
    .q5(sbox_V158_q5),
    .address6(sbox_V158_address6),
    .ce6(sbox_V158_ce6),
    .q6(sbox_V158_q6),
    .address7(sbox_V158_address7),
    .ce7(sbox_V158_ce7),
    .q7(sbox_V158_q7),
    .address8(sbox_V158_address8),
    .ce8(sbox_V158_ce8),
    .q8(sbox_V158_q8),
    .address9(sbox_V158_address9),
    .ce9(sbox_V158_ce9),
    .q9(sbox_V158_q9),
    .address10(sbox_V158_address10),
    .ce10(sbox_V158_ce10),
    .q10(sbox_V158_q10),
    .address11(sbox_V158_address11),
    .ce11(sbox_V158_ce11),
    .q11(sbox_V158_q11),
    .address12(sbox_V158_address12),
    .ce12(sbox_V158_ce12),
    .q12(sbox_V158_q12),
    .address13(sbox_V158_address13),
    .ce13(sbox_V158_ce13),
    .q13(sbox_V158_q13),
    .address14(sbox_V158_address14),
    .ce14(sbox_V158_ce14),
    .q14(sbox_V158_q14),
    .address15(sbox_V158_address15),
    .ce15(sbox_V158_ce15),
    .q15(sbox_V158_q15)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state2)) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        out_0_V_ap_vld = 1'b1;
    end else begin
        out_0_V_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        out_10_V_ap_vld = 1'b1;
    end else begin
        out_10_V_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        out_11_V_ap_vld = 1'b1;
    end else begin
        out_11_V_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        out_12_V_ap_vld = 1'b1;
    end else begin
        out_12_V_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        out_13_V_ap_vld = 1'b1;
    end else begin
        out_13_V_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        out_14_V_ap_vld = 1'b1;
    end else begin
        out_14_V_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        out_15_V_ap_vld = 1'b1;
    end else begin
        out_15_V_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        out_1_V_ap_vld = 1'b1;
    end else begin
        out_1_V_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        out_2_V_ap_vld = 1'b1;
    end else begin
        out_2_V_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        out_3_V_ap_vld = 1'b1;
    end else begin
        out_3_V_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        out_4_V_ap_vld = 1'b1;
    end else begin
        out_4_V_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        out_5_V_ap_vld = 1'b1;
    end else begin
        out_5_V_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        out_6_V_ap_vld = 1'b1;
    end else begin
        out_6_V_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        out_7_V_ap_vld = 1'b1;
    end else begin
        out_7_V_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        out_8_V_ap_vld = 1'b1;
    end else begin
        out_8_V_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        out_9_V_ap_vld = 1'b1;
    end else begin
        out_9_V_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        sbox_V158_ce0 = 1'b1;
    end else begin
        sbox_V158_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        sbox_V158_ce1 = 1'b1;
    end else begin
        sbox_V158_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        sbox_V158_ce10 = 1'b1;
    end else begin
        sbox_V158_ce10 = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        sbox_V158_ce11 = 1'b1;
    end else begin
        sbox_V158_ce11 = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        sbox_V158_ce12 = 1'b1;
    end else begin
        sbox_V158_ce12 = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        sbox_V158_ce13 = 1'b1;
    end else begin
        sbox_V158_ce13 = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        sbox_V158_ce14 = 1'b1;
    end else begin
        sbox_V158_ce14 = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        sbox_V158_ce15 = 1'b1;
    end else begin
        sbox_V158_ce15 = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        sbox_V158_ce2 = 1'b1;
    end else begin
        sbox_V158_ce2 = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        sbox_V158_ce3 = 1'b1;
    end else begin
        sbox_V158_ce3 = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        sbox_V158_ce4 = 1'b1;
    end else begin
        sbox_V158_ce4 = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        sbox_V158_ce5 = 1'b1;
    end else begin
        sbox_V158_ce5 = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        sbox_V158_ce6 = 1'b1;
    end else begin
        sbox_V158_ce6 = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        sbox_V158_ce7 = 1'b1;
    end else begin
        sbox_V158_ce7 = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        sbox_V158_ce8 = 1'b1;
    end else begin
        sbox_V158_ce8 = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        sbox_V158_ce9 = 1'b1;
    end else begin
        sbox_V158_ce9 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

always @ (*) begin
    ap_block_state1 = ((ap_start == 1'b0) | (ap_done_reg == 1'b1));
end

assign out_0_V = sbox_V158_q0;

assign out_10_V = sbox_V158_q10;

assign out_11_V = sbox_V158_q11;

assign out_12_V = sbox_V158_q12;

assign out_13_V = sbox_V158_q13;

assign out_14_V = sbox_V158_q14;

assign out_15_V = sbox_V158_q15;

assign out_1_V = sbox_V158_q1;

assign out_2_V = sbox_V158_q2;

assign out_3_V = sbox_V158_q3;

assign out_4_V = sbox_V158_q4;

assign out_5_V = sbox_V158_q5;

assign out_6_V = sbox_V158_q6;

assign out_7_V = sbox_V158_q7;

assign out_8_V = sbox_V158_q8;

assign out_9_V = sbox_V158_q9;

assign sbox_V158_address0 = tmp_2_fu_489_p1;

assign sbox_V158_address1 = tmp_2_1_fu_494_p1;

assign sbox_V158_address10 = tmp_2_10_fu_539_p1;

assign sbox_V158_address11 = tmp_2_11_fu_544_p1;

assign sbox_V158_address12 = tmp_2_12_fu_549_p1;

assign sbox_V158_address13 = tmp_2_13_fu_554_p1;

assign sbox_V158_address14 = tmp_2_14_fu_559_p1;

assign sbox_V158_address15 = tmp_2_s_fu_564_p1;

assign sbox_V158_address2 = tmp_2_2_fu_499_p1;

assign sbox_V158_address3 = tmp_2_3_fu_504_p1;

assign sbox_V158_address4 = tmp_2_4_fu_509_p1;

assign sbox_V158_address5 = tmp_2_5_fu_514_p1;

assign sbox_V158_address6 = tmp_2_6_fu_519_p1;

assign sbox_V158_address7 = tmp_2_7_fu_524_p1;

assign sbox_V158_address8 = tmp_2_8_fu_529_p1;

assign sbox_V158_address9 = tmp_2_9_fu_534_p1;

assign tmp_2_10_fu_539_p1 = in_10_V_read;

assign tmp_2_11_fu_544_p1 = in_11_V_read;

assign tmp_2_12_fu_549_p1 = in_12_V_read;

assign tmp_2_13_fu_554_p1 = in_13_V_read;

assign tmp_2_14_fu_559_p1 = in_14_V_read;

assign tmp_2_1_fu_494_p1 = in_1_V_read;

assign tmp_2_2_fu_499_p1 = in_2_V_read;

assign tmp_2_3_fu_504_p1 = in_3_V_read;

assign tmp_2_4_fu_509_p1 = in_4_V_read;

assign tmp_2_5_fu_514_p1 = in_5_V_read;

assign tmp_2_6_fu_519_p1 = in_6_V_read;

assign tmp_2_7_fu_524_p1 = in_7_V_read;

assign tmp_2_8_fu_529_p1 = in_8_V_read;

assign tmp_2_9_fu_534_p1 = in_9_V_read;

assign tmp_2_fu_489_p1 = in_0_V_read;

assign tmp_2_s_fu_564_p1 = in_15_V_read;

endmodule //SubBytes
