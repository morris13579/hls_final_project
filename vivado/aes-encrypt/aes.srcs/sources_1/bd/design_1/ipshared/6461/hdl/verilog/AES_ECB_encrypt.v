// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.3
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="AES_ECB_encrypt,hls_ip_2018_3,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=1,HLS_INPUT_PART=xc7z020clg484-1,HLS_INPUT_CLOCK=5.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=4.158000,HLS_SYN_LAT=57,HLS_SYN_TPT=none,HLS_SYN_MEM=102,HLS_SYN_DSP=0,HLS_SYN_FF=10864,HLS_SYN_LUT=37873,HLS_VERSION=2018_3}" *)

module AES_ECB_encrypt (
        ap_clk,
        ap_rst_n,
        plain_TDATA,
        plain_TVALID,
        plain_TREADY,
        plain_TKEEP,
        plain_TSTRB,
        plain_TUSER,
        plain_TLAST,
        plain_TID,
        plain_TDEST,
        encrypt_TDATA,
        encrypt_TVALID,
        encrypt_TREADY,
        encrypt_TKEEP,
        encrypt_TSTRB,
        encrypt_TUSER,
        encrypt_TLAST,
        encrypt_TID,
        encrypt_TDEST,
        s_axi_AXILiteS_AWVALID,
        s_axi_AXILiteS_AWREADY,
        s_axi_AXILiteS_AWADDR,
        s_axi_AXILiteS_WVALID,
        s_axi_AXILiteS_WREADY,
        s_axi_AXILiteS_WDATA,
        s_axi_AXILiteS_WSTRB,
        s_axi_AXILiteS_ARVALID,
        s_axi_AXILiteS_ARREADY,
        s_axi_AXILiteS_ARADDR,
        s_axi_AXILiteS_RVALID,
        s_axi_AXILiteS_RREADY,
        s_axi_AXILiteS_RDATA,
        s_axi_AXILiteS_RRESP,
        s_axi_AXILiteS_BVALID,
        s_axi_AXILiteS_BREADY,
        s_axi_AXILiteS_BRESP,
        interrupt
);

parameter    ap_ST_fsm_state1 = 35'd1;
parameter    ap_ST_fsm_state2 = 35'd2;
parameter    ap_ST_fsm_state3 = 35'd4;
parameter    ap_ST_fsm_state4 = 35'd8;
parameter    ap_ST_fsm_state5 = 35'd16;
parameter    ap_ST_fsm_state6 = 35'd32;
parameter    ap_ST_fsm_state7 = 35'd64;
parameter    ap_ST_fsm_state8 = 35'd128;
parameter    ap_ST_fsm_state9 = 35'd256;
parameter    ap_ST_fsm_state10 = 35'd512;
parameter    ap_ST_fsm_state11 = 35'd1024;
parameter    ap_ST_fsm_state12 = 35'd2048;
parameter    ap_ST_fsm_state13 = 35'd4096;
parameter    ap_ST_fsm_state14 = 35'd8192;
parameter    ap_ST_fsm_state15 = 35'd16384;
parameter    ap_ST_fsm_state16 = 35'd32768;
parameter    ap_ST_fsm_state17 = 35'd65536;
parameter    ap_ST_fsm_state18 = 35'd131072;
parameter    ap_ST_fsm_state19 = 35'd262144;
parameter    ap_ST_fsm_state20 = 35'd524288;
parameter    ap_ST_fsm_state21 = 35'd1048576;
parameter    ap_ST_fsm_state22 = 35'd2097152;
parameter    ap_ST_fsm_state23 = 35'd4194304;
parameter    ap_ST_fsm_state24 = 35'd8388608;
parameter    ap_ST_fsm_state25 = 35'd16777216;
parameter    ap_ST_fsm_state26 = 35'd33554432;
parameter    ap_ST_fsm_state27 = 35'd67108864;
parameter    ap_ST_fsm_state28 = 35'd134217728;
parameter    ap_ST_fsm_state29 = 35'd268435456;
parameter    ap_ST_fsm_state30 = 35'd536870912;
parameter    ap_ST_fsm_state31 = 35'd1073741824;
parameter    ap_ST_fsm_state32 = 35'd2147483648;
parameter    ap_ST_fsm_state33 = 35'd4294967296;
parameter    ap_ST_fsm_state34 = 35'd8589934592;
parameter    ap_ST_fsm_state35 = 35'd17179869184;
parameter    C_S_AXI_AXILITES_DATA_WIDTH = 32;
parameter    C_S_AXI_AXILITES_ADDR_WIDTH = 8;
parameter    C_S_AXI_DATA_WIDTH = 32;

parameter C_S_AXI_AXILITES_WSTRB_WIDTH = (32 / 8);
parameter C_S_AXI_WSTRB_WIDTH = (32 / 8);

input   ap_clk;
input   ap_rst_n;
input  [7:0] plain_TDATA;
input   plain_TVALID;
output   plain_TREADY;
input  [0:0] plain_TKEEP;
input  [0:0] plain_TSTRB;
input  [0:0] plain_TUSER;
input  [0:0] plain_TLAST;
input  [0:0] plain_TID;
input  [0:0] plain_TDEST;
output  [7:0] encrypt_TDATA;
output   encrypt_TVALID;
input   encrypt_TREADY;
output  [0:0] encrypt_TKEEP;
output  [0:0] encrypt_TSTRB;
output  [0:0] encrypt_TUSER;
output  [0:0] encrypt_TLAST;
output  [0:0] encrypt_TID;
output  [0:0] encrypt_TDEST;
input   s_axi_AXILiteS_AWVALID;
output   s_axi_AXILiteS_AWREADY;
input  [C_S_AXI_AXILITES_ADDR_WIDTH - 1:0] s_axi_AXILiteS_AWADDR;
input   s_axi_AXILiteS_WVALID;
output   s_axi_AXILiteS_WREADY;
input  [C_S_AXI_AXILITES_DATA_WIDTH - 1:0] s_axi_AXILiteS_WDATA;
input  [C_S_AXI_AXILITES_WSTRB_WIDTH - 1:0] s_axi_AXILiteS_WSTRB;
input   s_axi_AXILiteS_ARVALID;
output   s_axi_AXILiteS_ARREADY;
input  [C_S_AXI_AXILITES_ADDR_WIDTH - 1:0] s_axi_AXILiteS_ARADDR;
output   s_axi_AXILiteS_RVALID;
input   s_axi_AXILiteS_RREADY;
output  [C_S_AXI_AXILITES_DATA_WIDTH - 1:0] s_axi_AXILiteS_RDATA;
output  [1:0] s_axi_AXILiteS_RRESP;
output   s_axi_AXILiteS_BVALID;
input   s_axi_AXILiteS_BREADY;
output  [1:0] s_axi_AXILiteS_BRESP;
output   interrupt;

 reg    ap_rst_n_inv;
wire    ap_start;
reg    ap_done;
reg    ap_idle;
(* fsm_encoding = "none" *) reg   [34:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    ap_ready;
reg   [7:0] plain_V_data_V_0_data_out;
wire    plain_V_data_V_0_vld_in;
wire    plain_V_data_V_0_vld_out;
wire    plain_V_data_V_0_ack_in;
reg    plain_V_data_V_0_ack_out;
reg   [7:0] plain_V_data_V_0_payload_A;
reg   [7:0] plain_V_data_V_0_payload_B;
reg    plain_V_data_V_0_sel_rd;
reg    plain_V_data_V_0_sel_wr;
wire    plain_V_data_V_0_sel;
wire    plain_V_data_V_0_load_A;
wire    plain_V_data_V_0_load_B;
reg   [1:0] plain_V_data_V_0_state;
wire    plain_V_data_V_0_state_cmp_full;
reg   [0:0] plain_V_keep_V_0_data_out;
wire    plain_V_keep_V_0_vld_in;
wire    plain_V_keep_V_0_vld_out;
wire    plain_V_keep_V_0_ack_in;
reg    plain_V_keep_V_0_ack_out;
reg   [0:0] plain_V_keep_V_0_payload_A;
reg   [0:0] plain_V_keep_V_0_payload_B;
reg    plain_V_keep_V_0_sel_rd;
reg    plain_V_keep_V_0_sel_wr;
wire    plain_V_keep_V_0_sel;
wire    plain_V_keep_V_0_load_A;
wire    plain_V_keep_V_0_load_B;
reg   [1:0] plain_V_keep_V_0_state;
wire    plain_V_keep_V_0_state_cmp_full;
reg   [0:0] plain_V_strb_V_0_data_out;
wire    plain_V_strb_V_0_vld_in;
wire    plain_V_strb_V_0_vld_out;
wire    plain_V_strb_V_0_ack_in;
reg    plain_V_strb_V_0_ack_out;
reg   [0:0] plain_V_strb_V_0_payload_A;
reg   [0:0] plain_V_strb_V_0_payload_B;
reg    plain_V_strb_V_0_sel_rd;
reg    plain_V_strb_V_0_sel_wr;
wire    plain_V_strb_V_0_sel;
wire    plain_V_strb_V_0_load_A;
wire    plain_V_strb_V_0_load_B;
reg   [1:0] plain_V_strb_V_0_state;
wire    plain_V_strb_V_0_state_cmp_full;
reg   [0:0] plain_V_user_V_0_data_out;
wire    plain_V_user_V_0_vld_in;
wire    plain_V_user_V_0_vld_out;
wire    plain_V_user_V_0_ack_in;
reg    plain_V_user_V_0_ack_out;
reg   [0:0] plain_V_user_V_0_payload_A;
reg   [0:0] plain_V_user_V_0_payload_B;
reg    plain_V_user_V_0_sel_rd;
reg    plain_V_user_V_0_sel_wr;
wire    plain_V_user_V_0_sel;
wire    plain_V_user_V_0_load_A;
wire    plain_V_user_V_0_load_B;
reg   [1:0] plain_V_user_V_0_state;
wire    plain_V_user_V_0_state_cmp_full;
reg   [0:0] plain_V_last_V_0_data_out;
wire    plain_V_last_V_0_vld_in;
wire    plain_V_last_V_0_vld_out;
wire    plain_V_last_V_0_ack_in;
reg    plain_V_last_V_0_ack_out;
reg   [0:0] plain_V_last_V_0_payload_A;
reg   [0:0] plain_V_last_V_0_payload_B;
reg    plain_V_last_V_0_sel_rd;
reg    plain_V_last_V_0_sel_wr;
wire    plain_V_last_V_0_sel;
wire    plain_V_last_V_0_load_A;
wire    plain_V_last_V_0_load_B;
reg   [1:0] plain_V_last_V_0_state;
wire    plain_V_last_V_0_state_cmp_full;
reg   [0:0] plain_V_id_V_0_data_out;
wire    plain_V_id_V_0_vld_in;
wire    plain_V_id_V_0_vld_out;
wire    plain_V_id_V_0_ack_in;
reg    plain_V_id_V_0_ack_out;
reg   [0:0] plain_V_id_V_0_payload_A;
reg   [0:0] plain_V_id_V_0_payload_B;
reg    plain_V_id_V_0_sel_rd;
reg    plain_V_id_V_0_sel_wr;
wire    plain_V_id_V_0_sel;
wire    plain_V_id_V_0_load_A;
wire    plain_V_id_V_0_load_B;
reg   [1:0] plain_V_id_V_0_state;
wire    plain_V_id_V_0_state_cmp_full;
reg   [0:0] plain_V_dest_V_0_data_out;
wire    plain_V_dest_V_0_vld_in;
wire    plain_V_dest_V_0_vld_out;
wire    plain_V_dest_V_0_ack_in;
reg    plain_V_dest_V_0_ack_out;
reg   [0:0] plain_V_dest_V_0_payload_A;
reg   [0:0] plain_V_dest_V_0_payload_B;
reg    plain_V_dest_V_0_sel_rd;
reg    plain_V_dest_V_0_sel_wr;
wire    plain_V_dest_V_0_sel;
wire    plain_V_dest_V_0_load_A;
wire    plain_V_dest_V_0_load_B;
reg   [1:0] plain_V_dest_V_0_state;
wire    plain_V_dest_V_0_state_cmp_full;
reg   [7:0] encrypt_V_data_V_1_data_in;
reg   [7:0] encrypt_V_data_V_1_data_out;
reg    encrypt_V_data_V_1_vld_in;
wire    encrypt_V_data_V_1_vld_out;
wire    encrypt_V_data_V_1_ack_in;
wire    encrypt_V_data_V_1_ack_out;
reg   [7:0] encrypt_V_data_V_1_payload_A;
reg   [7:0] encrypt_V_data_V_1_payload_B;
reg    encrypt_V_data_V_1_sel_rd;
reg    encrypt_V_data_V_1_sel_wr;
wire    encrypt_V_data_V_1_sel;
wire    encrypt_V_data_V_1_load_A;
wire    encrypt_V_data_V_1_load_B;
reg   [1:0] encrypt_V_data_V_1_state;
wire    encrypt_V_data_V_1_state_cmp_full;
reg   [0:0] encrypt_V_keep_V_1_data_in;
reg   [0:0] encrypt_V_keep_V_1_data_out;
reg    encrypt_V_keep_V_1_vld_in;
wire    encrypt_V_keep_V_1_vld_out;
wire    encrypt_V_keep_V_1_ack_in;
wire    encrypt_V_keep_V_1_ack_out;
reg   [0:0] encrypt_V_keep_V_1_payload_A;
reg   [0:0] encrypt_V_keep_V_1_payload_B;
reg    encrypt_V_keep_V_1_sel_rd;
reg    encrypt_V_keep_V_1_sel_wr;
wire    encrypt_V_keep_V_1_sel;
wire    encrypt_V_keep_V_1_load_A;
wire    encrypt_V_keep_V_1_load_B;
reg   [1:0] encrypt_V_keep_V_1_state;
wire    encrypt_V_keep_V_1_state_cmp_full;
reg   [0:0] encrypt_V_strb_V_1_data_in;
reg   [0:0] encrypt_V_strb_V_1_data_out;
reg    encrypt_V_strb_V_1_vld_in;
wire    encrypt_V_strb_V_1_vld_out;
wire    encrypt_V_strb_V_1_ack_in;
wire    encrypt_V_strb_V_1_ack_out;
reg   [0:0] encrypt_V_strb_V_1_payload_A;
reg   [0:0] encrypt_V_strb_V_1_payload_B;
reg    encrypt_V_strb_V_1_sel_rd;
reg    encrypt_V_strb_V_1_sel_wr;
wire    encrypt_V_strb_V_1_sel;
wire    encrypt_V_strb_V_1_load_A;
wire    encrypt_V_strb_V_1_load_B;
reg   [1:0] encrypt_V_strb_V_1_state;
wire    encrypt_V_strb_V_1_state_cmp_full;
reg   [0:0] encrypt_V_user_V_1_data_in;
reg   [0:0] encrypt_V_user_V_1_data_out;
reg    encrypt_V_user_V_1_vld_in;
wire    encrypt_V_user_V_1_vld_out;
wire    encrypt_V_user_V_1_ack_in;
wire    encrypt_V_user_V_1_ack_out;
reg   [0:0] encrypt_V_user_V_1_payload_A;
reg   [0:0] encrypt_V_user_V_1_payload_B;
reg    encrypt_V_user_V_1_sel_rd;
reg    encrypt_V_user_V_1_sel_wr;
wire    encrypt_V_user_V_1_sel;
wire    encrypt_V_user_V_1_load_A;
wire    encrypt_V_user_V_1_load_B;
reg   [1:0] encrypt_V_user_V_1_state;
wire    encrypt_V_user_V_1_state_cmp_full;
reg   [0:0] encrypt_V_last_V_1_data_in;
reg   [0:0] encrypt_V_last_V_1_data_out;
reg    encrypt_V_last_V_1_vld_in;
wire    encrypt_V_last_V_1_vld_out;
wire    encrypt_V_last_V_1_ack_in;
wire    encrypt_V_last_V_1_ack_out;
reg   [0:0] encrypt_V_last_V_1_payload_A;
reg   [0:0] encrypt_V_last_V_1_payload_B;
reg    encrypt_V_last_V_1_sel_rd;
reg    encrypt_V_last_V_1_sel_wr;
wire    encrypt_V_last_V_1_sel;
wire    encrypt_V_last_V_1_load_A;
wire    encrypt_V_last_V_1_load_B;
reg   [1:0] encrypt_V_last_V_1_state;
wire    encrypt_V_last_V_1_state_cmp_full;
reg   [0:0] encrypt_V_id_V_1_data_in;
reg   [0:0] encrypt_V_id_V_1_data_out;
reg    encrypt_V_id_V_1_vld_in;
wire    encrypt_V_id_V_1_vld_out;
wire    encrypt_V_id_V_1_ack_in;
wire    encrypt_V_id_V_1_ack_out;
reg   [0:0] encrypt_V_id_V_1_payload_A;
reg   [0:0] encrypt_V_id_V_1_payload_B;
reg    encrypt_V_id_V_1_sel_rd;
reg    encrypt_V_id_V_1_sel_wr;
wire    encrypt_V_id_V_1_sel;
wire    encrypt_V_id_V_1_load_A;
wire    encrypt_V_id_V_1_load_B;
reg   [1:0] encrypt_V_id_V_1_state;
wire    encrypt_V_id_V_1_state_cmp_full;
reg   [0:0] encrypt_V_dest_V_1_data_in;
reg   [0:0] encrypt_V_dest_V_1_data_out;
reg    encrypt_V_dest_V_1_vld_in;
wire    encrypt_V_dest_V_1_vld_out;
wire    encrypt_V_dest_V_1_ack_in;
wire    encrypt_V_dest_V_1_ack_out;
reg   [0:0] encrypt_V_dest_V_1_payload_A;
reg   [0:0] encrypt_V_dest_V_1_payload_B;
reg    encrypt_V_dest_V_1_sel_rd;
reg    encrypt_V_dest_V_1_sel_wr;
wire    encrypt_V_dest_V_1_sel;
wire    encrypt_V_dest_V_1_load_A;
wire    encrypt_V_dest_V_1_load_B;
reg   [1:0] encrypt_V_dest_V_1_state;
wire    encrypt_V_dest_V_1_state_cmp_full;
wire   [7:0] key_0_V_q0;
wire   [7:0] key_1_V_q0;
wire   [7:0] key_2_V_q0;
wire   [7:0] key_3_V_q0;
wire   [7:0] key_4_V_q0;
wire   [7:0] key_5_V_q0;
wire   [7:0] key_6_V_q0;
wire   [7:0] key_7_V_q0;
wire   [7:0] key_8_V_q0;
wire   [7:0] key_9_V_q0;
wire   [7:0] key_10_V_q0;
wire   [31:0] len;
reg    plain_TDATA_blk_n;
wire    ap_CS_fsm_state2;
wire   [0:0] tmp_fu_351_p2;
wire    ap_CS_fsm_state3;
wire    ap_CS_fsm_state4;
wire    ap_CS_fsm_state5;
wire    ap_CS_fsm_state6;
wire    ap_CS_fsm_state7;
wire    ap_CS_fsm_state8;
wire    ap_CS_fsm_state9;
wire    ap_CS_fsm_state10;
wire    ap_CS_fsm_state11;
wire    ap_CS_fsm_state12;
wire    ap_CS_fsm_state13;
wire    ap_CS_fsm_state14;
wire    ap_CS_fsm_state15;
wire    ap_CS_fsm_state16;
wire    ap_CS_fsm_state17;
reg    encrypt_TDATA_blk_n;
wire    ap_CS_fsm_state19;
wire    ap_CS_fsm_state20;
wire    ap_CS_fsm_state21;
wire    ap_CS_fsm_state22;
wire    ap_CS_fsm_state23;
wire    ap_CS_fsm_state24;
wire    ap_CS_fsm_state25;
wire    ap_CS_fsm_state26;
wire    ap_CS_fsm_state27;
wire    ap_CS_fsm_state28;
wire    ap_CS_fsm_state29;
wire    ap_CS_fsm_state30;
wire    ap_CS_fsm_state31;
wire    ap_CS_fsm_state32;
wire    ap_CS_fsm_state33;
wire    ap_CS_fsm_state34;
wire    ap_CS_fsm_state35;
reg   [31:0] len_read_reg_426;
reg   [7:0] tmp_data_V_16_reg_530;
reg    ap_block_state2;
reg   [0:0] tmp_keep_V_5_reg_535;
reg   [0:0] tmp_strb_V_5_reg_540;
reg   [0:0] tmp_user_V_5_reg_545;
reg   [0:0] tmp_last_V_5_reg_550;
reg   [0:0] tmp_id_V_5_reg_555;
reg   [0:0] tmp_dest_V_5_reg_560;
wire   [31:0] i_1_fu_356_p2;
reg   [31:0] i_1_reg_565;
reg   [7:0] tmp_data_V_17_reg_570;
reg   [0:0] tmp_keep_V_6_reg_575;
reg   [0:0] tmp_strb_V_6_reg_580;
reg   [0:0] tmp_user_V_6_reg_585;
reg   [0:0] tmp_last_V_6_reg_590;
reg   [0:0] tmp_id_V_6_reg_595;
reg   [0:0] tmp_dest_V_6_reg_600;
reg   [7:0] tmp_data_V_18_reg_605;
reg   [0:0] tmp_keep_V_7_reg_610;
reg   [0:0] tmp_strb_V_7_reg_615;
reg   [0:0] tmp_user_V_7_reg_620;
reg   [0:0] tmp_last_V_7_reg_625;
reg   [0:0] tmp_id_V_7_reg_630;
reg   [0:0] tmp_dest_V_7_reg_635;
reg   [7:0] tmp_data_V_19_reg_640;
reg   [0:0] tmp_keep_V_8_reg_645;
reg   [0:0] tmp_strb_V_8_reg_650;
reg   [0:0] tmp_user_V_8_reg_655;
reg   [0:0] tmp_last_V_8_reg_660;
reg   [0:0] tmp_id_V_8_reg_665;
reg   [0:0] tmp_dest_V_8_reg_670;
reg   [7:0] tmp_data_V_20_reg_675;
reg   [0:0] tmp_keep_V_9_reg_680;
reg   [0:0] tmp_strb_V_9_reg_685;
reg   [0:0] tmp_user_V_9_reg_690;
reg   [0:0] tmp_last_V_9_reg_695;
reg   [0:0] tmp_id_V_9_reg_700;
reg   [0:0] tmp_dest_V_9_reg_705;
reg   [7:0] tmp_data_V_21_reg_710;
reg   [0:0] tmp_keep_V_10_reg_715;
reg   [0:0] tmp_strb_V_10_reg_720;
reg   [0:0] tmp_user_V_10_reg_725;
reg   [0:0] tmp_last_V_10_reg_730;
reg   [0:0] tmp_id_V_10_reg_735;
reg   [0:0] tmp_dest_V_10_reg_740;
reg   [7:0] tmp_data_V_22_reg_745;
reg   [0:0] tmp_keep_V_11_reg_750;
reg   [0:0] tmp_strb_V_11_reg_755;
reg   [0:0] tmp_user_V_11_reg_760;
reg   [0:0] tmp_last_V_11_reg_765;
reg   [0:0] tmp_id_V_11_reg_770;
reg   [0:0] tmp_dest_V_11_reg_775;
reg   [7:0] tmp_data_V_23_reg_780;
reg   [0:0] tmp_keep_V_12_reg_785;
reg   [0:0] tmp_strb_V_12_reg_790;
reg   [0:0] tmp_user_V_12_reg_795;
reg   [0:0] tmp_last_V_12_reg_800;
reg   [0:0] tmp_id_V_12_reg_805;
reg   [0:0] tmp_dest_V_12_reg_810;
reg   [7:0] tmp_data_V_24_reg_815;
reg   [0:0] tmp_keep_V_13_reg_820;
reg   [0:0] tmp_strb_V_13_reg_825;
reg   [0:0] tmp_user_V_13_reg_830;
reg   [0:0] tmp_last_V_13_reg_835;
reg   [0:0] tmp_id_V_13_reg_840;
reg   [0:0] tmp_dest_V_13_reg_845;
reg   [7:0] tmp_data_V_25_reg_850;
reg   [0:0] tmp_keep_V_14_reg_855;
reg   [0:0] tmp_strb_V_14_reg_860;
reg   [0:0] tmp_user_V_14_reg_865;
reg   [0:0] tmp_last_V_14_reg_870;
reg   [0:0] tmp_id_V_14_reg_875;
reg   [0:0] tmp_dest_V_14_reg_880;
reg   [7:0] tmp_data_V_26_reg_885;
reg   [0:0] tmp_keep_V_15_reg_890;
reg   [0:0] tmp_strb_V_15_reg_895;
reg   [0:0] tmp_user_V_15_reg_900;
reg   [0:0] tmp_last_V_15_reg_905;
reg   [0:0] tmp_id_V_15_reg_910;
reg   [0:0] tmp_dest_V_15_reg_915;
reg   [7:0] tmp_data_V_27_reg_920;
reg   [0:0] tmp_keep_V_reg_925;
reg   [0:0] tmp_strb_V_reg_930;
reg   [0:0] tmp_user_V_reg_935;
reg   [0:0] tmp_last_V_reg_940;
reg   [0:0] tmp_id_V_reg_945;
reg   [0:0] tmp_dest_V_reg_950;
reg   [7:0] tmp_data_V_28_reg_955;
reg   [0:0] tmp_keep_V_1_reg_960;
reg   [0:0] tmp_strb_V_1_reg_965;
reg   [0:0] tmp_user_V_1_reg_970;
reg   [0:0] tmp_last_V_1_reg_975;
reg   [0:0] tmp_id_V_1_reg_980;
reg   [0:0] tmp_dest_V_1_reg_985;
reg   [7:0] tmp_data_V_29_reg_990;
reg   [0:0] tmp_keep_V_2_reg_995;
reg   [0:0] tmp_strb_V_2_reg_1000;
reg   [0:0] tmp_user_V_2_reg_1005;
reg   [0:0] tmp_last_V_2_reg_1010;
reg   [0:0] tmp_id_V_2_reg_1015;
reg   [0:0] tmp_dest_V_2_reg_1020;
reg   [7:0] tmp_data_V_30_reg_1025;
reg   [0:0] tmp_keep_V_3_reg_1030;
reg   [0:0] tmp_strb_V_3_reg_1035;
reg   [0:0] tmp_user_V_3_reg_1040;
reg   [0:0] tmp_last_V_3_reg_1045;
reg   [0:0] tmp_id_V_3_reg_1050;
reg   [0:0] tmp_dest_V_3_reg_1055;
reg   [7:0] tmp_data_V_31_reg_1060;
reg   [0:0] tmp_keep_V_4_reg_1065;
reg   [0:0] tmp_strb_V_4_reg_1070;
reg   [0:0] tmp_user_V_4_reg_1075;
reg   [0:0] tmp_last_V_4_reg_1080;
reg   [0:0] tmp_id_V_4_reg_1085;
reg   [0:0] tmp_dest_V_4_reg_1090;
wire   [7:0] grp_Cipher_fu_244_encrypt_0_V;
wire   [7:0] grp_Cipher_fu_244_encrypt_1_V;
wire   [7:0] grp_Cipher_fu_244_encrypt_2_V;
wire   [7:0] grp_Cipher_fu_244_encrypt_3_V;
wire   [7:0] grp_Cipher_fu_244_encrypt_4_V;
wire   [7:0] grp_Cipher_fu_244_encrypt_5_V;
wire   [7:0] grp_Cipher_fu_244_encrypt_6_V;
wire   [7:0] grp_Cipher_fu_244_encrypt_7_V;
wire   [7:0] grp_Cipher_fu_244_encrypt_8_V;
wire   [7:0] grp_Cipher_fu_244_encrypt_9_V;
wire   [7:0] grp_Cipher_fu_244_encrypt_10_V;
wire   [7:0] grp_Cipher_fu_244_encrypt_11_V;
wire   [7:0] grp_Cipher_fu_244_encrypt_12_V;
wire   [7:0] grp_Cipher_fu_244_encrypt_13_V;
wire   [7:0] grp_Cipher_fu_244_encrypt_14_V;
wire   [7:0] grp_Cipher_fu_244_encrypt_15_V;
wire   [3:0] grp_Cipher_fu_244_key_0_V_address0;
wire    grp_Cipher_fu_244_key_0_V_ce0;
wire   [7:0] grp_Cipher_fu_244_key_0_V_d0;
wire    grp_Cipher_fu_244_key_0_V_we0;
wire   [3:0] grp_Cipher_fu_244_key_1_V_address0;
wire    grp_Cipher_fu_244_key_1_V_ce0;
wire   [7:0] grp_Cipher_fu_244_key_1_V_d0;
wire    grp_Cipher_fu_244_key_1_V_we0;
wire   [3:0] grp_Cipher_fu_244_key_2_V_address0;
wire    grp_Cipher_fu_244_key_2_V_ce0;
wire   [7:0] grp_Cipher_fu_244_key_2_V_d0;
wire    grp_Cipher_fu_244_key_2_V_we0;
wire   [3:0] grp_Cipher_fu_244_key_3_V_address0;
wire    grp_Cipher_fu_244_key_3_V_ce0;
wire   [7:0] grp_Cipher_fu_244_key_3_V_d0;
wire    grp_Cipher_fu_244_key_3_V_we0;
wire   [3:0] grp_Cipher_fu_244_key_4_V_address0;
wire    grp_Cipher_fu_244_key_4_V_ce0;
wire   [7:0] grp_Cipher_fu_244_key_4_V_d0;
wire    grp_Cipher_fu_244_key_4_V_we0;
wire   [3:0] grp_Cipher_fu_244_key_5_V_address0;
wire    grp_Cipher_fu_244_key_5_V_ce0;
wire   [7:0] grp_Cipher_fu_244_key_5_V_d0;
wire    grp_Cipher_fu_244_key_5_V_we0;
wire   [3:0] grp_Cipher_fu_244_key_6_V_address0;
wire    grp_Cipher_fu_244_key_6_V_ce0;
wire   [7:0] grp_Cipher_fu_244_key_6_V_d0;
wire    grp_Cipher_fu_244_key_6_V_we0;
wire   [3:0] grp_Cipher_fu_244_key_7_V_address0;
wire    grp_Cipher_fu_244_key_7_V_ce0;
wire   [7:0] grp_Cipher_fu_244_key_7_V_d0;
wire    grp_Cipher_fu_244_key_7_V_we0;
wire   [3:0] grp_Cipher_fu_244_key_8_V_address0;
wire    grp_Cipher_fu_244_key_8_V_ce0;
wire   [7:0] grp_Cipher_fu_244_key_8_V_d0;
wire    grp_Cipher_fu_244_key_8_V_we0;
wire   [3:0] grp_Cipher_fu_244_key_9_V_address0;
wire    grp_Cipher_fu_244_key_9_V_ce0;
wire   [7:0] grp_Cipher_fu_244_key_9_V_d0;
wire    grp_Cipher_fu_244_key_9_V_we0;
wire   [3:0] grp_Cipher_fu_244_key_10_V_address0;
wire    grp_Cipher_fu_244_key_10_V_ce0;
wire   [7:0] grp_Cipher_fu_244_key_10_V_d0;
wire    grp_Cipher_fu_244_key_10_V_we0;
wire    grp_Cipher_fu_244_ap_start;
wire    grp_Cipher_fu_244_encrypt_0_V_ap_vld;
wire    grp_Cipher_fu_244_encrypt_1_V_ap_vld;
wire    grp_Cipher_fu_244_encrypt_2_V_ap_vld;
wire    grp_Cipher_fu_244_encrypt_3_V_ap_vld;
wire    grp_Cipher_fu_244_encrypt_4_V_ap_vld;
wire    grp_Cipher_fu_244_encrypt_5_V_ap_vld;
wire    grp_Cipher_fu_244_encrypt_6_V_ap_vld;
wire    grp_Cipher_fu_244_encrypt_7_V_ap_vld;
wire    grp_Cipher_fu_244_encrypt_8_V_ap_vld;
wire    grp_Cipher_fu_244_encrypt_9_V_ap_vld;
wire    grp_Cipher_fu_244_encrypt_10_V_ap_vld;
wire    grp_Cipher_fu_244_encrypt_11_V_ap_vld;
wire    grp_Cipher_fu_244_encrypt_12_V_ap_vld;
wire    grp_Cipher_fu_244_encrypt_13_V_ap_vld;
wire    grp_Cipher_fu_244_encrypt_14_V_ap_vld;
wire    grp_Cipher_fu_244_encrypt_15_V_ap_vld;
wire    grp_Cipher_fu_244_ap_done;
wire    grp_Cipher_fu_244_ap_ready;
wire    grp_Cipher_fu_244_ap_idle;
reg    grp_Cipher_fu_244_ap_continue;
reg   [31:0] i_reg_233;
reg    grp_Cipher_fu_244_ap_start_reg;
wire    ap_CS_fsm_state18;
wire    ap_sync_grp_Cipher_fu_244_ap_ready;
wire    ap_sync_grp_Cipher_fu_244_ap_done;
reg    ap_block_state18_on_subcall_done;
reg    ap_sync_reg_grp_Cipher_fu_244_ap_ready;
reg    ap_sync_reg_grp_Cipher_fu_244_ap_done;
reg   [7:0] out_0_fu_120;
reg   [7:0] out_1_fu_124;
reg   [7:0] out_2_fu_128;
reg   [7:0] out_3_fu_132;
reg   [7:0] out_4_fu_136;
reg   [7:0] out_5_fu_140;
reg   [7:0] out_6_fu_144;
reg   [7:0] out_7_fu_148;
reg   [7:0] out_8_fu_152;
reg   [7:0] out_9_fu_156;
reg   [7:0] out_10_fu_160;
reg   [7:0] out_11_fu_164;
reg   [7:0] out_12_fu_168;
reg   [7:0] out_13_fu_172;
reg   [7:0] out_14_fu_176;
reg   [7:0] out_15_fu_180;
reg   [34:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 35'd1;
#0 plain_V_data_V_0_sel_rd = 1'b0;
#0 plain_V_data_V_0_sel_wr = 1'b0;
#0 plain_V_data_V_0_state = 2'd0;
#0 plain_V_keep_V_0_sel_rd = 1'b0;
#0 plain_V_keep_V_0_sel_wr = 1'b0;
#0 plain_V_keep_V_0_state = 2'd0;
#0 plain_V_strb_V_0_sel_rd = 1'b0;
#0 plain_V_strb_V_0_sel_wr = 1'b0;
#0 plain_V_strb_V_0_state = 2'd0;
#0 plain_V_user_V_0_sel_rd = 1'b0;
#0 plain_V_user_V_0_sel_wr = 1'b0;
#0 plain_V_user_V_0_state = 2'd0;
#0 plain_V_last_V_0_sel_rd = 1'b0;
#0 plain_V_last_V_0_sel_wr = 1'b0;
#0 plain_V_last_V_0_state = 2'd0;
#0 plain_V_id_V_0_sel_rd = 1'b0;
#0 plain_V_id_V_0_sel_wr = 1'b0;
#0 plain_V_id_V_0_state = 2'd0;
#0 plain_V_dest_V_0_sel_rd = 1'b0;
#0 plain_V_dest_V_0_sel_wr = 1'b0;
#0 plain_V_dest_V_0_state = 2'd0;
#0 encrypt_V_data_V_1_sel_rd = 1'b0;
#0 encrypt_V_data_V_1_sel_wr = 1'b0;
#0 encrypt_V_data_V_1_state = 2'd0;
#0 encrypt_V_keep_V_1_sel_rd = 1'b0;
#0 encrypt_V_keep_V_1_sel_wr = 1'b0;
#0 encrypt_V_keep_V_1_state = 2'd0;
#0 encrypt_V_strb_V_1_sel_rd = 1'b0;
#0 encrypt_V_strb_V_1_sel_wr = 1'b0;
#0 encrypt_V_strb_V_1_state = 2'd0;
#0 encrypt_V_user_V_1_sel_rd = 1'b0;
#0 encrypt_V_user_V_1_sel_wr = 1'b0;
#0 encrypt_V_user_V_1_state = 2'd0;
#0 encrypt_V_last_V_1_sel_rd = 1'b0;
#0 encrypt_V_last_V_1_sel_wr = 1'b0;
#0 encrypt_V_last_V_1_state = 2'd0;
#0 encrypt_V_id_V_1_sel_rd = 1'b0;
#0 encrypt_V_id_V_1_sel_wr = 1'b0;
#0 encrypt_V_id_V_1_state = 2'd0;
#0 encrypt_V_dest_V_1_sel_rd = 1'b0;
#0 encrypt_V_dest_V_1_sel_wr = 1'b0;
#0 encrypt_V_dest_V_1_state = 2'd0;
#0 grp_Cipher_fu_244_ap_start_reg = 1'b0;
#0 ap_sync_reg_grp_Cipher_fu_244_ap_ready = 1'b0;
#0 ap_sync_reg_grp_Cipher_fu_244_ap_done = 1'b0;
end

AES_ECB_encrypt_AXILiteS_s_axi #(
    .C_S_AXI_ADDR_WIDTH( C_S_AXI_AXILITES_ADDR_WIDTH ),
    .C_S_AXI_DATA_WIDTH( C_S_AXI_AXILITES_DATA_WIDTH ))
AES_ECB_encrypt_AXILiteS_s_axi_U(
    .AWVALID(s_axi_AXILiteS_AWVALID),
    .AWREADY(s_axi_AXILiteS_AWREADY),
    .AWADDR(s_axi_AXILiteS_AWADDR),
    .WVALID(s_axi_AXILiteS_WVALID),
    .WREADY(s_axi_AXILiteS_WREADY),
    .WDATA(s_axi_AXILiteS_WDATA),
    .WSTRB(s_axi_AXILiteS_WSTRB),
    .ARVALID(s_axi_AXILiteS_ARVALID),
    .ARREADY(s_axi_AXILiteS_ARREADY),
    .ARADDR(s_axi_AXILiteS_ARADDR),
    .RVALID(s_axi_AXILiteS_RVALID),
    .RREADY(s_axi_AXILiteS_RREADY),
    .RDATA(s_axi_AXILiteS_RDATA),
    .RRESP(s_axi_AXILiteS_RRESP),
    .BVALID(s_axi_AXILiteS_BVALID),
    .BREADY(s_axi_AXILiteS_BREADY),
    .BRESP(s_axi_AXILiteS_BRESP),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .ap_start(ap_start),
    .interrupt(interrupt),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_idle(ap_idle),
    .key_0_V_address0(grp_Cipher_fu_244_key_0_V_address0),
    .key_0_V_ce0(grp_Cipher_fu_244_key_0_V_ce0),
    .key_0_V_q0(key_0_V_q0),
    .key_1_V_address0(grp_Cipher_fu_244_key_1_V_address0),
    .key_1_V_ce0(grp_Cipher_fu_244_key_1_V_ce0),
    .key_1_V_q0(key_1_V_q0),
    .key_2_V_address0(grp_Cipher_fu_244_key_2_V_address0),
    .key_2_V_ce0(grp_Cipher_fu_244_key_2_V_ce0),
    .key_2_V_q0(key_2_V_q0),
    .key_3_V_address0(grp_Cipher_fu_244_key_3_V_address0),
    .key_3_V_ce0(grp_Cipher_fu_244_key_3_V_ce0),
    .key_3_V_q0(key_3_V_q0),
    .key_4_V_address0(grp_Cipher_fu_244_key_4_V_address0),
    .key_4_V_ce0(grp_Cipher_fu_244_key_4_V_ce0),
    .key_4_V_q0(key_4_V_q0),
    .key_5_V_address0(grp_Cipher_fu_244_key_5_V_address0),
    .key_5_V_ce0(grp_Cipher_fu_244_key_5_V_ce0),
    .key_5_V_q0(key_5_V_q0),
    .key_6_V_address0(grp_Cipher_fu_244_key_6_V_address0),
    .key_6_V_ce0(grp_Cipher_fu_244_key_6_V_ce0),
    .key_6_V_q0(key_6_V_q0),
    .key_7_V_address0(grp_Cipher_fu_244_key_7_V_address0),
    .key_7_V_ce0(grp_Cipher_fu_244_key_7_V_ce0),
    .key_7_V_q0(key_7_V_q0),
    .key_8_V_address0(grp_Cipher_fu_244_key_8_V_address0),
    .key_8_V_ce0(grp_Cipher_fu_244_key_8_V_ce0),
    .key_8_V_q0(key_8_V_q0),
    .key_9_V_address0(grp_Cipher_fu_244_key_9_V_address0),
    .key_9_V_ce0(grp_Cipher_fu_244_key_9_V_ce0),
    .key_9_V_q0(key_9_V_q0),
    .key_10_V_address0(grp_Cipher_fu_244_key_10_V_address0),
    .key_10_V_ce0(grp_Cipher_fu_244_key_10_V_ce0),
    .key_10_V_q0(key_10_V_q0),
    .len(len)
);

Cipher grp_Cipher_fu_244(
    .plain_0_V_read(tmp_data_V_16_reg_530),
    .plain_1_V_read(tmp_data_V_17_reg_570),
    .plain_2_V_read(tmp_data_V_18_reg_605),
    .plain_3_V_read(tmp_data_V_19_reg_640),
    .plain_4_V_read(tmp_data_V_20_reg_675),
    .plain_5_V_read(tmp_data_V_21_reg_710),
    .plain_6_V_read(tmp_data_V_22_reg_745),
    .plain_7_V_read(tmp_data_V_23_reg_780),
    .plain_8_V_read(tmp_data_V_24_reg_815),
    .plain_9_V_read(tmp_data_V_25_reg_850),
    .plain_10_V_read(tmp_data_V_26_reg_885),
    .plain_11_V_read(tmp_data_V_27_reg_920),
    .plain_12_V_read(tmp_data_V_28_reg_955),
    .plain_13_V_read(tmp_data_V_29_reg_990),
    .plain_14_V_read(tmp_data_V_30_reg_1025),
    .plain_15_V_read(tmp_data_V_31_reg_1060),
    .encrypt_0_V(grp_Cipher_fu_244_encrypt_0_V),
    .encrypt_1_V(grp_Cipher_fu_244_encrypt_1_V),
    .encrypt_2_V(grp_Cipher_fu_244_encrypt_2_V),
    .encrypt_3_V(grp_Cipher_fu_244_encrypt_3_V),
    .encrypt_4_V(grp_Cipher_fu_244_encrypt_4_V),
    .encrypt_5_V(grp_Cipher_fu_244_encrypt_5_V),
    .encrypt_6_V(grp_Cipher_fu_244_encrypt_6_V),
    .encrypt_7_V(grp_Cipher_fu_244_encrypt_7_V),
    .encrypt_8_V(grp_Cipher_fu_244_encrypt_8_V),
    .encrypt_9_V(grp_Cipher_fu_244_encrypt_9_V),
    .encrypt_10_V(grp_Cipher_fu_244_encrypt_10_V),
    .encrypt_11_V(grp_Cipher_fu_244_encrypt_11_V),
    .encrypt_12_V(grp_Cipher_fu_244_encrypt_12_V),
    .encrypt_13_V(grp_Cipher_fu_244_encrypt_13_V),
    .encrypt_14_V(grp_Cipher_fu_244_encrypt_14_V),
    .encrypt_15_V(grp_Cipher_fu_244_encrypt_15_V),
    .key_0_V_address0(grp_Cipher_fu_244_key_0_V_address0),
    .key_0_V_ce0(grp_Cipher_fu_244_key_0_V_ce0),
    .key_0_V_d0(grp_Cipher_fu_244_key_0_V_d0),
    .key_0_V_q0(key_0_V_q0),
    .key_0_V_we0(grp_Cipher_fu_244_key_0_V_we0),
    .key_1_V_address0(grp_Cipher_fu_244_key_1_V_address0),
    .key_1_V_ce0(grp_Cipher_fu_244_key_1_V_ce0),
    .key_1_V_d0(grp_Cipher_fu_244_key_1_V_d0),
    .key_1_V_q0(key_1_V_q0),
    .key_1_V_we0(grp_Cipher_fu_244_key_1_V_we0),
    .key_2_V_address0(grp_Cipher_fu_244_key_2_V_address0),
    .key_2_V_ce0(grp_Cipher_fu_244_key_2_V_ce0),
    .key_2_V_d0(grp_Cipher_fu_244_key_2_V_d0),
    .key_2_V_q0(key_2_V_q0),
    .key_2_V_we0(grp_Cipher_fu_244_key_2_V_we0),
    .key_3_V_address0(grp_Cipher_fu_244_key_3_V_address0),
    .key_3_V_ce0(grp_Cipher_fu_244_key_3_V_ce0),
    .key_3_V_d0(grp_Cipher_fu_244_key_3_V_d0),
    .key_3_V_q0(key_3_V_q0),
    .key_3_V_we0(grp_Cipher_fu_244_key_3_V_we0),
    .key_4_V_address0(grp_Cipher_fu_244_key_4_V_address0),
    .key_4_V_ce0(grp_Cipher_fu_244_key_4_V_ce0),
    .key_4_V_d0(grp_Cipher_fu_244_key_4_V_d0),
    .key_4_V_q0(key_4_V_q0),
    .key_4_V_we0(grp_Cipher_fu_244_key_4_V_we0),
    .key_5_V_address0(grp_Cipher_fu_244_key_5_V_address0),
    .key_5_V_ce0(grp_Cipher_fu_244_key_5_V_ce0),
    .key_5_V_d0(grp_Cipher_fu_244_key_5_V_d0),
    .key_5_V_q0(key_5_V_q0),
    .key_5_V_we0(grp_Cipher_fu_244_key_5_V_we0),
    .key_6_V_address0(grp_Cipher_fu_244_key_6_V_address0),
    .key_6_V_ce0(grp_Cipher_fu_244_key_6_V_ce0),
    .key_6_V_d0(grp_Cipher_fu_244_key_6_V_d0),
    .key_6_V_q0(key_6_V_q0),
    .key_6_V_we0(grp_Cipher_fu_244_key_6_V_we0),
    .key_7_V_address0(grp_Cipher_fu_244_key_7_V_address0),
    .key_7_V_ce0(grp_Cipher_fu_244_key_7_V_ce0),
    .key_7_V_d0(grp_Cipher_fu_244_key_7_V_d0),
    .key_7_V_q0(key_7_V_q0),
    .key_7_V_we0(grp_Cipher_fu_244_key_7_V_we0),
    .key_8_V_address0(grp_Cipher_fu_244_key_8_V_address0),
    .key_8_V_ce0(grp_Cipher_fu_244_key_8_V_ce0),
    .key_8_V_d0(grp_Cipher_fu_244_key_8_V_d0),
    .key_8_V_q0(key_8_V_q0),
    .key_8_V_we0(grp_Cipher_fu_244_key_8_V_we0),
    .key_9_V_address0(grp_Cipher_fu_244_key_9_V_address0),
    .key_9_V_ce0(grp_Cipher_fu_244_key_9_V_ce0),
    .key_9_V_d0(grp_Cipher_fu_244_key_9_V_d0),
    .key_9_V_q0(key_9_V_q0),
    .key_9_V_we0(grp_Cipher_fu_244_key_9_V_we0),
    .key_10_V_address0(grp_Cipher_fu_244_key_10_V_address0),
    .key_10_V_ce0(grp_Cipher_fu_244_key_10_V_ce0),
    .key_10_V_d0(grp_Cipher_fu_244_key_10_V_d0),
    .key_10_V_q0(key_10_V_q0),
    .key_10_V_we0(grp_Cipher_fu_244_key_10_V_we0),
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .plain_0_V_read_ap_vld(1'b1),
    .plain_1_V_read_ap_vld(1'b1),
    .plain_2_V_read_ap_vld(1'b1),
    .plain_3_V_read_ap_vld(1'b1),
    .plain_4_V_read_ap_vld(1'b1),
    .plain_5_V_read_ap_vld(1'b1),
    .plain_6_V_read_ap_vld(1'b1),
    .plain_7_V_read_ap_vld(1'b1),
    .plain_8_V_read_ap_vld(1'b1),
    .plain_9_V_read_ap_vld(1'b1),
    .plain_10_V_read_ap_vld(1'b1),
    .plain_11_V_read_ap_vld(1'b1),
    .plain_12_V_read_ap_vld(1'b1),
    .plain_13_V_read_ap_vld(1'b1),
    .plain_14_V_read_ap_vld(1'b1),
    .plain_15_V_read_ap_vld(1'b1),
    .ap_start(grp_Cipher_fu_244_ap_start),
    .encrypt_0_V_ap_vld(grp_Cipher_fu_244_encrypt_0_V_ap_vld),
    .encrypt_1_V_ap_vld(grp_Cipher_fu_244_encrypt_1_V_ap_vld),
    .encrypt_2_V_ap_vld(grp_Cipher_fu_244_encrypt_2_V_ap_vld),
    .encrypt_3_V_ap_vld(grp_Cipher_fu_244_encrypt_3_V_ap_vld),
    .encrypt_4_V_ap_vld(grp_Cipher_fu_244_encrypt_4_V_ap_vld),
    .encrypt_5_V_ap_vld(grp_Cipher_fu_244_encrypt_5_V_ap_vld),
    .encrypt_6_V_ap_vld(grp_Cipher_fu_244_encrypt_6_V_ap_vld),
    .encrypt_7_V_ap_vld(grp_Cipher_fu_244_encrypt_7_V_ap_vld),
    .encrypt_8_V_ap_vld(grp_Cipher_fu_244_encrypt_8_V_ap_vld),
    .encrypt_9_V_ap_vld(grp_Cipher_fu_244_encrypt_9_V_ap_vld),
    .encrypt_10_V_ap_vld(grp_Cipher_fu_244_encrypt_10_V_ap_vld),
    .encrypt_11_V_ap_vld(grp_Cipher_fu_244_encrypt_11_V_ap_vld),
    .encrypt_12_V_ap_vld(grp_Cipher_fu_244_encrypt_12_V_ap_vld),
    .encrypt_13_V_ap_vld(grp_Cipher_fu_244_encrypt_13_V_ap_vld),
    .encrypt_14_V_ap_vld(grp_Cipher_fu_244_encrypt_14_V_ap_vld),
    .encrypt_15_V_ap_vld(grp_Cipher_fu_244_encrypt_15_V_ap_vld),
    .ap_done(grp_Cipher_fu_244_ap_done),
    .ap_ready(grp_Cipher_fu_244_ap_ready),
    .ap_idle(grp_Cipher_fu_244_ap_idle),
    .ap_continue(grp_Cipher_fu_244_ap_continue)
);

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_sync_reg_grp_Cipher_fu_244_ap_done <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_state18) & (1'b0 == ap_block_state18_on_subcall_done))) begin
            ap_sync_reg_grp_Cipher_fu_244_ap_done <= 1'b0;
        end else if ((grp_Cipher_fu_244_ap_done == 1'b1)) begin
            ap_sync_reg_grp_Cipher_fu_244_ap_done <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_sync_reg_grp_Cipher_fu_244_ap_ready <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_state18) & (1'b0 == ap_block_state18_on_subcall_done))) begin
            ap_sync_reg_grp_Cipher_fu_244_ap_ready <= 1'b0;
        end else if ((grp_Cipher_fu_244_ap_ready == 1'b1)) begin
            ap_sync_reg_grp_Cipher_fu_244_ap_ready <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        encrypt_V_data_V_1_sel_rd <= 1'b0;
    end else begin
        if (((encrypt_V_data_V_1_ack_out == 1'b1) & (encrypt_V_data_V_1_vld_out == 1'b1))) begin
            encrypt_V_data_V_1_sel_rd <= ~encrypt_V_data_V_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        encrypt_V_data_V_1_sel_wr <= 1'b0;
    end else begin
        if (((encrypt_V_data_V_1_ack_in == 1'b1) & (encrypt_V_data_V_1_vld_in == 1'b1))) begin
            encrypt_V_data_V_1_sel_wr <= ~encrypt_V_data_V_1_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        encrypt_V_data_V_1_state <= 2'd0;
    end else begin
        if ((((encrypt_V_data_V_1_state == 2'd2) & (encrypt_V_data_V_1_vld_in == 1'b0)) | ((encrypt_V_data_V_1_state == 2'd3) & (encrypt_V_data_V_1_vld_in == 1'b0) & (encrypt_V_data_V_1_ack_out == 1'b1)))) begin
            encrypt_V_data_V_1_state <= 2'd2;
        end else if ((((encrypt_V_data_V_1_state == 2'd1) & (encrypt_V_data_V_1_ack_out == 1'b0)) | ((encrypt_V_data_V_1_state == 2'd3) & (encrypt_V_data_V_1_ack_out == 1'b0) & (encrypt_V_data_V_1_vld_in == 1'b1)))) begin
            encrypt_V_data_V_1_state <= 2'd1;
        end else if (((~((encrypt_V_data_V_1_vld_in == 1'b0) & (encrypt_V_data_V_1_ack_out == 1'b1)) & ~((encrypt_V_data_V_1_ack_out == 1'b0) & (encrypt_V_data_V_1_vld_in == 1'b1)) & (encrypt_V_data_V_1_state == 2'd3)) | ((encrypt_V_data_V_1_state == 2'd1) & (encrypt_V_data_V_1_ack_out == 1'b1)) | ((encrypt_V_data_V_1_state == 2'd2) & (encrypt_V_data_V_1_vld_in == 1'b1)))) begin
            encrypt_V_data_V_1_state <= 2'd3;
        end else begin
            encrypt_V_data_V_1_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        encrypt_V_dest_V_1_sel_rd <= 1'b0;
    end else begin
        if (((encrypt_V_dest_V_1_ack_out == 1'b1) & (encrypt_V_dest_V_1_vld_out == 1'b1))) begin
            encrypt_V_dest_V_1_sel_rd <= ~encrypt_V_dest_V_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        encrypt_V_dest_V_1_sel_wr <= 1'b0;
    end else begin
        if (((encrypt_V_dest_V_1_ack_in == 1'b1) & (encrypt_V_dest_V_1_vld_in == 1'b1))) begin
            encrypt_V_dest_V_1_sel_wr <= ~encrypt_V_dest_V_1_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        encrypt_V_dest_V_1_state <= 2'd0;
    end else begin
        if ((((encrypt_V_dest_V_1_state == 2'd2) & (encrypt_V_dest_V_1_vld_in == 1'b0)) | ((encrypt_V_dest_V_1_state == 2'd3) & (encrypt_V_dest_V_1_vld_in == 1'b0) & (encrypt_V_dest_V_1_ack_out == 1'b1)))) begin
            encrypt_V_dest_V_1_state <= 2'd2;
        end else if ((((encrypt_V_dest_V_1_state == 2'd1) & (encrypt_V_dest_V_1_ack_out == 1'b0)) | ((encrypt_V_dest_V_1_state == 2'd3) & (encrypt_V_dest_V_1_ack_out == 1'b0) & (encrypt_V_dest_V_1_vld_in == 1'b1)))) begin
            encrypt_V_dest_V_1_state <= 2'd1;
        end else if (((~((encrypt_V_dest_V_1_vld_in == 1'b0) & (encrypt_V_dest_V_1_ack_out == 1'b1)) & ~((encrypt_V_dest_V_1_ack_out == 1'b0) & (encrypt_V_dest_V_1_vld_in == 1'b1)) & (encrypt_V_dest_V_1_state == 2'd3)) | ((encrypt_V_dest_V_1_state == 2'd1) & (encrypt_V_dest_V_1_ack_out == 1'b1)) | ((encrypt_V_dest_V_1_state == 2'd2) & (encrypt_V_dest_V_1_vld_in == 1'b1)))) begin
            encrypt_V_dest_V_1_state <= 2'd3;
        end else begin
            encrypt_V_dest_V_1_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        encrypt_V_id_V_1_sel_rd <= 1'b0;
    end else begin
        if (((encrypt_V_id_V_1_ack_out == 1'b1) & (encrypt_V_id_V_1_vld_out == 1'b1))) begin
            encrypt_V_id_V_1_sel_rd <= ~encrypt_V_id_V_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        encrypt_V_id_V_1_sel_wr <= 1'b0;
    end else begin
        if (((encrypt_V_id_V_1_ack_in == 1'b1) & (encrypt_V_id_V_1_vld_in == 1'b1))) begin
            encrypt_V_id_V_1_sel_wr <= ~encrypt_V_id_V_1_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        encrypt_V_id_V_1_state <= 2'd0;
    end else begin
        if ((((encrypt_V_id_V_1_state == 2'd2) & (encrypt_V_id_V_1_vld_in == 1'b0)) | ((encrypt_V_id_V_1_state == 2'd3) & (encrypt_V_id_V_1_vld_in == 1'b0) & (encrypt_V_id_V_1_ack_out == 1'b1)))) begin
            encrypt_V_id_V_1_state <= 2'd2;
        end else if ((((encrypt_V_id_V_1_state == 2'd1) & (encrypt_V_id_V_1_ack_out == 1'b0)) | ((encrypt_V_id_V_1_state == 2'd3) & (encrypt_V_id_V_1_ack_out == 1'b0) & (encrypt_V_id_V_1_vld_in == 1'b1)))) begin
            encrypt_V_id_V_1_state <= 2'd1;
        end else if (((~((encrypt_V_id_V_1_vld_in == 1'b0) & (encrypt_V_id_V_1_ack_out == 1'b1)) & ~((encrypt_V_id_V_1_ack_out == 1'b0) & (encrypt_V_id_V_1_vld_in == 1'b1)) & (encrypt_V_id_V_1_state == 2'd3)) | ((encrypt_V_id_V_1_state == 2'd1) & (encrypt_V_id_V_1_ack_out == 1'b1)) | ((encrypt_V_id_V_1_state == 2'd2) & (encrypt_V_id_V_1_vld_in == 1'b1)))) begin
            encrypt_V_id_V_1_state <= 2'd3;
        end else begin
            encrypt_V_id_V_1_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        encrypt_V_keep_V_1_sel_rd <= 1'b0;
    end else begin
        if (((encrypt_V_keep_V_1_ack_out == 1'b1) & (encrypt_V_keep_V_1_vld_out == 1'b1))) begin
            encrypt_V_keep_V_1_sel_rd <= ~encrypt_V_keep_V_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        encrypt_V_keep_V_1_sel_wr <= 1'b0;
    end else begin
        if (((encrypt_V_keep_V_1_ack_in == 1'b1) & (encrypt_V_keep_V_1_vld_in == 1'b1))) begin
            encrypt_V_keep_V_1_sel_wr <= ~encrypt_V_keep_V_1_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        encrypt_V_keep_V_1_state <= 2'd0;
    end else begin
        if ((((encrypt_V_keep_V_1_state == 2'd2) & (encrypt_V_keep_V_1_vld_in == 1'b0)) | ((encrypt_V_keep_V_1_state == 2'd3) & (encrypt_V_keep_V_1_vld_in == 1'b0) & (encrypt_V_keep_V_1_ack_out == 1'b1)))) begin
            encrypt_V_keep_V_1_state <= 2'd2;
        end else if ((((encrypt_V_keep_V_1_state == 2'd1) & (encrypt_V_keep_V_1_ack_out == 1'b0)) | ((encrypt_V_keep_V_1_state == 2'd3) & (encrypt_V_keep_V_1_ack_out == 1'b0) & (encrypt_V_keep_V_1_vld_in == 1'b1)))) begin
            encrypt_V_keep_V_1_state <= 2'd1;
        end else if (((~((encrypt_V_keep_V_1_vld_in == 1'b0) & (encrypt_V_keep_V_1_ack_out == 1'b1)) & ~((encrypt_V_keep_V_1_ack_out == 1'b0) & (encrypt_V_keep_V_1_vld_in == 1'b1)) & (encrypt_V_keep_V_1_state == 2'd3)) | ((encrypt_V_keep_V_1_state == 2'd1) & (encrypt_V_keep_V_1_ack_out == 1'b1)) | ((encrypt_V_keep_V_1_state == 2'd2) & (encrypt_V_keep_V_1_vld_in == 1'b1)))) begin
            encrypt_V_keep_V_1_state <= 2'd3;
        end else begin
            encrypt_V_keep_V_1_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        encrypt_V_last_V_1_sel_rd <= 1'b0;
    end else begin
        if (((encrypt_V_last_V_1_ack_out == 1'b1) & (encrypt_V_last_V_1_vld_out == 1'b1))) begin
            encrypt_V_last_V_1_sel_rd <= ~encrypt_V_last_V_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        encrypt_V_last_V_1_sel_wr <= 1'b0;
    end else begin
        if (((encrypt_V_last_V_1_ack_in == 1'b1) & (encrypt_V_last_V_1_vld_in == 1'b1))) begin
            encrypt_V_last_V_1_sel_wr <= ~encrypt_V_last_V_1_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        encrypt_V_last_V_1_state <= 2'd0;
    end else begin
        if ((((encrypt_V_last_V_1_state == 2'd2) & (encrypt_V_last_V_1_vld_in == 1'b0)) | ((encrypt_V_last_V_1_state == 2'd3) & (encrypt_V_last_V_1_vld_in == 1'b0) & (encrypt_V_last_V_1_ack_out == 1'b1)))) begin
            encrypt_V_last_V_1_state <= 2'd2;
        end else if ((((encrypt_V_last_V_1_state == 2'd1) & (encrypt_V_last_V_1_ack_out == 1'b0)) | ((encrypt_V_last_V_1_state == 2'd3) & (encrypt_V_last_V_1_ack_out == 1'b0) & (encrypt_V_last_V_1_vld_in == 1'b1)))) begin
            encrypt_V_last_V_1_state <= 2'd1;
        end else if (((~((encrypt_V_last_V_1_vld_in == 1'b0) & (encrypt_V_last_V_1_ack_out == 1'b1)) & ~((encrypt_V_last_V_1_ack_out == 1'b0) & (encrypt_V_last_V_1_vld_in == 1'b1)) & (encrypt_V_last_V_1_state == 2'd3)) | ((encrypt_V_last_V_1_state == 2'd1) & (encrypt_V_last_V_1_ack_out == 1'b1)) | ((encrypt_V_last_V_1_state == 2'd2) & (encrypt_V_last_V_1_vld_in == 1'b1)))) begin
            encrypt_V_last_V_1_state <= 2'd3;
        end else begin
            encrypt_V_last_V_1_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        encrypt_V_strb_V_1_sel_rd <= 1'b0;
    end else begin
        if (((encrypt_V_strb_V_1_ack_out == 1'b1) & (encrypt_V_strb_V_1_vld_out == 1'b1))) begin
            encrypt_V_strb_V_1_sel_rd <= ~encrypt_V_strb_V_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        encrypt_V_strb_V_1_sel_wr <= 1'b0;
    end else begin
        if (((encrypt_V_strb_V_1_ack_in == 1'b1) & (encrypt_V_strb_V_1_vld_in == 1'b1))) begin
            encrypt_V_strb_V_1_sel_wr <= ~encrypt_V_strb_V_1_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        encrypt_V_strb_V_1_state <= 2'd0;
    end else begin
        if ((((encrypt_V_strb_V_1_state == 2'd2) & (encrypt_V_strb_V_1_vld_in == 1'b0)) | ((encrypt_V_strb_V_1_state == 2'd3) & (encrypt_V_strb_V_1_vld_in == 1'b0) & (encrypt_V_strb_V_1_ack_out == 1'b1)))) begin
            encrypt_V_strb_V_1_state <= 2'd2;
        end else if ((((encrypt_V_strb_V_1_state == 2'd1) & (encrypt_V_strb_V_1_ack_out == 1'b0)) | ((encrypt_V_strb_V_1_state == 2'd3) & (encrypt_V_strb_V_1_ack_out == 1'b0) & (encrypt_V_strb_V_1_vld_in == 1'b1)))) begin
            encrypt_V_strb_V_1_state <= 2'd1;
        end else if (((~((encrypt_V_strb_V_1_vld_in == 1'b0) & (encrypt_V_strb_V_1_ack_out == 1'b1)) & ~((encrypt_V_strb_V_1_ack_out == 1'b0) & (encrypt_V_strb_V_1_vld_in == 1'b1)) & (encrypt_V_strb_V_1_state == 2'd3)) | ((encrypt_V_strb_V_1_state == 2'd1) & (encrypt_V_strb_V_1_ack_out == 1'b1)) | ((encrypt_V_strb_V_1_state == 2'd2) & (encrypt_V_strb_V_1_vld_in == 1'b1)))) begin
            encrypt_V_strb_V_1_state <= 2'd3;
        end else begin
            encrypt_V_strb_V_1_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        encrypt_V_user_V_1_sel_rd <= 1'b0;
    end else begin
        if (((encrypt_V_user_V_1_ack_out == 1'b1) & (encrypt_V_user_V_1_vld_out == 1'b1))) begin
            encrypt_V_user_V_1_sel_rd <= ~encrypt_V_user_V_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        encrypt_V_user_V_1_sel_wr <= 1'b0;
    end else begin
        if (((encrypt_V_user_V_1_ack_in == 1'b1) & (encrypt_V_user_V_1_vld_in == 1'b1))) begin
            encrypt_V_user_V_1_sel_wr <= ~encrypt_V_user_V_1_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        encrypt_V_user_V_1_state <= 2'd0;
    end else begin
        if ((((encrypt_V_user_V_1_state == 2'd2) & (encrypt_V_user_V_1_vld_in == 1'b0)) | ((encrypt_V_user_V_1_state == 2'd3) & (encrypt_V_user_V_1_vld_in == 1'b0) & (encrypt_V_user_V_1_ack_out == 1'b1)))) begin
            encrypt_V_user_V_1_state <= 2'd2;
        end else if ((((encrypt_V_user_V_1_state == 2'd1) & (encrypt_V_user_V_1_ack_out == 1'b0)) | ((encrypt_V_user_V_1_state == 2'd3) & (encrypt_V_user_V_1_ack_out == 1'b0) & (encrypt_V_user_V_1_vld_in == 1'b1)))) begin
            encrypt_V_user_V_1_state <= 2'd1;
        end else if (((~((encrypt_V_user_V_1_vld_in == 1'b0) & (encrypt_V_user_V_1_ack_out == 1'b1)) & ~((encrypt_V_user_V_1_ack_out == 1'b0) & (encrypt_V_user_V_1_vld_in == 1'b1)) & (encrypt_V_user_V_1_state == 2'd3)) | ((encrypt_V_user_V_1_state == 2'd1) & (encrypt_V_user_V_1_ack_out == 1'b1)) | ((encrypt_V_user_V_1_state == 2'd2) & (encrypt_V_user_V_1_vld_in == 1'b1)))) begin
            encrypt_V_user_V_1_state <= 2'd3;
        end else begin
            encrypt_V_user_V_1_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        grp_Cipher_fu_244_ap_start_reg <= 1'b0;
    end else begin
        if ((((ap_sync_grp_Cipher_fu_244_ap_ready == 1'b0) & (1'b1 == ap_CS_fsm_state18)) | ((plain_V_data_V_0_vld_out == 1'b1) & (1'b1 == ap_CS_fsm_state17)))) begin
            grp_Cipher_fu_244_ap_start_reg <= 1'b1;
        end else if ((grp_Cipher_fu_244_ap_ready == 1'b1)) begin
            grp_Cipher_fu_244_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        plain_V_data_V_0_sel_rd <= 1'b0;
    end else begin
        if (((plain_V_data_V_0_ack_out == 1'b1) & (plain_V_data_V_0_vld_out == 1'b1))) begin
            plain_V_data_V_0_sel_rd <= ~plain_V_data_V_0_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        plain_V_data_V_0_sel_wr <= 1'b0;
    end else begin
        if (((plain_V_data_V_0_ack_in == 1'b1) & (plain_V_data_V_0_vld_in == 1'b1))) begin
            plain_V_data_V_0_sel_wr <= ~plain_V_data_V_0_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        plain_V_data_V_0_state <= 2'd0;
    end else begin
        if ((((plain_V_data_V_0_state == 2'd2) & (plain_V_data_V_0_vld_in == 1'b0)) | ((plain_V_data_V_0_state == 2'd3) & (plain_V_data_V_0_vld_in == 1'b0) & (plain_V_data_V_0_ack_out == 1'b1)))) begin
            plain_V_data_V_0_state <= 2'd2;
        end else if ((((plain_V_data_V_0_state == 2'd1) & (plain_V_data_V_0_ack_out == 1'b0)) | ((plain_V_data_V_0_state == 2'd3) & (plain_V_data_V_0_ack_out == 1'b0) & (plain_V_data_V_0_vld_in == 1'b1)))) begin
            plain_V_data_V_0_state <= 2'd1;
        end else if (((~((plain_V_data_V_0_ack_out == 1'b0) & (plain_V_data_V_0_vld_in == 1'b1)) & ~((plain_V_data_V_0_vld_in == 1'b0) & (plain_V_data_V_0_ack_out == 1'b1)) & (plain_V_data_V_0_state == 2'd3)) | ((plain_V_data_V_0_state == 2'd1) & (plain_V_data_V_0_ack_out == 1'b1)) | ((plain_V_data_V_0_state == 2'd2) & (plain_V_data_V_0_vld_in == 1'b1)))) begin
            plain_V_data_V_0_state <= 2'd3;
        end else begin
            plain_V_data_V_0_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        plain_V_dest_V_0_sel_rd <= 1'b0;
    end else begin
        if (((plain_V_dest_V_0_ack_out == 1'b1) & (plain_V_dest_V_0_vld_out == 1'b1))) begin
            plain_V_dest_V_0_sel_rd <= ~plain_V_dest_V_0_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        plain_V_dest_V_0_sel_wr <= 1'b0;
    end else begin
        if (((plain_V_dest_V_0_ack_in == 1'b1) & (plain_V_dest_V_0_vld_in == 1'b1))) begin
            plain_V_dest_V_0_sel_wr <= ~plain_V_dest_V_0_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        plain_V_dest_V_0_state <= 2'd0;
    end else begin
        if ((((plain_V_dest_V_0_state == 2'd2) & (plain_V_dest_V_0_vld_in == 1'b0)) | ((plain_V_dest_V_0_state == 2'd3) & (plain_V_dest_V_0_vld_in == 1'b0) & (plain_V_dest_V_0_ack_out == 1'b1)))) begin
            plain_V_dest_V_0_state <= 2'd2;
        end else if ((((plain_V_dest_V_0_state == 2'd1) & (plain_V_dest_V_0_ack_out == 1'b0)) | ((plain_V_dest_V_0_state == 2'd3) & (plain_V_dest_V_0_ack_out == 1'b0) & (plain_V_dest_V_0_vld_in == 1'b1)))) begin
            plain_V_dest_V_0_state <= 2'd1;
        end else if (((~((plain_V_dest_V_0_vld_in == 1'b0) & (plain_V_dest_V_0_ack_out == 1'b1)) & ~((plain_V_dest_V_0_ack_out == 1'b0) & (plain_V_dest_V_0_vld_in == 1'b1)) & (plain_V_dest_V_0_state == 2'd3)) | ((plain_V_dest_V_0_state == 2'd1) & (plain_V_dest_V_0_ack_out == 1'b1)) | ((plain_V_dest_V_0_state == 2'd2) & (plain_V_dest_V_0_vld_in == 1'b1)))) begin
            plain_V_dest_V_0_state <= 2'd3;
        end else begin
            plain_V_dest_V_0_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        plain_V_id_V_0_sel_rd <= 1'b0;
    end else begin
        if (((plain_V_id_V_0_ack_out == 1'b1) & (plain_V_id_V_0_vld_out == 1'b1))) begin
            plain_V_id_V_0_sel_rd <= ~plain_V_id_V_0_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        plain_V_id_V_0_sel_wr <= 1'b0;
    end else begin
        if (((plain_V_id_V_0_ack_in == 1'b1) & (plain_V_id_V_0_vld_in == 1'b1))) begin
            plain_V_id_V_0_sel_wr <= ~plain_V_id_V_0_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        plain_V_id_V_0_state <= 2'd0;
    end else begin
        if ((((plain_V_id_V_0_state == 2'd2) & (plain_V_id_V_0_vld_in == 1'b0)) | ((plain_V_id_V_0_state == 2'd3) & (plain_V_id_V_0_vld_in == 1'b0) & (plain_V_id_V_0_ack_out == 1'b1)))) begin
            plain_V_id_V_0_state <= 2'd2;
        end else if ((((plain_V_id_V_0_state == 2'd1) & (plain_V_id_V_0_ack_out == 1'b0)) | ((plain_V_id_V_0_state == 2'd3) & (plain_V_id_V_0_ack_out == 1'b0) & (plain_V_id_V_0_vld_in == 1'b1)))) begin
            plain_V_id_V_0_state <= 2'd1;
        end else if (((~((plain_V_id_V_0_vld_in == 1'b0) & (plain_V_id_V_0_ack_out == 1'b1)) & ~((plain_V_id_V_0_ack_out == 1'b0) & (plain_V_id_V_0_vld_in == 1'b1)) & (plain_V_id_V_0_state == 2'd3)) | ((plain_V_id_V_0_state == 2'd1) & (plain_V_id_V_0_ack_out == 1'b1)) | ((plain_V_id_V_0_state == 2'd2) & (plain_V_id_V_0_vld_in == 1'b1)))) begin
            plain_V_id_V_0_state <= 2'd3;
        end else begin
            plain_V_id_V_0_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        plain_V_keep_V_0_sel_rd <= 1'b0;
    end else begin
        if (((plain_V_keep_V_0_ack_out == 1'b1) & (plain_V_keep_V_0_vld_out == 1'b1))) begin
            plain_V_keep_V_0_sel_rd <= ~plain_V_keep_V_0_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        plain_V_keep_V_0_sel_wr <= 1'b0;
    end else begin
        if (((plain_V_keep_V_0_ack_in == 1'b1) & (plain_V_keep_V_0_vld_in == 1'b1))) begin
            plain_V_keep_V_0_sel_wr <= ~plain_V_keep_V_0_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        plain_V_keep_V_0_state <= 2'd0;
    end else begin
        if ((((plain_V_keep_V_0_state == 2'd2) & (plain_V_keep_V_0_vld_in == 1'b0)) | ((plain_V_keep_V_0_state == 2'd3) & (plain_V_keep_V_0_vld_in == 1'b0) & (plain_V_keep_V_0_ack_out == 1'b1)))) begin
            plain_V_keep_V_0_state <= 2'd2;
        end else if ((((plain_V_keep_V_0_state == 2'd1) & (plain_V_keep_V_0_ack_out == 1'b0)) | ((plain_V_keep_V_0_state == 2'd3) & (plain_V_keep_V_0_ack_out == 1'b0) & (plain_V_keep_V_0_vld_in == 1'b1)))) begin
            plain_V_keep_V_0_state <= 2'd1;
        end else if (((~((plain_V_keep_V_0_vld_in == 1'b0) & (plain_V_keep_V_0_ack_out == 1'b1)) & ~((plain_V_keep_V_0_ack_out == 1'b0) & (plain_V_keep_V_0_vld_in == 1'b1)) & (plain_V_keep_V_0_state == 2'd3)) | ((plain_V_keep_V_0_state == 2'd1) & (plain_V_keep_V_0_ack_out == 1'b1)) | ((plain_V_keep_V_0_state == 2'd2) & (plain_V_keep_V_0_vld_in == 1'b1)))) begin
            plain_V_keep_V_0_state <= 2'd3;
        end else begin
            plain_V_keep_V_0_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        plain_V_last_V_0_sel_rd <= 1'b0;
    end else begin
        if (((plain_V_last_V_0_ack_out == 1'b1) & (plain_V_last_V_0_vld_out == 1'b1))) begin
            plain_V_last_V_0_sel_rd <= ~plain_V_last_V_0_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        plain_V_last_V_0_sel_wr <= 1'b0;
    end else begin
        if (((plain_V_last_V_0_ack_in == 1'b1) & (plain_V_last_V_0_vld_in == 1'b1))) begin
            plain_V_last_V_0_sel_wr <= ~plain_V_last_V_0_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        plain_V_last_V_0_state <= 2'd0;
    end else begin
        if ((((plain_V_last_V_0_state == 2'd2) & (plain_V_last_V_0_vld_in == 1'b0)) | ((plain_V_last_V_0_state == 2'd3) & (plain_V_last_V_0_vld_in == 1'b0) & (plain_V_last_V_0_ack_out == 1'b1)))) begin
            plain_V_last_V_0_state <= 2'd2;
        end else if ((((plain_V_last_V_0_state == 2'd1) & (plain_V_last_V_0_ack_out == 1'b0)) | ((plain_V_last_V_0_state == 2'd3) & (plain_V_last_V_0_ack_out == 1'b0) & (plain_V_last_V_0_vld_in == 1'b1)))) begin
            plain_V_last_V_0_state <= 2'd1;
        end else if (((~((plain_V_last_V_0_vld_in == 1'b0) & (plain_V_last_V_0_ack_out == 1'b1)) & ~((plain_V_last_V_0_ack_out == 1'b0) & (plain_V_last_V_0_vld_in == 1'b1)) & (plain_V_last_V_0_state == 2'd3)) | ((plain_V_last_V_0_state == 2'd1) & (plain_V_last_V_0_ack_out == 1'b1)) | ((plain_V_last_V_0_state == 2'd2) & (plain_V_last_V_0_vld_in == 1'b1)))) begin
            plain_V_last_V_0_state <= 2'd3;
        end else begin
            plain_V_last_V_0_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        plain_V_strb_V_0_sel_rd <= 1'b0;
    end else begin
        if (((plain_V_strb_V_0_ack_out == 1'b1) & (plain_V_strb_V_0_vld_out == 1'b1))) begin
            plain_V_strb_V_0_sel_rd <= ~plain_V_strb_V_0_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        plain_V_strb_V_0_sel_wr <= 1'b0;
    end else begin
        if (((plain_V_strb_V_0_ack_in == 1'b1) & (plain_V_strb_V_0_vld_in == 1'b1))) begin
            plain_V_strb_V_0_sel_wr <= ~plain_V_strb_V_0_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        plain_V_strb_V_0_state <= 2'd0;
    end else begin
        if ((((plain_V_strb_V_0_state == 2'd2) & (plain_V_strb_V_0_vld_in == 1'b0)) | ((plain_V_strb_V_0_state == 2'd3) & (plain_V_strb_V_0_vld_in == 1'b0) & (plain_V_strb_V_0_ack_out == 1'b1)))) begin
            plain_V_strb_V_0_state <= 2'd2;
        end else if ((((plain_V_strb_V_0_state == 2'd1) & (plain_V_strb_V_0_ack_out == 1'b0)) | ((plain_V_strb_V_0_state == 2'd3) & (plain_V_strb_V_0_ack_out == 1'b0) & (plain_V_strb_V_0_vld_in == 1'b1)))) begin
            plain_V_strb_V_0_state <= 2'd1;
        end else if (((~((plain_V_strb_V_0_vld_in == 1'b0) & (plain_V_strb_V_0_ack_out == 1'b1)) & ~((plain_V_strb_V_0_ack_out == 1'b0) & (plain_V_strb_V_0_vld_in == 1'b1)) & (plain_V_strb_V_0_state == 2'd3)) | ((plain_V_strb_V_0_state == 2'd1) & (plain_V_strb_V_0_ack_out == 1'b1)) | ((plain_V_strb_V_0_state == 2'd2) & (plain_V_strb_V_0_vld_in == 1'b1)))) begin
            plain_V_strb_V_0_state <= 2'd3;
        end else begin
            plain_V_strb_V_0_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        plain_V_user_V_0_sel_rd <= 1'b0;
    end else begin
        if (((plain_V_user_V_0_ack_out == 1'b1) & (plain_V_user_V_0_vld_out == 1'b1))) begin
            plain_V_user_V_0_sel_rd <= ~plain_V_user_V_0_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        plain_V_user_V_0_sel_wr <= 1'b0;
    end else begin
        if (((plain_V_user_V_0_ack_in == 1'b1) & (plain_V_user_V_0_vld_in == 1'b1))) begin
            plain_V_user_V_0_sel_wr <= ~plain_V_user_V_0_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        plain_V_user_V_0_state <= 2'd0;
    end else begin
        if ((((plain_V_user_V_0_state == 2'd2) & (plain_V_user_V_0_vld_in == 1'b0)) | ((plain_V_user_V_0_state == 2'd3) & (plain_V_user_V_0_vld_in == 1'b0) & (plain_V_user_V_0_ack_out == 1'b1)))) begin
            plain_V_user_V_0_state <= 2'd2;
        end else if ((((plain_V_user_V_0_state == 2'd1) & (plain_V_user_V_0_ack_out == 1'b0)) | ((plain_V_user_V_0_state == 2'd3) & (plain_V_user_V_0_ack_out == 1'b0) & (plain_V_user_V_0_vld_in == 1'b1)))) begin
            plain_V_user_V_0_state <= 2'd1;
        end else if (((~((plain_V_user_V_0_vld_in == 1'b0) & (plain_V_user_V_0_ack_out == 1'b1)) & ~((plain_V_user_V_0_ack_out == 1'b0) & (plain_V_user_V_0_vld_in == 1'b1)) & (plain_V_user_V_0_state == 2'd3)) | ((plain_V_user_V_0_state == 2'd1) & (plain_V_user_V_0_ack_out == 1'b1)) | ((plain_V_user_V_0_state == 2'd2) & (plain_V_user_V_0_vld_in == 1'b1)))) begin
            plain_V_user_V_0_state <= 2'd3;
        end else begin
            plain_V_user_V_0_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        i_reg_233 <= 32'd0;
    end else if (((encrypt_V_data_V_1_ack_in == 1'b1) & (1'b1 == ap_CS_fsm_state35))) begin
        i_reg_233 <= i_1_reg_565;
    end
end

always @ (posedge ap_clk) begin
    if ((encrypt_V_data_V_1_load_A == 1'b1)) begin
        encrypt_V_data_V_1_payload_A <= encrypt_V_data_V_1_data_in;
    end
end

always @ (posedge ap_clk) begin
    if ((encrypt_V_data_V_1_load_B == 1'b1)) begin
        encrypt_V_data_V_1_payload_B <= encrypt_V_data_V_1_data_in;
    end
end

always @ (posedge ap_clk) begin
    if ((encrypt_V_dest_V_1_load_A == 1'b1)) begin
        encrypt_V_dest_V_1_payload_A <= encrypt_V_dest_V_1_data_in;
    end
end

always @ (posedge ap_clk) begin
    if ((encrypt_V_dest_V_1_load_B == 1'b1)) begin
        encrypt_V_dest_V_1_payload_B <= encrypt_V_dest_V_1_data_in;
    end
end

always @ (posedge ap_clk) begin
    if ((encrypt_V_id_V_1_load_A == 1'b1)) begin
        encrypt_V_id_V_1_payload_A <= encrypt_V_id_V_1_data_in;
    end
end

always @ (posedge ap_clk) begin
    if ((encrypt_V_id_V_1_load_B == 1'b1)) begin
        encrypt_V_id_V_1_payload_B <= encrypt_V_id_V_1_data_in;
    end
end

always @ (posedge ap_clk) begin
    if ((encrypt_V_keep_V_1_load_A == 1'b1)) begin
        encrypt_V_keep_V_1_payload_A <= encrypt_V_keep_V_1_data_in;
    end
end

always @ (posedge ap_clk) begin
    if ((encrypt_V_keep_V_1_load_B == 1'b1)) begin
        encrypt_V_keep_V_1_payload_B <= encrypt_V_keep_V_1_data_in;
    end
end

always @ (posedge ap_clk) begin
    if ((encrypt_V_last_V_1_load_A == 1'b1)) begin
        encrypt_V_last_V_1_payload_A <= encrypt_V_last_V_1_data_in;
    end
end

always @ (posedge ap_clk) begin
    if ((encrypt_V_last_V_1_load_B == 1'b1)) begin
        encrypt_V_last_V_1_payload_B <= encrypt_V_last_V_1_data_in;
    end
end

always @ (posedge ap_clk) begin
    if ((encrypt_V_strb_V_1_load_A == 1'b1)) begin
        encrypt_V_strb_V_1_payload_A <= encrypt_V_strb_V_1_data_in;
    end
end

always @ (posedge ap_clk) begin
    if ((encrypt_V_strb_V_1_load_B == 1'b1)) begin
        encrypt_V_strb_V_1_payload_B <= encrypt_V_strb_V_1_data_in;
    end
end

always @ (posedge ap_clk) begin
    if ((encrypt_V_user_V_1_load_A == 1'b1)) begin
        encrypt_V_user_V_1_payload_A <= encrypt_V_user_V_1_data_in;
    end
end

always @ (posedge ap_clk) begin
    if ((encrypt_V_user_V_1_load_B == 1'b1)) begin
        encrypt_V_user_V_1_payload_B <= encrypt_V_user_V_1_data_in;
    end
end

always @ (posedge ap_clk) begin
    if ((~((encrypt_V_dest_V_1_ack_in == 1'b0) | (encrypt_V_id_V_1_ack_in == 1'b0) | (encrypt_V_last_V_1_ack_in == 1'b0) | (encrypt_V_user_V_1_ack_in == 1'b0) | (encrypt_V_strb_V_1_ack_in == 1'b0) | (encrypt_V_keep_V_1_ack_in == 1'b0) | (encrypt_V_data_V_1_ack_in == 1'b0) | ((tmp_fu_351_p2 == 1'd1) & (plain_V_data_V_0_vld_out == 1'b0))) & (tmp_fu_351_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        i_1_reg_565 <= i_1_fu_356_p2;
        tmp_data_V_16_reg_530 <= plain_V_data_V_0_data_out;
        tmp_dest_V_5_reg_560 <= plain_V_dest_V_0_data_out;
        tmp_id_V_5_reg_555 <= plain_V_id_V_0_data_out;
        tmp_keep_V_5_reg_535 <= plain_V_keep_V_0_data_out;
        tmp_last_V_5_reg_550 <= plain_V_last_V_0_data_out;
        tmp_strb_V_5_reg_540 <= plain_V_strb_V_0_data_out;
        tmp_user_V_5_reg_545 <= plain_V_user_V_0_data_out;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        len_read_reg_426 <= len;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state18) & (grp_Cipher_fu_244_encrypt_0_V_ap_vld == 1'b1))) begin
        out_0_fu_120 <= grp_Cipher_fu_244_encrypt_0_V;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state18) & (grp_Cipher_fu_244_encrypt_10_V_ap_vld == 1'b1))) begin
        out_10_fu_160 <= grp_Cipher_fu_244_encrypt_10_V;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state18) & (grp_Cipher_fu_244_encrypt_11_V_ap_vld == 1'b1))) begin
        out_11_fu_164 <= grp_Cipher_fu_244_encrypt_11_V;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state18) & (grp_Cipher_fu_244_encrypt_12_V_ap_vld == 1'b1))) begin
        out_12_fu_168 <= grp_Cipher_fu_244_encrypt_12_V;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state18) & (grp_Cipher_fu_244_encrypt_13_V_ap_vld == 1'b1))) begin
        out_13_fu_172 <= grp_Cipher_fu_244_encrypt_13_V;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state18) & (grp_Cipher_fu_244_encrypt_14_V_ap_vld == 1'b1))) begin
        out_14_fu_176 <= grp_Cipher_fu_244_encrypt_14_V;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state18) & (grp_Cipher_fu_244_encrypt_15_V_ap_vld == 1'b1))) begin
        out_15_fu_180 <= grp_Cipher_fu_244_encrypt_15_V;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state18) & (grp_Cipher_fu_244_encrypt_1_V_ap_vld == 1'b1))) begin
        out_1_fu_124 <= grp_Cipher_fu_244_encrypt_1_V;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state18) & (grp_Cipher_fu_244_encrypt_2_V_ap_vld == 1'b1))) begin
        out_2_fu_128 <= grp_Cipher_fu_244_encrypt_2_V;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state18) & (grp_Cipher_fu_244_encrypt_3_V_ap_vld == 1'b1))) begin
        out_3_fu_132 <= grp_Cipher_fu_244_encrypt_3_V;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state18) & (grp_Cipher_fu_244_encrypt_4_V_ap_vld == 1'b1))) begin
        out_4_fu_136 <= grp_Cipher_fu_244_encrypt_4_V;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state18) & (grp_Cipher_fu_244_encrypt_5_V_ap_vld == 1'b1))) begin
        out_5_fu_140 <= grp_Cipher_fu_244_encrypt_5_V;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state18) & (grp_Cipher_fu_244_encrypt_6_V_ap_vld == 1'b1))) begin
        out_6_fu_144 <= grp_Cipher_fu_244_encrypt_6_V;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state18) & (grp_Cipher_fu_244_encrypt_7_V_ap_vld == 1'b1))) begin
        out_7_fu_148 <= grp_Cipher_fu_244_encrypt_7_V;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state18) & (grp_Cipher_fu_244_encrypt_8_V_ap_vld == 1'b1))) begin
        out_8_fu_152 <= grp_Cipher_fu_244_encrypt_8_V;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state18) & (grp_Cipher_fu_244_encrypt_9_V_ap_vld == 1'b1))) begin
        out_9_fu_156 <= grp_Cipher_fu_244_encrypt_9_V;
    end
end

always @ (posedge ap_clk) begin
    if ((plain_V_data_V_0_load_A == 1'b1)) begin
        plain_V_data_V_0_payload_A <= plain_TDATA;
    end
end

always @ (posedge ap_clk) begin
    if ((plain_V_data_V_0_load_B == 1'b1)) begin
        plain_V_data_V_0_payload_B <= plain_TDATA;
    end
end

always @ (posedge ap_clk) begin
    if ((plain_V_dest_V_0_load_A == 1'b1)) begin
        plain_V_dest_V_0_payload_A <= plain_TDEST;
    end
end

always @ (posedge ap_clk) begin
    if ((plain_V_dest_V_0_load_B == 1'b1)) begin
        plain_V_dest_V_0_payload_B <= plain_TDEST;
    end
end

always @ (posedge ap_clk) begin
    if ((plain_V_id_V_0_load_A == 1'b1)) begin
        plain_V_id_V_0_payload_A <= plain_TID;
    end
end

always @ (posedge ap_clk) begin
    if ((plain_V_id_V_0_load_B == 1'b1)) begin
        plain_V_id_V_0_payload_B <= plain_TID;
    end
end

always @ (posedge ap_clk) begin
    if ((plain_V_keep_V_0_load_A == 1'b1)) begin
        plain_V_keep_V_0_payload_A <= plain_TKEEP;
    end
end

always @ (posedge ap_clk) begin
    if ((plain_V_keep_V_0_load_B == 1'b1)) begin
        plain_V_keep_V_0_payload_B <= plain_TKEEP;
    end
end

always @ (posedge ap_clk) begin
    if ((plain_V_last_V_0_load_A == 1'b1)) begin
        plain_V_last_V_0_payload_A <= plain_TLAST;
    end
end

always @ (posedge ap_clk) begin
    if ((plain_V_last_V_0_load_B == 1'b1)) begin
        plain_V_last_V_0_payload_B <= plain_TLAST;
    end
end

always @ (posedge ap_clk) begin
    if ((plain_V_strb_V_0_load_A == 1'b1)) begin
        plain_V_strb_V_0_payload_A <= plain_TSTRB;
    end
end

always @ (posedge ap_clk) begin
    if ((plain_V_strb_V_0_load_B == 1'b1)) begin
        plain_V_strb_V_0_payload_B <= plain_TSTRB;
    end
end

always @ (posedge ap_clk) begin
    if ((plain_V_user_V_0_load_A == 1'b1)) begin
        plain_V_user_V_0_payload_A <= plain_TUSER;
    end
end

always @ (posedge ap_clk) begin
    if ((plain_V_user_V_0_load_B == 1'b1)) begin
        plain_V_user_V_0_payload_B <= plain_TUSER;
    end
end

always @ (posedge ap_clk) begin
    if (((plain_V_data_V_0_vld_out == 1'b1) & (1'b1 == ap_CS_fsm_state3))) begin
        tmp_data_V_17_reg_570 <= plain_V_data_V_0_data_out;
        tmp_dest_V_6_reg_600 <= plain_V_dest_V_0_data_out;
        tmp_id_V_6_reg_595 <= plain_V_id_V_0_data_out;
        tmp_keep_V_6_reg_575 <= plain_V_keep_V_0_data_out;
        tmp_last_V_6_reg_590 <= plain_V_last_V_0_data_out;
        tmp_strb_V_6_reg_580 <= plain_V_strb_V_0_data_out;
        tmp_user_V_6_reg_585 <= plain_V_user_V_0_data_out;
    end
end

always @ (posedge ap_clk) begin
    if (((plain_V_data_V_0_vld_out == 1'b1) & (1'b1 == ap_CS_fsm_state4))) begin
        tmp_data_V_18_reg_605 <= plain_V_data_V_0_data_out;
        tmp_dest_V_7_reg_635 <= plain_V_dest_V_0_data_out;
        tmp_id_V_7_reg_630 <= plain_V_id_V_0_data_out;
        tmp_keep_V_7_reg_610 <= plain_V_keep_V_0_data_out;
        tmp_last_V_7_reg_625 <= plain_V_last_V_0_data_out;
        tmp_strb_V_7_reg_615 <= plain_V_strb_V_0_data_out;
        tmp_user_V_7_reg_620 <= plain_V_user_V_0_data_out;
    end
end

always @ (posedge ap_clk) begin
    if (((plain_V_data_V_0_vld_out == 1'b1) & (1'b1 == ap_CS_fsm_state5))) begin
        tmp_data_V_19_reg_640 <= plain_V_data_V_0_data_out;
        tmp_dest_V_8_reg_670 <= plain_V_dest_V_0_data_out;
        tmp_id_V_8_reg_665 <= plain_V_id_V_0_data_out;
        tmp_keep_V_8_reg_645 <= plain_V_keep_V_0_data_out;
        tmp_last_V_8_reg_660 <= plain_V_last_V_0_data_out;
        tmp_strb_V_8_reg_650 <= plain_V_strb_V_0_data_out;
        tmp_user_V_8_reg_655 <= plain_V_user_V_0_data_out;
    end
end

always @ (posedge ap_clk) begin
    if (((plain_V_data_V_0_vld_out == 1'b1) & (1'b1 == ap_CS_fsm_state6))) begin
        tmp_data_V_20_reg_675 <= plain_V_data_V_0_data_out;
        tmp_dest_V_9_reg_705 <= plain_V_dest_V_0_data_out;
        tmp_id_V_9_reg_700 <= plain_V_id_V_0_data_out;
        tmp_keep_V_9_reg_680 <= plain_V_keep_V_0_data_out;
        tmp_last_V_9_reg_695 <= plain_V_last_V_0_data_out;
        tmp_strb_V_9_reg_685 <= plain_V_strb_V_0_data_out;
        tmp_user_V_9_reg_690 <= plain_V_user_V_0_data_out;
    end
end

always @ (posedge ap_clk) begin
    if (((plain_V_data_V_0_vld_out == 1'b1) & (1'b1 == ap_CS_fsm_state7))) begin
        tmp_data_V_21_reg_710 <= plain_V_data_V_0_data_out;
        tmp_dest_V_10_reg_740 <= plain_V_dest_V_0_data_out;
        tmp_id_V_10_reg_735 <= plain_V_id_V_0_data_out;
        tmp_keep_V_10_reg_715 <= plain_V_keep_V_0_data_out;
        tmp_last_V_10_reg_730 <= plain_V_last_V_0_data_out;
        tmp_strb_V_10_reg_720 <= plain_V_strb_V_0_data_out;
        tmp_user_V_10_reg_725 <= plain_V_user_V_0_data_out;
    end
end

always @ (posedge ap_clk) begin
    if (((plain_V_data_V_0_vld_out == 1'b1) & (1'b1 == ap_CS_fsm_state8))) begin
        tmp_data_V_22_reg_745 <= plain_V_data_V_0_data_out;
        tmp_dest_V_11_reg_775 <= plain_V_dest_V_0_data_out;
        tmp_id_V_11_reg_770 <= plain_V_id_V_0_data_out;
        tmp_keep_V_11_reg_750 <= plain_V_keep_V_0_data_out;
        tmp_last_V_11_reg_765 <= plain_V_last_V_0_data_out;
        tmp_strb_V_11_reg_755 <= plain_V_strb_V_0_data_out;
        tmp_user_V_11_reg_760 <= plain_V_user_V_0_data_out;
    end
end

always @ (posedge ap_clk) begin
    if (((plain_V_data_V_0_vld_out == 1'b1) & (1'b1 == ap_CS_fsm_state9))) begin
        tmp_data_V_23_reg_780 <= plain_V_data_V_0_data_out;
        tmp_dest_V_12_reg_810 <= plain_V_dest_V_0_data_out;
        tmp_id_V_12_reg_805 <= plain_V_id_V_0_data_out;
        tmp_keep_V_12_reg_785 <= plain_V_keep_V_0_data_out;
        tmp_last_V_12_reg_800 <= plain_V_last_V_0_data_out;
        tmp_strb_V_12_reg_790 <= plain_V_strb_V_0_data_out;
        tmp_user_V_12_reg_795 <= plain_V_user_V_0_data_out;
    end
end

always @ (posedge ap_clk) begin
    if (((plain_V_data_V_0_vld_out == 1'b1) & (1'b1 == ap_CS_fsm_state10))) begin
        tmp_data_V_24_reg_815 <= plain_V_data_V_0_data_out;
        tmp_dest_V_13_reg_845 <= plain_V_dest_V_0_data_out;
        tmp_id_V_13_reg_840 <= plain_V_id_V_0_data_out;
        tmp_keep_V_13_reg_820 <= plain_V_keep_V_0_data_out;
        tmp_last_V_13_reg_835 <= plain_V_last_V_0_data_out;
        tmp_strb_V_13_reg_825 <= plain_V_strb_V_0_data_out;
        tmp_user_V_13_reg_830 <= plain_V_user_V_0_data_out;
    end
end

always @ (posedge ap_clk) begin
    if (((plain_V_data_V_0_vld_out == 1'b1) & (1'b1 == ap_CS_fsm_state11))) begin
        tmp_data_V_25_reg_850 <= plain_V_data_V_0_data_out;
        tmp_dest_V_14_reg_880 <= plain_V_dest_V_0_data_out;
        tmp_id_V_14_reg_875 <= plain_V_id_V_0_data_out;
        tmp_keep_V_14_reg_855 <= plain_V_keep_V_0_data_out;
        tmp_last_V_14_reg_870 <= plain_V_last_V_0_data_out;
        tmp_strb_V_14_reg_860 <= plain_V_strb_V_0_data_out;
        tmp_user_V_14_reg_865 <= plain_V_user_V_0_data_out;
    end
end

always @ (posedge ap_clk) begin
    if (((plain_V_data_V_0_vld_out == 1'b1) & (1'b1 == ap_CS_fsm_state12))) begin
        tmp_data_V_26_reg_885 <= plain_V_data_V_0_data_out;
        tmp_dest_V_15_reg_915 <= plain_V_dest_V_0_data_out;
        tmp_id_V_15_reg_910 <= plain_V_id_V_0_data_out;
        tmp_keep_V_15_reg_890 <= plain_V_keep_V_0_data_out;
        tmp_last_V_15_reg_905 <= plain_V_last_V_0_data_out;
        tmp_strb_V_15_reg_895 <= plain_V_strb_V_0_data_out;
        tmp_user_V_15_reg_900 <= plain_V_user_V_0_data_out;
    end
end

always @ (posedge ap_clk) begin
    if (((plain_V_data_V_0_vld_out == 1'b1) & (1'b1 == ap_CS_fsm_state13))) begin
        tmp_data_V_27_reg_920 <= plain_V_data_V_0_data_out;
        tmp_dest_V_reg_950 <= plain_V_dest_V_0_data_out;
        tmp_id_V_reg_945 <= plain_V_id_V_0_data_out;
        tmp_keep_V_reg_925 <= plain_V_keep_V_0_data_out;
        tmp_last_V_reg_940 <= plain_V_last_V_0_data_out;
        tmp_strb_V_reg_930 <= plain_V_strb_V_0_data_out;
        tmp_user_V_reg_935 <= plain_V_user_V_0_data_out;
    end
end

always @ (posedge ap_clk) begin
    if (((plain_V_data_V_0_vld_out == 1'b1) & (1'b1 == ap_CS_fsm_state14))) begin
        tmp_data_V_28_reg_955 <= plain_V_data_V_0_data_out;
        tmp_dest_V_1_reg_985 <= plain_V_dest_V_0_data_out;
        tmp_id_V_1_reg_980 <= plain_V_id_V_0_data_out;
        tmp_keep_V_1_reg_960 <= plain_V_keep_V_0_data_out;
        tmp_last_V_1_reg_975 <= plain_V_last_V_0_data_out;
        tmp_strb_V_1_reg_965 <= plain_V_strb_V_0_data_out;
        tmp_user_V_1_reg_970 <= plain_V_user_V_0_data_out;
    end
end

always @ (posedge ap_clk) begin
    if (((plain_V_data_V_0_vld_out == 1'b1) & (1'b1 == ap_CS_fsm_state15))) begin
        tmp_data_V_29_reg_990 <= plain_V_data_V_0_data_out;
        tmp_dest_V_2_reg_1020 <= plain_V_dest_V_0_data_out;
        tmp_id_V_2_reg_1015 <= plain_V_id_V_0_data_out;
        tmp_keep_V_2_reg_995 <= plain_V_keep_V_0_data_out;
        tmp_last_V_2_reg_1010 <= plain_V_last_V_0_data_out;
        tmp_strb_V_2_reg_1000 <= plain_V_strb_V_0_data_out;
        tmp_user_V_2_reg_1005 <= plain_V_user_V_0_data_out;
    end
end

always @ (posedge ap_clk) begin
    if (((plain_V_data_V_0_vld_out == 1'b1) & (1'b1 == ap_CS_fsm_state16))) begin
        tmp_data_V_30_reg_1025 <= plain_V_data_V_0_data_out;
        tmp_dest_V_3_reg_1055 <= plain_V_dest_V_0_data_out;
        tmp_id_V_3_reg_1050 <= plain_V_id_V_0_data_out;
        tmp_keep_V_3_reg_1030 <= plain_V_keep_V_0_data_out;
        tmp_last_V_3_reg_1045 <= plain_V_last_V_0_data_out;
        tmp_strb_V_3_reg_1035 <= plain_V_strb_V_0_data_out;
        tmp_user_V_3_reg_1040 <= plain_V_user_V_0_data_out;
    end
end

always @ (posedge ap_clk) begin
    if (((plain_V_data_V_0_vld_out == 1'b1) & (1'b1 == ap_CS_fsm_state17))) begin
        tmp_data_V_31_reg_1060 <= plain_V_data_V_0_data_out;
        tmp_dest_V_4_reg_1090 <= plain_V_dest_V_0_data_out;
        tmp_id_V_4_reg_1085 <= plain_V_id_V_0_data_out;
        tmp_keep_V_4_reg_1065 <= plain_V_keep_V_0_data_out;
        tmp_last_V_4_reg_1080 <= plain_V_last_V_0_data_out;
        tmp_strb_V_4_reg_1070 <= plain_V_strb_V_0_data_out;
        tmp_user_V_4_reg_1075 <= plain_V_user_V_0_data_out;
    end
end

always @ (*) begin
    if ((~((encrypt_V_dest_V_1_ack_in == 1'b0) | (encrypt_V_id_V_1_ack_in == 1'b0) | (encrypt_V_last_V_1_ack_in == 1'b0) | (encrypt_V_user_V_1_ack_in == 1'b0) | (encrypt_V_strb_V_1_ack_in == 1'b0) | (encrypt_V_keep_V_1_ack_in == 1'b0) | (encrypt_V_data_V_1_ack_in == 1'b0) | ((tmp_fu_351_p2 == 1'd1) & (plain_V_data_V_0_vld_out == 1'b0))) & (tmp_fu_351_p2 == 1'd0) & (encrypt_V_dest_V_1_state[1'd0] == 1'b0) & (encrypt_V_id_V_1_state[1'd0] == 1'b0) & (encrypt_V_last_V_1_state[1'd0] == 1'b0) & (encrypt_V_user_V_1_state[1'd0] == 1'b0) & (encrypt_V_strb_V_1_state[1'd0] == 1'b0) & (encrypt_V_keep_V_1_state[1'd0] == 1'b0) & (encrypt_V_data_V_1_state[1'd0] == 1'b0) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if ((~((encrypt_V_dest_V_1_ack_in == 1'b0) | (encrypt_V_id_V_1_ack_in == 1'b0) | (encrypt_V_last_V_1_ack_in == 1'b0) | (encrypt_V_user_V_1_ack_in == 1'b0) | (encrypt_V_strb_V_1_ack_in == 1'b0) | (encrypt_V_keep_V_1_ack_in == 1'b0) | (encrypt_V_data_V_1_ack_in == 1'b0) | ((tmp_fu_351_p2 == 1'd1) & (plain_V_data_V_0_vld_out == 1'b0))) & (tmp_fu_351_p2 == 1'd0) & (encrypt_V_dest_V_1_state[1'd0] == 1'b0) & (encrypt_V_id_V_1_state[1'd0] == 1'b0) & (encrypt_V_last_V_1_state[1'd0] == 1'b0) & (encrypt_V_user_V_1_state[1'd0] == 1'b0) & (encrypt_V_strb_V_1_state[1'd0] == 1'b0) & (encrypt_V_keep_V_1_state[1'd0] == 1'b0) & (encrypt_V_data_V_1_state[1'd0] == 1'b0) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state35) | (1'b1 == ap_CS_fsm_state34) | (1'b1 == ap_CS_fsm_state33) | (1'b1 == ap_CS_fsm_state32) | (1'b1 == ap_CS_fsm_state31) | (1'b1 == ap_CS_fsm_state30) | (1'b1 == ap_CS_fsm_state29) | (1'b1 == ap_CS_fsm_state28) | (1'b1 == ap_CS_fsm_state27) | (1'b1 == ap_CS_fsm_state26) | (1'b1 == ap_CS_fsm_state25) | (1'b1 == ap_CS_fsm_state24) | (1'b1 == ap_CS_fsm_state23) | (1'b1 == ap_CS_fsm_state22) | (1'b1 == ap_CS_fsm_state21) | (1'b1 == ap_CS_fsm_state20) | (1'b1 == ap_CS_fsm_state19))) begin
        encrypt_TDATA_blk_n = encrypt_V_data_V_1_state[1'd1];
    end else begin
        encrypt_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state34)) begin
        encrypt_V_data_V_1_data_in = out_15_fu_180;
    end else if ((1'b1 == ap_CS_fsm_state33)) begin
        encrypt_V_data_V_1_data_in = out_14_fu_176;
    end else if ((1'b1 == ap_CS_fsm_state32)) begin
        encrypt_V_data_V_1_data_in = out_13_fu_172;
    end else if ((1'b1 == ap_CS_fsm_state31)) begin
        encrypt_V_data_V_1_data_in = out_12_fu_168;
    end else if ((1'b1 == ap_CS_fsm_state30)) begin
        encrypt_V_data_V_1_data_in = out_11_fu_164;
    end else if ((1'b1 == ap_CS_fsm_state29)) begin
        encrypt_V_data_V_1_data_in = out_10_fu_160;
    end else if ((1'b1 == ap_CS_fsm_state28)) begin
        encrypt_V_data_V_1_data_in = out_9_fu_156;
    end else if ((1'b1 == ap_CS_fsm_state27)) begin
        encrypt_V_data_V_1_data_in = out_8_fu_152;
    end else if ((1'b1 == ap_CS_fsm_state26)) begin
        encrypt_V_data_V_1_data_in = out_7_fu_148;
    end else if ((1'b1 == ap_CS_fsm_state25)) begin
        encrypt_V_data_V_1_data_in = out_6_fu_144;
    end else if ((1'b1 == ap_CS_fsm_state24)) begin
        encrypt_V_data_V_1_data_in = out_5_fu_140;
    end else if ((1'b1 == ap_CS_fsm_state23)) begin
        encrypt_V_data_V_1_data_in = out_4_fu_136;
    end else if ((1'b1 == ap_CS_fsm_state22)) begin
        encrypt_V_data_V_1_data_in = out_3_fu_132;
    end else if ((1'b1 == ap_CS_fsm_state21)) begin
        encrypt_V_data_V_1_data_in = out_2_fu_128;
    end else if ((1'b1 == ap_CS_fsm_state20)) begin
        encrypt_V_data_V_1_data_in = out_1_fu_124;
    end else if ((1'b1 == ap_CS_fsm_state19)) begin
        encrypt_V_data_V_1_data_in = out_0_fu_120;
    end else begin
        encrypt_V_data_V_1_data_in = 'bx;
    end
end

always @ (*) begin
    if ((encrypt_V_data_V_1_sel == 1'b1)) begin
        encrypt_V_data_V_1_data_out = encrypt_V_data_V_1_payload_B;
    end else begin
        encrypt_V_data_V_1_data_out = encrypt_V_data_V_1_payload_A;
    end
end

always @ (*) begin
    if ((((encrypt_V_data_V_1_ack_in == 1'b1) & (1'b1 == ap_CS_fsm_state34)) | ((encrypt_V_data_V_1_ack_in == 1'b1) & (1'b1 == ap_CS_fsm_state33)) | ((encrypt_V_data_V_1_ack_in == 1'b1) & (1'b1 == ap_CS_fsm_state32)) | ((encrypt_V_data_V_1_ack_in == 1'b1) & (1'b1 == ap_CS_fsm_state31)) | ((encrypt_V_data_V_1_ack_in == 1'b1) & (1'b1 == ap_CS_fsm_state30)) | ((encrypt_V_data_V_1_ack_in == 1'b1) & (1'b1 == ap_CS_fsm_state29)) | ((encrypt_V_data_V_1_ack_in == 1'b1) & (1'b1 == ap_CS_fsm_state28)) | ((encrypt_V_data_V_1_ack_in == 1'b1) & (1'b1 == ap_CS_fsm_state27)) | ((encrypt_V_data_V_1_ack_in == 1'b1) & (1'b1 == ap_CS_fsm_state26)) | ((encrypt_V_data_V_1_ack_in == 1'b1) & (1'b1 == ap_CS_fsm_state25)) | ((encrypt_V_data_V_1_ack_in == 1'b1) & (1'b1 == ap_CS_fsm_state24)) | ((encrypt_V_data_V_1_ack_in == 1'b1) & (1'b1 == ap_CS_fsm_state23)) | ((encrypt_V_data_V_1_ack_in == 1'b1) & (1'b1 == ap_CS_fsm_state22)) | ((encrypt_V_data_V_1_ack_in == 1'b1) & (1'b1 == ap_CS_fsm_state21)) | ((encrypt_V_data_V_1_ack_in == 1'b1) & (1'b1 == ap_CS_fsm_state20)) | ((encrypt_V_data_V_1_ack_in == 1'b1) & (1'b1 == ap_CS_fsm_state19)))) begin
        encrypt_V_data_V_1_vld_in = 1'b1;
    end else begin
        encrypt_V_data_V_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state34)) begin
        encrypt_V_dest_V_1_data_in = tmp_dest_V_4_reg_1090;
    end else if ((1'b1 == ap_CS_fsm_state33)) begin
        encrypt_V_dest_V_1_data_in = tmp_dest_V_3_reg_1055;
    end else if ((1'b1 == ap_CS_fsm_state32)) begin
        encrypt_V_dest_V_1_data_in = tmp_dest_V_2_reg_1020;
    end else if ((1'b1 == ap_CS_fsm_state31)) begin
        encrypt_V_dest_V_1_data_in = tmp_dest_V_1_reg_985;
    end else if ((1'b1 == ap_CS_fsm_state30)) begin
        encrypt_V_dest_V_1_data_in = tmp_dest_V_reg_950;
    end else if ((1'b1 == ap_CS_fsm_state29)) begin
        encrypt_V_dest_V_1_data_in = tmp_dest_V_15_reg_915;
    end else if ((1'b1 == ap_CS_fsm_state28)) begin
        encrypt_V_dest_V_1_data_in = tmp_dest_V_14_reg_880;
    end else if ((1'b1 == ap_CS_fsm_state27)) begin
        encrypt_V_dest_V_1_data_in = tmp_dest_V_13_reg_845;
    end else if ((1'b1 == ap_CS_fsm_state26)) begin
        encrypt_V_dest_V_1_data_in = tmp_dest_V_12_reg_810;
    end else if ((1'b1 == ap_CS_fsm_state25)) begin
        encrypt_V_dest_V_1_data_in = tmp_dest_V_11_reg_775;
    end else if ((1'b1 == ap_CS_fsm_state24)) begin
        encrypt_V_dest_V_1_data_in = tmp_dest_V_10_reg_740;
    end else if ((1'b1 == ap_CS_fsm_state23)) begin
        encrypt_V_dest_V_1_data_in = tmp_dest_V_9_reg_705;
    end else if ((1'b1 == ap_CS_fsm_state22)) begin
        encrypt_V_dest_V_1_data_in = tmp_dest_V_8_reg_670;
    end else if ((1'b1 == ap_CS_fsm_state21)) begin
        encrypt_V_dest_V_1_data_in = tmp_dest_V_7_reg_635;
    end else if ((1'b1 == ap_CS_fsm_state20)) begin
        encrypt_V_dest_V_1_data_in = tmp_dest_V_6_reg_600;
    end else if ((1'b1 == ap_CS_fsm_state19)) begin
        encrypt_V_dest_V_1_data_in = tmp_dest_V_5_reg_560;
    end else begin
        encrypt_V_dest_V_1_data_in = 'bx;
    end
end

always @ (*) begin
    if ((encrypt_V_dest_V_1_sel == 1'b1)) begin
        encrypt_V_dest_V_1_data_out = encrypt_V_dest_V_1_payload_B;
    end else begin
        encrypt_V_dest_V_1_data_out = encrypt_V_dest_V_1_payload_A;
    end
end

always @ (*) begin
    if ((((encrypt_V_data_V_1_ack_in == 1'b1) & (1'b1 == ap_CS_fsm_state34)) | ((encrypt_V_data_V_1_ack_in == 1'b1) & (1'b1 == ap_CS_fsm_state33)) | ((encrypt_V_data_V_1_ack_in == 1'b1) & (1'b1 == ap_CS_fsm_state32)) | ((encrypt_V_data_V_1_ack_in == 1'b1) & (1'b1 == ap_CS_fsm_state31)) | ((encrypt_V_data_V_1_ack_in == 1'b1) & (1'b1 == ap_CS_fsm_state30)) | ((encrypt_V_data_V_1_ack_in == 1'b1) & (1'b1 == ap_CS_fsm_state29)) | ((encrypt_V_data_V_1_ack_in == 1'b1) & (1'b1 == ap_CS_fsm_state28)) | ((encrypt_V_data_V_1_ack_in == 1'b1) & (1'b1 == ap_CS_fsm_state27)) | ((encrypt_V_data_V_1_ack_in == 1'b1) & (1'b1 == ap_CS_fsm_state26)) | ((encrypt_V_data_V_1_ack_in == 1'b1) & (1'b1 == ap_CS_fsm_state25)) | ((encrypt_V_data_V_1_ack_in == 1'b1) & (1'b1 == ap_CS_fsm_state24)) | ((encrypt_V_data_V_1_ack_in == 1'b1) & (1'b1 == ap_CS_fsm_state23)) | ((encrypt_V_data_V_1_ack_in == 1'b1) & (1'b1 == ap_CS_fsm_state22)) | ((encrypt_V_data_V_1_ack_in == 1'b1) & (1'b1 == ap_CS_fsm_state21)) | ((encrypt_V_data_V_1_ack_in == 1'b1) & (1'b1 == ap_CS_fsm_state20)) | ((encrypt_V_data_V_1_ack_in == 1'b1) & (1'b1 == ap_CS_fsm_state19)))) begin
        encrypt_V_dest_V_1_vld_in = 1'b1;
    end else begin
        encrypt_V_dest_V_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state34)) begin
        encrypt_V_id_V_1_data_in = tmp_id_V_4_reg_1085;
    end else if ((1'b1 == ap_CS_fsm_state33)) begin
        encrypt_V_id_V_1_data_in = tmp_id_V_3_reg_1050;
    end else if ((1'b1 == ap_CS_fsm_state32)) begin
        encrypt_V_id_V_1_data_in = tmp_id_V_2_reg_1015;
    end else if ((1'b1 == ap_CS_fsm_state31)) begin
        encrypt_V_id_V_1_data_in = tmp_id_V_1_reg_980;
    end else if ((1'b1 == ap_CS_fsm_state30)) begin
        encrypt_V_id_V_1_data_in = tmp_id_V_reg_945;
    end else if ((1'b1 == ap_CS_fsm_state29)) begin
        encrypt_V_id_V_1_data_in = tmp_id_V_15_reg_910;
    end else if ((1'b1 == ap_CS_fsm_state28)) begin
        encrypt_V_id_V_1_data_in = tmp_id_V_14_reg_875;
    end else if ((1'b1 == ap_CS_fsm_state27)) begin
        encrypt_V_id_V_1_data_in = tmp_id_V_13_reg_840;
    end else if ((1'b1 == ap_CS_fsm_state26)) begin
        encrypt_V_id_V_1_data_in = tmp_id_V_12_reg_805;
    end else if ((1'b1 == ap_CS_fsm_state25)) begin
        encrypt_V_id_V_1_data_in = tmp_id_V_11_reg_770;
    end else if ((1'b1 == ap_CS_fsm_state24)) begin
        encrypt_V_id_V_1_data_in = tmp_id_V_10_reg_735;
    end else if ((1'b1 == ap_CS_fsm_state23)) begin
        encrypt_V_id_V_1_data_in = tmp_id_V_9_reg_700;
    end else if ((1'b1 == ap_CS_fsm_state22)) begin
        encrypt_V_id_V_1_data_in = tmp_id_V_8_reg_665;
    end else if ((1'b1 == ap_CS_fsm_state21)) begin
        encrypt_V_id_V_1_data_in = tmp_id_V_7_reg_630;
    end else if ((1'b1 == ap_CS_fsm_state20)) begin
        encrypt_V_id_V_1_data_in = tmp_id_V_6_reg_595;
    end else if ((1'b1 == ap_CS_fsm_state19)) begin
        encrypt_V_id_V_1_data_in = tmp_id_V_5_reg_555;
    end else begin
        encrypt_V_id_V_1_data_in = 'bx;
    end
end

always @ (*) begin
    if ((encrypt_V_id_V_1_sel == 1'b1)) begin
        encrypt_V_id_V_1_data_out = encrypt_V_id_V_1_payload_B;
    end else begin
        encrypt_V_id_V_1_data_out = encrypt_V_id_V_1_payload_A;
    end
end

always @ (*) begin
    if ((((encrypt_V_data_V_1_ack_in == 1'b1) & (1'b1 == ap_CS_fsm_state34)) | ((encrypt_V_data_V_1_ack_in == 1'b1) & (1'b1 == ap_CS_fsm_state33)) | ((encrypt_V_data_V_1_ack_in == 1'b1) & (1'b1 == ap_CS_fsm_state32)) | ((encrypt_V_data_V_1_ack_in == 1'b1) & (1'b1 == ap_CS_fsm_state31)) | ((encrypt_V_data_V_1_ack_in == 1'b1) & (1'b1 == ap_CS_fsm_state30)) | ((encrypt_V_data_V_1_ack_in == 1'b1) & (1'b1 == ap_CS_fsm_state29)) | ((encrypt_V_data_V_1_ack_in == 1'b1) & (1'b1 == ap_CS_fsm_state28)) | ((encrypt_V_data_V_1_ack_in == 1'b1) & (1'b1 == ap_CS_fsm_state27)) | ((encrypt_V_data_V_1_ack_in == 1'b1) & (1'b1 == ap_CS_fsm_state26)) | ((encrypt_V_data_V_1_ack_in == 1'b1) & (1'b1 == ap_CS_fsm_state25)) | ((encrypt_V_data_V_1_ack_in == 1'b1) & (1'b1 == ap_CS_fsm_state24)) | ((encrypt_V_data_V_1_ack_in == 1'b1) & (1'b1 == ap_CS_fsm_state23)) | ((encrypt_V_data_V_1_ack_in == 1'b1) & (1'b1 == ap_CS_fsm_state22)) | ((encrypt_V_data_V_1_ack_in == 1'b1) & (1'b1 == ap_CS_fsm_state21)) | ((encrypt_V_data_V_1_ack_in == 1'b1) & (1'b1 == ap_CS_fsm_state20)) | ((encrypt_V_data_V_1_ack_in == 1'b1) & (1'b1 == ap_CS_fsm_state19)))) begin
        encrypt_V_id_V_1_vld_in = 1'b1;
    end else begin
        encrypt_V_id_V_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state34)) begin
        encrypt_V_keep_V_1_data_in = tmp_keep_V_4_reg_1065;
    end else if ((1'b1 == ap_CS_fsm_state33)) begin
        encrypt_V_keep_V_1_data_in = tmp_keep_V_3_reg_1030;
    end else if ((1'b1 == ap_CS_fsm_state32)) begin
        encrypt_V_keep_V_1_data_in = tmp_keep_V_2_reg_995;
    end else if ((1'b1 == ap_CS_fsm_state31)) begin
        encrypt_V_keep_V_1_data_in = tmp_keep_V_1_reg_960;
    end else if ((1'b1 == ap_CS_fsm_state30)) begin
        encrypt_V_keep_V_1_data_in = tmp_keep_V_reg_925;
    end else if ((1'b1 == ap_CS_fsm_state29)) begin
        encrypt_V_keep_V_1_data_in = tmp_keep_V_15_reg_890;
    end else if ((1'b1 == ap_CS_fsm_state28)) begin
        encrypt_V_keep_V_1_data_in = tmp_keep_V_14_reg_855;
    end else if ((1'b1 == ap_CS_fsm_state27)) begin
        encrypt_V_keep_V_1_data_in = tmp_keep_V_13_reg_820;
    end else if ((1'b1 == ap_CS_fsm_state26)) begin
        encrypt_V_keep_V_1_data_in = tmp_keep_V_12_reg_785;
    end else if ((1'b1 == ap_CS_fsm_state25)) begin
        encrypt_V_keep_V_1_data_in = tmp_keep_V_11_reg_750;
    end else if ((1'b1 == ap_CS_fsm_state24)) begin
        encrypt_V_keep_V_1_data_in = tmp_keep_V_10_reg_715;
    end else if ((1'b1 == ap_CS_fsm_state23)) begin
        encrypt_V_keep_V_1_data_in = tmp_keep_V_9_reg_680;
    end else if ((1'b1 == ap_CS_fsm_state22)) begin
        encrypt_V_keep_V_1_data_in = tmp_keep_V_8_reg_645;
    end else if ((1'b1 == ap_CS_fsm_state21)) begin
        encrypt_V_keep_V_1_data_in = tmp_keep_V_7_reg_610;
    end else if ((1'b1 == ap_CS_fsm_state20)) begin
        encrypt_V_keep_V_1_data_in = tmp_keep_V_6_reg_575;
    end else if ((1'b1 == ap_CS_fsm_state19)) begin
        encrypt_V_keep_V_1_data_in = tmp_keep_V_5_reg_535;
    end else begin
        encrypt_V_keep_V_1_data_in = 'bx;
    end
end

always @ (*) begin
    if ((encrypt_V_keep_V_1_sel == 1'b1)) begin
        encrypt_V_keep_V_1_data_out = encrypt_V_keep_V_1_payload_B;
    end else begin
        encrypt_V_keep_V_1_data_out = encrypt_V_keep_V_1_payload_A;
    end
end

always @ (*) begin
    if ((((encrypt_V_data_V_1_ack_in == 1'b1) & (1'b1 == ap_CS_fsm_state34)) | ((encrypt_V_data_V_1_ack_in == 1'b1) & (1'b1 == ap_CS_fsm_state33)) | ((encrypt_V_data_V_1_ack_in == 1'b1) & (1'b1 == ap_CS_fsm_state32)) | ((encrypt_V_data_V_1_ack_in == 1'b1) & (1'b1 == ap_CS_fsm_state31)) | ((encrypt_V_data_V_1_ack_in == 1'b1) & (1'b1 == ap_CS_fsm_state30)) | ((encrypt_V_data_V_1_ack_in == 1'b1) & (1'b1 == ap_CS_fsm_state29)) | ((encrypt_V_data_V_1_ack_in == 1'b1) & (1'b1 == ap_CS_fsm_state28)) | ((encrypt_V_data_V_1_ack_in == 1'b1) & (1'b1 == ap_CS_fsm_state27)) | ((encrypt_V_data_V_1_ack_in == 1'b1) & (1'b1 == ap_CS_fsm_state26)) | ((encrypt_V_data_V_1_ack_in == 1'b1) & (1'b1 == ap_CS_fsm_state25)) | ((encrypt_V_data_V_1_ack_in == 1'b1) & (1'b1 == ap_CS_fsm_state24)) | ((encrypt_V_data_V_1_ack_in == 1'b1) & (1'b1 == ap_CS_fsm_state23)) | ((encrypt_V_data_V_1_ack_in == 1'b1) & (1'b1 == ap_CS_fsm_state22)) | ((encrypt_V_data_V_1_ack_in == 1'b1) & (1'b1 == ap_CS_fsm_state21)) | ((encrypt_V_data_V_1_ack_in == 1'b1) & (1'b1 == ap_CS_fsm_state20)) | ((encrypt_V_data_V_1_ack_in == 1'b1) & (1'b1 == ap_CS_fsm_state19)))) begin
        encrypt_V_keep_V_1_vld_in = 1'b1;
    end else begin
        encrypt_V_keep_V_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state34)) begin
        encrypt_V_last_V_1_data_in = tmp_last_V_4_reg_1080;
    end else if ((1'b1 == ap_CS_fsm_state33)) begin
        encrypt_V_last_V_1_data_in = tmp_last_V_3_reg_1045;
    end else if ((1'b1 == ap_CS_fsm_state32)) begin
        encrypt_V_last_V_1_data_in = tmp_last_V_2_reg_1010;
    end else if ((1'b1 == ap_CS_fsm_state31)) begin
        encrypt_V_last_V_1_data_in = tmp_last_V_1_reg_975;
    end else if ((1'b1 == ap_CS_fsm_state30)) begin
        encrypt_V_last_V_1_data_in = tmp_last_V_reg_940;
    end else if ((1'b1 == ap_CS_fsm_state29)) begin
        encrypt_V_last_V_1_data_in = tmp_last_V_15_reg_905;
    end else if ((1'b1 == ap_CS_fsm_state28)) begin
        encrypt_V_last_V_1_data_in = tmp_last_V_14_reg_870;
    end else if ((1'b1 == ap_CS_fsm_state27)) begin
        encrypt_V_last_V_1_data_in = tmp_last_V_13_reg_835;
    end else if ((1'b1 == ap_CS_fsm_state26)) begin
        encrypt_V_last_V_1_data_in = tmp_last_V_12_reg_800;
    end else if ((1'b1 == ap_CS_fsm_state25)) begin
        encrypt_V_last_V_1_data_in = tmp_last_V_11_reg_765;
    end else if ((1'b1 == ap_CS_fsm_state24)) begin
        encrypt_V_last_V_1_data_in = tmp_last_V_10_reg_730;
    end else if ((1'b1 == ap_CS_fsm_state23)) begin
        encrypt_V_last_V_1_data_in = tmp_last_V_9_reg_695;
    end else if ((1'b1 == ap_CS_fsm_state22)) begin
        encrypt_V_last_V_1_data_in = tmp_last_V_8_reg_660;
    end else if ((1'b1 == ap_CS_fsm_state21)) begin
        encrypt_V_last_V_1_data_in = tmp_last_V_7_reg_625;
    end else if ((1'b1 == ap_CS_fsm_state20)) begin
        encrypt_V_last_V_1_data_in = tmp_last_V_6_reg_590;
    end else if ((1'b1 == ap_CS_fsm_state19)) begin
        encrypt_V_last_V_1_data_in = tmp_last_V_5_reg_550;
    end else begin
        encrypt_V_last_V_1_data_in = 'bx;
    end
end

always @ (*) begin
    if ((encrypt_V_last_V_1_sel == 1'b1)) begin
        encrypt_V_last_V_1_data_out = encrypt_V_last_V_1_payload_B;
    end else begin
        encrypt_V_last_V_1_data_out = encrypt_V_last_V_1_payload_A;
    end
end

always @ (*) begin
    if ((((encrypt_V_data_V_1_ack_in == 1'b1) & (1'b1 == ap_CS_fsm_state34)) | ((encrypt_V_data_V_1_ack_in == 1'b1) & (1'b1 == ap_CS_fsm_state33)) | ((encrypt_V_data_V_1_ack_in == 1'b1) & (1'b1 == ap_CS_fsm_state32)) | ((encrypt_V_data_V_1_ack_in == 1'b1) & (1'b1 == ap_CS_fsm_state31)) | ((encrypt_V_data_V_1_ack_in == 1'b1) & (1'b1 == ap_CS_fsm_state30)) | ((encrypt_V_data_V_1_ack_in == 1'b1) & (1'b1 == ap_CS_fsm_state29)) | ((encrypt_V_data_V_1_ack_in == 1'b1) & (1'b1 == ap_CS_fsm_state28)) | ((encrypt_V_data_V_1_ack_in == 1'b1) & (1'b1 == ap_CS_fsm_state27)) | ((encrypt_V_data_V_1_ack_in == 1'b1) & (1'b1 == ap_CS_fsm_state26)) | ((encrypt_V_data_V_1_ack_in == 1'b1) & (1'b1 == ap_CS_fsm_state25)) | ((encrypt_V_data_V_1_ack_in == 1'b1) & (1'b1 == ap_CS_fsm_state24)) | ((encrypt_V_data_V_1_ack_in == 1'b1) & (1'b1 == ap_CS_fsm_state23)) | ((encrypt_V_data_V_1_ack_in == 1'b1) & (1'b1 == ap_CS_fsm_state22)) | ((encrypt_V_data_V_1_ack_in == 1'b1) & (1'b1 == ap_CS_fsm_state21)) | ((encrypt_V_data_V_1_ack_in == 1'b1) & (1'b1 == ap_CS_fsm_state20)) | ((encrypt_V_data_V_1_ack_in == 1'b1) & (1'b1 == ap_CS_fsm_state19)))) begin
        encrypt_V_last_V_1_vld_in = 1'b1;
    end else begin
        encrypt_V_last_V_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state34)) begin
        encrypt_V_strb_V_1_data_in = tmp_strb_V_4_reg_1070;
    end else if ((1'b1 == ap_CS_fsm_state33)) begin
        encrypt_V_strb_V_1_data_in = tmp_strb_V_3_reg_1035;
    end else if ((1'b1 == ap_CS_fsm_state32)) begin
        encrypt_V_strb_V_1_data_in = tmp_strb_V_2_reg_1000;
    end else if ((1'b1 == ap_CS_fsm_state31)) begin
        encrypt_V_strb_V_1_data_in = tmp_strb_V_1_reg_965;
    end else if ((1'b1 == ap_CS_fsm_state30)) begin
        encrypt_V_strb_V_1_data_in = tmp_strb_V_reg_930;
    end else if ((1'b1 == ap_CS_fsm_state29)) begin
        encrypt_V_strb_V_1_data_in = tmp_strb_V_15_reg_895;
    end else if ((1'b1 == ap_CS_fsm_state28)) begin
        encrypt_V_strb_V_1_data_in = tmp_strb_V_14_reg_860;
    end else if ((1'b1 == ap_CS_fsm_state27)) begin
        encrypt_V_strb_V_1_data_in = tmp_strb_V_13_reg_825;
    end else if ((1'b1 == ap_CS_fsm_state26)) begin
        encrypt_V_strb_V_1_data_in = tmp_strb_V_12_reg_790;
    end else if ((1'b1 == ap_CS_fsm_state25)) begin
        encrypt_V_strb_V_1_data_in = tmp_strb_V_11_reg_755;
    end else if ((1'b1 == ap_CS_fsm_state24)) begin
        encrypt_V_strb_V_1_data_in = tmp_strb_V_10_reg_720;
    end else if ((1'b1 == ap_CS_fsm_state23)) begin
        encrypt_V_strb_V_1_data_in = tmp_strb_V_9_reg_685;
    end else if ((1'b1 == ap_CS_fsm_state22)) begin
        encrypt_V_strb_V_1_data_in = tmp_strb_V_8_reg_650;
    end else if ((1'b1 == ap_CS_fsm_state21)) begin
        encrypt_V_strb_V_1_data_in = tmp_strb_V_7_reg_615;
    end else if ((1'b1 == ap_CS_fsm_state20)) begin
        encrypt_V_strb_V_1_data_in = tmp_strb_V_6_reg_580;
    end else if ((1'b1 == ap_CS_fsm_state19)) begin
        encrypt_V_strb_V_1_data_in = tmp_strb_V_5_reg_540;
    end else begin
        encrypt_V_strb_V_1_data_in = 'bx;
    end
end

always @ (*) begin
    if ((encrypt_V_strb_V_1_sel == 1'b1)) begin
        encrypt_V_strb_V_1_data_out = encrypt_V_strb_V_1_payload_B;
    end else begin
        encrypt_V_strb_V_1_data_out = encrypt_V_strb_V_1_payload_A;
    end
end

always @ (*) begin
    if ((((encrypt_V_data_V_1_ack_in == 1'b1) & (1'b1 == ap_CS_fsm_state34)) | ((encrypt_V_data_V_1_ack_in == 1'b1) & (1'b1 == ap_CS_fsm_state33)) | ((encrypt_V_data_V_1_ack_in == 1'b1) & (1'b1 == ap_CS_fsm_state32)) | ((encrypt_V_data_V_1_ack_in == 1'b1) & (1'b1 == ap_CS_fsm_state31)) | ((encrypt_V_data_V_1_ack_in == 1'b1) & (1'b1 == ap_CS_fsm_state30)) | ((encrypt_V_data_V_1_ack_in == 1'b1) & (1'b1 == ap_CS_fsm_state29)) | ((encrypt_V_data_V_1_ack_in == 1'b1) & (1'b1 == ap_CS_fsm_state28)) | ((encrypt_V_data_V_1_ack_in == 1'b1) & (1'b1 == ap_CS_fsm_state27)) | ((encrypt_V_data_V_1_ack_in == 1'b1) & (1'b1 == ap_CS_fsm_state26)) | ((encrypt_V_data_V_1_ack_in == 1'b1) & (1'b1 == ap_CS_fsm_state25)) | ((encrypt_V_data_V_1_ack_in == 1'b1) & (1'b1 == ap_CS_fsm_state24)) | ((encrypt_V_data_V_1_ack_in == 1'b1) & (1'b1 == ap_CS_fsm_state23)) | ((encrypt_V_data_V_1_ack_in == 1'b1) & (1'b1 == ap_CS_fsm_state22)) | ((encrypt_V_data_V_1_ack_in == 1'b1) & (1'b1 == ap_CS_fsm_state21)) | ((encrypt_V_data_V_1_ack_in == 1'b1) & (1'b1 == ap_CS_fsm_state20)) | ((encrypt_V_data_V_1_ack_in == 1'b1) & (1'b1 == ap_CS_fsm_state19)))) begin
        encrypt_V_strb_V_1_vld_in = 1'b1;
    end else begin
        encrypt_V_strb_V_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state34)) begin
        encrypt_V_user_V_1_data_in = tmp_user_V_4_reg_1075;
    end else if ((1'b1 == ap_CS_fsm_state33)) begin
        encrypt_V_user_V_1_data_in = tmp_user_V_3_reg_1040;
    end else if ((1'b1 == ap_CS_fsm_state32)) begin
        encrypt_V_user_V_1_data_in = tmp_user_V_2_reg_1005;
    end else if ((1'b1 == ap_CS_fsm_state31)) begin
        encrypt_V_user_V_1_data_in = tmp_user_V_1_reg_970;
    end else if ((1'b1 == ap_CS_fsm_state30)) begin
        encrypt_V_user_V_1_data_in = tmp_user_V_reg_935;
    end else if ((1'b1 == ap_CS_fsm_state29)) begin
        encrypt_V_user_V_1_data_in = tmp_user_V_15_reg_900;
    end else if ((1'b1 == ap_CS_fsm_state28)) begin
        encrypt_V_user_V_1_data_in = tmp_user_V_14_reg_865;
    end else if ((1'b1 == ap_CS_fsm_state27)) begin
        encrypt_V_user_V_1_data_in = tmp_user_V_13_reg_830;
    end else if ((1'b1 == ap_CS_fsm_state26)) begin
        encrypt_V_user_V_1_data_in = tmp_user_V_12_reg_795;
    end else if ((1'b1 == ap_CS_fsm_state25)) begin
        encrypt_V_user_V_1_data_in = tmp_user_V_11_reg_760;
    end else if ((1'b1 == ap_CS_fsm_state24)) begin
        encrypt_V_user_V_1_data_in = tmp_user_V_10_reg_725;
    end else if ((1'b1 == ap_CS_fsm_state23)) begin
        encrypt_V_user_V_1_data_in = tmp_user_V_9_reg_690;
    end else if ((1'b1 == ap_CS_fsm_state22)) begin
        encrypt_V_user_V_1_data_in = tmp_user_V_8_reg_655;
    end else if ((1'b1 == ap_CS_fsm_state21)) begin
        encrypt_V_user_V_1_data_in = tmp_user_V_7_reg_620;
    end else if ((1'b1 == ap_CS_fsm_state20)) begin
        encrypt_V_user_V_1_data_in = tmp_user_V_6_reg_585;
    end else if ((1'b1 == ap_CS_fsm_state19)) begin
        encrypt_V_user_V_1_data_in = tmp_user_V_5_reg_545;
    end else begin
        encrypt_V_user_V_1_data_in = 'bx;
    end
end

always @ (*) begin
    if ((encrypt_V_user_V_1_sel == 1'b1)) begin
        encrypt_V_user_V_1_data_out = encrypt_V_user_V_1_payload_B;
    end else begin
        encrypt_V_user_V_1_data_out = encrypt_V_user_V_1_payload_A;
    end
end

always @ (*) begin
    if ((((encrypt_V_data_V_1_ack_in == 1'b1) & (1'b1 == ap_CS_fsm_state34)) | ((encrypt_V_data_V_1_ack_in == 1'b1) & (1'b1 == ap_CS_fsm_state33)) | ((encrypt_V_data_V_1_ack_in == 1'b1) & (1'b1 == ap_CS_fsm_state32)) | ((encrypt_V_data_V_1_ack_in == 1'b1) & (1'b1 == ap_CS_fsm_state31)) | ((encrypt_V_data_V_1_ack_in == 1'b1) & (1'b1 == ap_CS_fsm_state30)) | ((encrypt_V_data_V_1_ack_in == 1'b1) & (1'b1 == ap_CS_fsm_state29)) | ((encrypt_V_data_V_1_ack_in == 1'b1) & (1'b1 == ap_CS_fsm_state28)) | ((encrypt_V_data_V_1_ack_in == 1'b1) & (1'b1 == ap_CS_fsm_state27)) | ((encrypt_V_data_V_1_ack_in == 1'b1) & (1'b1 == ap_CS_fsm_state26)) | ((encrypt_V_data_V_1_ack_in == 1'b1) & (1'b1 == ap_CS_fsm_state25)) | ((encrypt_V_data_V_1_ack_in == 1'b1) & (1'b1 == ap_CS_fsm_state24)) | ((encrypt_V_data_V_1_ack_in == 1'b1) & (1'b1 == ap_CS_fsm_state23)) | ((encrypt_V_data_V_1_ack_in == 1'b1) & (1'b1 == ap_CS_fsm_state22)) | ((encrypt_V_data_V_1_ack_in == 1'b1) & (1'b1 == ap_CS_fsm_state21)) | ((encrypt_V_data_V_1_ack_in == 1'b1) & (1'b1 == ap_CS_fsm_state20)) | ((encrypt_V_data_V_1_ack_in == 1'b1) & (1'b1 == ap_CS_fsm_state19)))) begin
        encrypt_V_user_V_1_vld_in = 1'b1;
    end else begin
        encrypt_V_user_V_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state18) & (1'b0 == ap_block_state18_on_subcall_done))) begin
        grp_Cipher_fu_244_ap_continue = 1'b1;
    end else begin
        grp_Cipher_fu_244_ap_continue = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state13) | (1'b1 == ap_CS_fsm_state12) | (1'b1 == ap_CS_fsm_state11) | (1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state9) | (1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state17) | (1'b1 == ap_CS_fsm_state16) | (1'b1 == ap_CS_fsm_state15) | (1'b1 == ap_CS_fsm_state14) | ((tmp_fu_351_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2)))) begin
        plain_TDATA_blk_n = plain_V_data_V_0_state[1'd0];
    end else begin
        plain_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((((plain_V_data_V_0_vld_out == 1'b1) & (1'b1 == ap_CS_fsm_state13)) | ((plain_V_data_V_0_vld_out == 1'b1) & (1'b1 == ap_CS_fsm_state12)) | ((plain_V_data_V_0_vld_out == 1'b1) & (1'b1 == ap_CS_fsm_state11)) | ((plain_V_data_V_0_vld_out == 1'b1) & (1'b1 == ap_CS_fsm_state10)) | ((plain_V_data_V_0_vld_out == 1'b1) & (1'b1 == ap_CS_fsm_state9)) | ((plain_V_data_V_0_vld_out == 1'b1) & (1'b1 == ap_CS_fsm_state8)) | ((plain_V_data_V_0_vld_out == 1'b1) & (1'b1 == ap_CS_fsm_state7)) | ((plain_V_data_V_0_vld_out == 1'b1) & (1'b1 == ap_CS_fsm_state6)) | ((plain_V_data_V_0_vld_out == 1'b1) & (1'b1 == ap_CS_fsm_state5)) | ((plain_V_data_V_0_vld_out == 1'b1) & (1'b1 == ap_CS_fsm_state4)) | ((plain_V_data_V_0_vld_out == 1'b1) & (1'b1 == ap_CS_fsm_state3)) | (~((encrypt_V_dest_V_1_ack_in == 1'b0) | (encrypt_V_id_V_1_ack_in == 1'b0) | (encrypt_V_last_V_1_ack_in == 1'b0) | (encrypt_V_user_V_1_ack_in == 1'b0) | (encrypt_V_strb_V_1_ack_in == 1'b0) | (encrypt_V_keep_V_1_ack_in == 1'b0) | (encrypt_V_data_V_1_ack_in == 1'b0) | ((tmp_fu_351_p2 == 1'd1) & (plain_V_data_V_0_vld_out == 1'b0))) & (tmp_fu_351_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2)) | ((plain_V_data_V_0_vld_out == 1'b1) & (1'b1 == ap_CS_fsm_state17)) | ((plain_V_data_V_0_vld_out == 1'b1) & (1'b1 == ap_CS_fsm_state16)) | ((plain_V_data_V_0_vld_out == 1'b1) & (1'b1 == ap_CS_fsm_state15)) | ((plain_V_data_V_0_vld_out == 1'b1) & (1'b1 == ap_CS_fsm_state14)))) begin
        plain_V_data_V_0_ack_out = 1'b1;
    end else begin
        plain_V_data_V_0_ack_out = 1'b0;
    end
end

always @ (*) begin
    if ((plain_V_data_V_0_sel == 1'b1)) begin
        plain_V_data_V_0_data_out = plain_V_data_V_0_payload_B;
    end else begin
        plain_V_data_V_0_data_out = plain_V_data_V_0_payload_A;
    end
end

always @ (*) begin
    if ((((plain_V_data_V_0_vld_out == 1'b1) & (1'b1 == ap_CS_fsm_state13)) | ((plain_V_data_V_0_vld_out == 1'b1) & (1'b1 == ap_CS_fsm_state12)) | ((plain_V_data_V_0_vld_out == 1'b1) & (1'b1 == ap_CS_fsm_state11)) | ((plain_V_data_V_0_vld_out == 1'b1) & (1'b1 == ap_CS_fsm_state10)) | ((plain_V_data_V_0_vld_out == 1'b1) & (1'b1 == ap_CS_fsm_state9)) | ((plain_V_data_V_0_vld_out == 1'b1) & (1'b1 == ap_CS_fsm_state8)) | ((plain_V_data_V_0_vld_out == 1'b1) & (1'b1 == ap_CS_fsm_state7)) | ((plain_V_data_V_0_vld_out == 1'b1) & (1'b1 == ap_CS_fsm_state6)) | ((plain_V_data_V_0_vld_out == 1'b1) & (1'b1 == ap_CS_fsm_state5)) | ((plain_V_data_V_0_vld_out == 1'b1) & (1'b1 == ap_CS_fsm_state4)) | ((plain_V_data_V_0_vld_out == 1'b1) & (1'b1 == ap_CS_fsm_state3)) | (~((encrypt_V_dest_V_1_ack_in == 1'b0) | (encrypt_V_id_V_1_ack_in == 1'b0) | (encrypt_V_last_V_1_ack_in == 1'b0) | (encrypt_V_user_V_1_ack_in == 1'b0) | (encrypt_V_strb_V_1_ack_in == 1'b0) | (encrypt_V_keep_V_1_ack_in == 1'b0) | (encrypt_V_data_V_1_ack_in == 1'b0) | ((tmp_fu_351_p2 == 1'd1) & (plain_V_data_V_0_vld_out == 1'b0))) & (tmp_fu_351_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2)) | ((plain_V_data_V_0_vld_out == 1'b1) & (1'b1 == ap_CS_fsm_state17)) | ((plain_V_data_V_0_vld_out == 1'b1) & (1'b1 == ap_CS_fsm_state16)) | ((plain_V_data_V_0_vld_out == 1'b1) & (1'b1 == ap_CS_fsm_state15)) | ((plain_V_data_V_0_vld_out == 1'b1) & (1'b1 == ap_CS_fsm_state14)))) begin
        plain_V_dest_V_0_ack_out = 1'b1;
    end else begin
        plain_V_dest_V_0_ack_out = 1'b0;
    end
end

always @ (*) begin
    if ((plain_V_dest_V_0_sel == 1'b1)) begin
        plain_V_dest_V_0_data_out = plain_V_dest_V_0_payload_B;
    end else begin
        plain_V_dest_V_0_data_out = plain_V_dest_V_0_payload_A;
    end
end

always @ (*) begin
    if ((((plain_V_data_V_0_vld_out == 1'b1) & (1'b1 == ap_CS_fsm_state13)) | ((plain_V_data_V_0_vld_out == 1'b1) & (1'b1 == ap_CS_fsm_state12)) | ((plain_V_data_V_0_vld_out == 1'b1) & (1'b1 == ap_CS_fsm_state11)) | ((plain_V_data_V_0_vld_out == 1'b1) & (1'b1 == ap_CS_fsm_state10)) | ((plain_V_data_V_0_vld_out == 1'b1) & (1'b1 == ap_CS_fsm_state9)) | ((plain_V_data_V_0_vld_out == 1'b1) & (1'b1 == ap_CS_fsm_state8)) | ((plain_V_data_V_0_vld_out == 1'b1) & (1'b1 == ap_CS_fsm_state7)) | ((plain_V_data_V_0_vld_out == 1'b1) & (1'b1 == ap_CS_fsm_state6)) | ((plain_V_data_V_0_vld_out == 1'b1) & (1'b1 == ap_CS_fsm_state5)) | ((plain_V_data_V_0_vld_out == 1'b1) & (1'b1 == ap_CS_fsm_state4)) | ((plain_V_data_V_0_vld_out == 1'b1) & (1'b1 == ap_CS_fsm_state3)) | (~((encrypt_V_dest_V_1_ack_in == 1'b0) | (encrypt_V_id_V_1_ack_in == 1'b0) | (encrypt_V_last_V_1_ack_in == 1'b0) | (encrypt_V_user_V_1_ack_in == 1'b0) | (encrypt_V_strb_V_1_ack_in == 1'b0) | (encrypt_V_keep_V_1_ack_in == 1'b0) | (encrypt_V_data_V_1_ack_in == 1'b0) | ((tmp_fu_351_p2 == 1'd1) & (plain_V_data_V_0_vld_out == 1'b0))) & (tmp_fu_351_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2)) | ((plain_V_data_V_0_vld_out == 1'b1) & (1'b1 == ap_CS_fsm_state17)) | ((plain_V_data_V_0_vld_out == 1'b1) & (1'b1 == ap_CS_fsm_state16)) | ((plain_V_data_V_0_vld_out == 1'b1) & (1'b1 == ap_CS_fsm_state15)) | ((plain_V_data_V_0_vld_out == 1'b1) & (1'b1 == ap_CS_fsm_state14)))) begin
        plain_V_id_V_0_ack_out = 1'b1;
    end else begin
        plain_V_id_V_0_ack_out = 1'b0;
    end
end

always @ (*) begin
    if ((plain_V_id_V_0_sel == 1'b1)) begin
        plain_V_id_V_0_data_out = plain_V_id_V_0_payload_B;
    end else begin
        plain_V_id_V_0_data_out = plain_V_id_V_0_payload_A;
    end
end

always @ (*) begin
    if ((((plain_V_data_V_0_vld_out == 1'b1) & (1'b1 == ap_CS_fsm_state13)) | ((plain_V_data_V_0_vld_out == 1'b1) & (1'b1 == ap_CS_fsm_state12)) | ((plain_V_data_V_0_vld_out == 1'b1) & (1'b1 == ap_CS_fsm_state11)) | ((plain_V_data_V_0_vld_out == 1'b1) & (1'b1 == ap_CS_fsm_state10)) | ((plain_V_data_V_0_vld_out == 1'b1) & (1'b1 == ap_CS_fsm_state9)) | ((plain_V_data_V_0_vld_out == 1'b1) & (1'b1 == ap_CS_fsm_state8)) | ((plain_V_data_V_0_vld_out == 1'b1) & (1'b1 == ap_CS_fsm_state7)) | ((plain_V_data_V_0_vld_out == 1'b1) & (1'b1 == ap_CS_fsm_state6)) | ((plain_V_data_V_0_vld_out == 1'b1) & (1'b1 == ap_CS_fsm_state5)) | ((plain_V_data_V_0_vld_out == 1'b1) & (1'b1 == ap_CS_fsm_state4)) | ((plain_V_data_V_0_vld_out == 1'b1) & (1'b1 == ap_CS_fsm_state3)) | (~((encrypt_V_dest_V_1_ack_in == 1'b0) | (encrypt_V_id_V_1_ack_in == 1'b0) | (encrypt_V_last_V_1_ack_in == 1'b0) | (encrypt_V_user_V_1_ack_in == 1'b0) | (encrypt_V_strb_V_1_ack_in == 1'b0) | (encrypt_V_keep_V_1_ack_in == 1'b0) | (encrypt_V_data_V_1_ack_in == 1'b0) | ((tmp_fu_351_p2 == 1'd1) & (plain_V_data_V_0_vld_out == 1'b0))) & (tmp_fu_351_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2)) | ((plain_V_data_V_0_vld_out == 1'b1) & (1'b1 == ap_CS_fsm_state17)) | ((plain_V_data_V_0_vld_out == 1'b1) & (1'b1 == ap_CS_fsm_state16)) | ((plain_V_data_V_0_vld_out == 1'b1) & (1'b1 == ap_CS_fsm_state15)) | ((plain_V_data_V_0_vld_out == 1'b1) & (1'b1 == ap_CS_fsm_state14)))) begin
        plain_V_keep_V_0_ack_out = 1'b1;
    end else begin
        plain_V_keep_V_0_ack_out = 1'b0;
    end
end

always @ (*) begin
    if ((plain_V_keep_V_0_sel == 1'b1)) begin
        plain_V_keep_V_0_data_out = plain_V_keep_V_0_payload_B;
    end else begin
        plain_V_keep_V_0_data_out = plain_V_keep_V_0_payload_A;
    end
end

always @ (*) begin
    if ((((plain_V_data_V_0_vld_out == 1'b1) & (1'b1 == ap_CS_fsm_state13)) | ((plain_V_data_V_0_vld_out == 1'b1) & (1'b1 == ap_CS_fsm_state12)) | ((plain_V_data_V_0_vld_out == 1'b1) & (1'b1 == ap_CS_fsm_state11)) | ((plain_V_data_V_0_vld_out == 1'b1) & (1'b1 == ap_CS_fsm_state10)) | ((plain_V_data_V_0_vld_out == 1'b1) & (1'b1 == ap_CS_fsm_state9)) | ((plain_V_data_V_0_vld_out == 1'b1) & (1'b1 == ap_CS_fsm_state8)) | ((plain_V_data_V_0_vld_out == 1'b1) & (1'b1 == ap_CS_fsm_state7)) | ((plain_V_data_V_0_vld_out == 1'b1) & (1'b1 == ap_CS_fsm_state6)) | ((plain_V_data_V_0_vld_out == 1'b1) & (1'b1 == ap_CS_fsm_state5)) | ((plain_V_data_V_0_vld_out == 1'b1) & (1'b1 == ap_CS_fsm_state4)) | ((plain_V_data_V_0_vld_out == 1'b1) & (1'b1 == ap_CS_fsm_state3)) | (~((encrypt_V_dest_V_1_ack_in == 1'b0) | (encrypt_V_id_V_1_ack_in == 1'b0) | (encrypt_V_last_V_1_ack_in == 1'b0) | (encrypt_V_user_V_1_ack_in == 1'b0) | (encrypt_V_strb_V_1_ack_in == 1'b0) | (encrypt_V_keep_V_1_ack_in == 1'b0) | (encrypt_V_data_V_1_ack_in == 1'b0) | ((tmp_fu_351_p2 == 1'd1) & (plain_V_data_V_0_vld_out == 1'b0))) & (tmp_fu_351_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2)) | ((plain_V_data_V_0_vld_out == 1'b1) & (1'b1 == ap_CS_fsm_state17)) | ((plain_V_data_V_0_vld_out == 1'b1) & (1'b1 == ap_CS_fsm_state16)) | ((plain_V_data_V_0_vld_out == 1'b1) & (1'b1 == ap_CS_fsm_state15)) | ((plain_V_data_V_0_vld_out == 1'b1) & (1'b1 == ap_CS_fsm_state14)))) begin
        plain_V_last_V_0_ack_out = 1'b1;
    end else begin
        plain_V_last_V_0_ack_out = 1'b0;
    end
end

always @ (*) begin
    if ((plain_V_last_V_0_sel == 1'b1)) begin
        plain_V_last_V_0_data_out = plain_V_last_V_0_payload_B;
    end else begin
        plain_V_last_V_0_data_out = plain_V_last_V_0_payload_A;
    end
end

always @ (*) begin
    if ((((plain_V_data_V_0_vld_out == 1'b1) & (1'b1 == ap_CS_fsm_state13)) | ((plain_V_data_V_0_vld_out == 1'b1) & (1'b1 == ap_CS_fsm_state12)) | ((plain_V_data_V_0_vld_out == 1'b1) & (1'b1 == ap_CS_fsm_state11)) | ((plain_V_data_V_0_vld_out == 1'b1) & (1'b1 == ap_CS_fsm_state10)) | ((plain_V_data_V_0_vld_out == 1'b1) & (1'b1 == ap_CS_fsm_state9)) | ((plain_V_data_V_0_vld_out == 1'b1) & (1'b1 == ap_CS_fsm_state8)) | ((plain_V_data_V_0_vld_out == 1'b1) & (1'b1 == ap_CS_fsm_state7)) | ((plain_V_data_V_0_vld_out == 1'b1) & (1'b1 == ap_CS_fsm_state6)) | ((plain_V_data_V_0_vld_out == 1'b1) & (1'b1 == ap_CS_fsm_state5)) | ((plain_V_data_V_0_vld_out == 1'b1) & (1'b1 == ap_CS_fsm_state4)) | ((plain_V_data_V_0_vld_out == 1'b1) & (1'b1 == ap_CS_fsm_state3)) | (~((encrypt_V_dest_V_1_ack_in == 1'b0) | (encrypt_V_id_V_1_ack_in == 1'b0) | (encrypt_V_last_V_1_ack_in == 1'b0) | (encrypt_V_user_V_1_ack_in == 1'b0) | (encrypt_V_strb_V_1_ack_in == 1'b0) | (encrypt_V_keep_V_1_ack_in == 1'b0) | (encrypt_V_data_V_1_ack_in == 1'b0) | ((tmp_fu_351_p2 == 1'd1) & (plain_V_data_V_0_vld_out == 1'b0))) & (tmp_fu_351_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2)) | ((plain_V_data_V_0_vld_out == 1'b1) & (1'b1 == ap_CS_fsm_state17)) | ((plain_V_data_V_0_vld_out == 1'b1) & (1'b1 == ap_CS_fsm_state16)) | ((plain_V_data_V_0_vld_out == 1'b1) & (1'b1 == ap_CS_fsm_state15)) | ((plain_V_data_V_0_vld_out == 1'b1) & (1'b1 == ap_CS_fsm_state14)))) begin
        plain_V_strb_V_0_ack_out = 1'b1;
    end else begin
        plain_V_strb_V_0_ack_out = 1'b0;
    end
end

always @ (*) begin
    if ((plain_V_strb_V_0_sel == 1'b1)) begin
        plain_V_strb_V_0_data_out = plain_V_strb_V_0_payload_B;
    end else begin
        plain_V_strb_V_0_data_out = plain_V_strb_V_0_payload_A;
    end
end

always @ (*) begin
    if ((((plain_V_data_V_0_vld_out == 1'b1) & (1'b1 == ap_CS_fsm_state13)) | ((plain_V_data_V_0_vld_out == 1'b1) & (1'b1 == ap_CS_fsm_state12)) | ((plain_V_data_V_0_vld_out == 1'b1) & (1'b1 == ap_CS_fsm_state11)) | ((plain_V_data_V_0_vld_out == 1'b1) & (1'b1 == ap_CS_fsm_state10)) | ((plain_V_data_V_0_vld_out == 1'b1) & (1'b1 == ap_CS_fsm_state9)) | ((plain_V_data_V_0_vld_out == 1'b1) & (1'b1 == ap_CS_fsm_state8)) | ((plain_V_data_V_0_vld_out == 1'b1) & (1'b1 == ap_CS_fsm_state7)) | ((plain_V_data_V_0_vld_out == 1'b1) & (1'b1 == ap_CS_fsm_state6)) | ((plain_V_data_V_0_vld_out == 1'b1) & (1'b1 == ap_CS_fsm_state5)) | ((plain_V_data_V_0_vld_out == 1'b1) & (1'b1 == ap_CS_fsm_state4)) | ((plain_V_data_V_0_vld_out == 1'b1) & (1'b1 == ap_CS_fsm_state3)) | (~((encrypt_V_dest_V_1_ack_in == 1'b0) | (encrypt_V_id_V_1_ack_in == 1'b0) | (encrypt_V_last_V_1_ack_in == 1'b0) | (encrypt_V_user_V_1_ack_in == 1'b0) | (encrypt_V_strb_V_1_ack_in == 1'b0) | (encrypt_V_keep_V_1_ack_in == 1'b0) | (encrypt_V_data_V_1_ack_in == 1'b0) | ((tmp_fu_351_p2 == 1'd1) & (plain_V_data_V_0_vld_out == 1'b0))) & (tmp_fu_351_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2)) | ((plain_V_data_V_0_vld_out == 1'b1) & (1'b1 == ap_CS_fsm_state17)) | ((plain_V_data_V_0_vld_out == 1'b1) & (1'b1 == ap_CS_fsm_state16)) | ((plain_V_data_V_0_vld_out == 1'b1) & (1'b1 == ap_CS_fsm_state15)) | ((plain_V_data_V_0_vld_out == 1'b1) & (1'b1 == ap_CS_fsm_state14)))) begin
        plain_V_user_V_0_ack_out = 1'b1;
    end else begin
        plain_V_user_V_0_ack_out = 1'b0;
    end
end

always @ (*) begin
    if ((plain_V_user_V_0_sel == 1'b1)) begin
        plain_V_user_V_0_data_out = plain_V_user_V_0_payload_B;
    end else begin
        plain_V_user_V_0_data_out = plain_V_user_V_0_payload_A;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if ((~((encrypt_V_dest_V_1_ack_in == 1'b0) | (encrypt_V_id_V_1_ack_in == 1'b0) | (encrypt_V_last_V_1_ack_in == 1'b0) | (encrypt_V_user_V_1_ack_in == 1'b0) | (encrypt_V_strb_V_1_ack_in == 1'b0) | (encrypt_V_keep_V_1_ack_in == 1'b0) | (encrypt_V_data_V_1_ack_in == 1'b0) | ((tmp_fu_351_p2 == 1'd1) & (plain_V_data_V_0_vld_out == 1'b0))) & (tmp_fu_351_p2 == 1'd0) & (encrypt_V_dest_V_1_state[1'd0] == 1'b0) & (encrypt_V_id_V_1_state[1'd0] == 1'b0) & (encrypt_V_last_V_1_state[1'd0] == 1'b0) & (encrypt_V_user_V_1_state[1'd0] == 1'b0) & (encrypt_V_strb_V_1_state[1'd0] == 1'b0) & (encrypt_V_keep_V_1_state[1'd0] == 1'b0) & (encrypt_V_data_V_1_state[1'd0] == 1'b0) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else if ((~((encrypt_V_dest_V_1_ack_in == 1'b0) | (encrypt_V_id_V_1_ack_in == 1'b0) | (encrypt_V_last_V_1_ack_in == 1'b0) | (encrypt_V_user_V_1_ack_in == 1'b0) | (encrypt_V_strb_V_1_ack_in == 1'b0) | (encrypt_V_keep_V_1_ack_in == 1'b0) | (encrypt_V_data_V_1_ack_in == 1'b0) | ((tmp_fu_351_p2 == 1'd1) & (plain_V_data_V_0_vld_out == 1'b0))) & (tmp_fu_351_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end
        end
        ap_ST_fsm_state3 : begin
            if (((plain_V_data_V_0_vld_out == 1'b1) & (1'b1 == ap_CS_fsm_state3))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state4 : begin
            if (((plain_V_data_V_0_vld_out == 1'b1) & (1'b1 == ap_CS_fsm_state4))) begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state5 : begin
            if (((plain_V_data_V_0_vld_out == 1'b1) & (1'b1 == ap_CS_fsm_state5))) begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end
        end
        ap_ST_fsm_state6 : begin
            if (((plain_V_data_V_0_vld_out == 1'b1) & (1'b1 == ap_CS_fsm_state6))) begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end
        end
        ap_ST_fsm_state7 : begin
            if (((plain_V_data_V_0_vld_out == 1'b1) & (1'b1 == ap_CS_fsm_state7))) begin
                ap_NS_fsm = ap_ST_fsm_state8;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end
        end
        ap_ST_fsm_state8 : begin
            if (((plain_V_data_V_0_vld_out == 1'b1) & (1'b1 == ap_CS_fsm_state8))) begin
                ap_NS_fsm = ap_ST_fsm_state9;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state8;
            end
        end
        ap_ST_fsm_state9 : begin
            if (((plain_V_data_V_0_vld_out == 1'b1) & (1'b1 == ap_CS_fsm_state9))) begin
                ap_NS_fsm = ap_ST_fsm_state10;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state9;
            end
        end
        ap_ST_fsm_state10 : begin
            if (((plain_V_data_V_0_vld_out == 1'b1) & (1'b1 == ap_CS_fsm_state10))) begin
                ap_NS_fsm = ap_ST_fsm_state11;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state10;
            end
        end
        ap_ST_fsm_state11 : begin
            if (((plain_V_data_V_0_vld_out == 1'b1) & (1'b1 == ap_CS_fsm_state11))) begin
                ap_NS_fsm = ap_ST_fsm_state12;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state11;
            end
        end
        ap_ST_fsm_state12 : begin
            if (((plain_V_data_V_0_vld_out == 1'b1) & (1'b1 == ap_CS_fsm_state12))) begin
                ap_NS_fsm = ap_ST_fsm_state13;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state12;
            end
        end
        ap_ST_fsm_state13 : begin
            if (((plain_V_data_V_0_vld_out == 1'b1) & (1'b1 == ap_CS_fsm_state13))) begin
                ap_NS_fsm = ap_ST_fsm_state14;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state13;
            end
        end
        ap_ST_fsm_state14 : begin
            if (((plain_V_data_V_0_vld_out == 1'b1) & (1'b1 == ap_CS_fsm_state14))) begin
                ap_NS_fsm = ap_ST_fsm_state15;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state14;
            end
        end
        ap_ST_fsm_state15 : begin
            if (((plain_V_data_V_0_vld_out == 1'b1) & (1'b1 == ap_CS_fsm_state15))) begin
                ap_NS_fsm = ap_ST_fsm_state16;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state15;
            end
        end
        ap_ST_fsm_state16 : begin
            if (((plain_V_data_V_0_vld_out == 1'b1) & (1'b1 == ap_CS_fsm_state16))) begin
                ap_NS_fsm = ap_ST_fsm_state17;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state16;
            end
        end
        ap_ST_fsm_state17 : begin
            if (((plain_V_data_V_0_vld_out == 1'b1) & (1'b1 == ap_CS_fsm_state17))) begin
                ap_NS_fsm = ap_ST_fsm_state18;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state17;
            end
        end
        ap_ST_fsm_state18 : begin
            if (((1'b1 == ap_CS_fsm_state18) & (1'b0 == ap_block_state18_on_subcall_done))) begin
                ap_NS_fsm = ap_ST_fsm_state19;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state18;
            end
        end
        ap_ST_fsm_state19 : begin
            if (((encrypt_V_data_V_1_ack_in == 1'b1) & (1'b1 == ap_CS_fsm_state19))) begin
                ap_NS_fsm = ap_ST_fsm_state20;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state19;
            end
        end
        ap_ST_fsm_state20 : begin
            if (((encrypt_V_data_V_1_ack_in == 1'b1) & (1'b1 == ap_CS_fsm_state20))) begin
                ap_NS_fsm = ap_ST_fsm_state21;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state20;
            end
        end
        ap_ST_fsm_state21 : begin
            if (((encrypt_V_data_V_1_ack_in == 1'b1) & (1'b1 == ap_CS_fsm_state21))) begin
                ap_NS_fsm = ap_ST_fsm_state22;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state21;
            end
        end
        ap_ST_fsm_state22 : begin
            if (((encrypt_V_data_V_1_ack_in == 1'b1) & (1'b1 == ap_CS_fsm_state22))) begin
                ap_NS_fsm = ap_ST_fsm_state23;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state22;
            end
        end
        ap_ST_fsm_state23 : begin
            if (((encrypt_V_data_V_1_ack_in == 1'b1) & (1'b1 == ap_CS_fsm_state23))) begin
                ap_NS_fsm = ap_ST_fsm_state24;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state23;
            end
        end
        ap_ST_fsm_state24 : begin
            if (((encrypt_V_data_V_1_ack_in == 1'b1) & (1'b1 == ap_CS_fsm_state24))) begin
                ap_NS_fsm = ap_ST_fsm_state25;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state24;
            end
        end
        ap_ST_fsm_state25 : begin
            if (((encrypt_V_data_V_1_ack_in == 1'b1) & (1'b1 == ap_CS_fsm_state25))) begin
                ap_NS_fsm = ap_ST_fsm_state26;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state25;
            end
        end
        ap_ST_fsm_state26 : begin
            if (((encrypt_V_data_V_1_ack_in == 1'b1) & (1'b1 == ap_CS_fsm_state26))) begin
                ap_NS_fsm = ap_ST_fsm_state27;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state26;
            end
        end
        ap_ST_fsm_state27 : begin
            if (((encrypt_V_data_V_1_ack_in == 1'b1) & (1'b1 == ap_CS_fsm_state27))) begin
                ap_NS_fsm = ap_ST_fsm_state28;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state27;
            end
        end
        ap_ST_fsm_state28 : begin
            if (((encrypt_V_data_V_1_ack_in == 1'b1) & (1'b1 == ap_CS_fsm_state28))) begin
                ap_NS_fsm = ap_ST_fsm_state29;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state28;
            end
        end
        ap_ST_fsm_state29 : begin
            if (((encrypt_V_data_V_1_ack_in == 1'b1) & (1'b1 == ap_CS_fsm_state29))) begin
                ap_NS_fsm = ap_ST_fsm_state30;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state29;
            end
        end
        ap_ST_fsm_state30 : begin
            if (((encrypt_V_data_V_1_ack_in == 1'b1) & (1'b1 == ap_CS_fsm_state30))) begin
                ap_NS_fsm = ap_ST_fsm_state31;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state30;
            end
        end
        ap_ST_fsm_state31 : begin
            if (((encrypt_V_data_V_1_ack_in == 1'b1) & (1'b1 == ap_CS_fsm_state31))) begin
                ap_NS_fsm = ap_ST_fsm_state32;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state31;
            end
        end
        ap_ST_fsm_state32 : begin
            if (((encrypt_V_data_V_1_ack_in == 1'b1) & (1'b1 == ap_CS_fsm_state32))) begin
                ap_NS_fsm = ap_ST_fsm_state33;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state32;
            end
        end
        ap_ST_fsm_state33 : begin
            if (((encrypt_V_data_V_1_ack_in == 1'b1) & (1'b1 == ap_CS_fsm_state33))) begin
                ap_NS_fsm = ap_ST_fsm_state34;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state33;
            end
        end
        ap_ST_fsm_state34 : begin
            if (((encrypt_V_data_V_1_ack_in == 1'b1) & (1'b1 == ap_CS_fsm_state34))) begin
                ap_NS_fsm = ap_ST_fsm_state35;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state34;
            end
        end
        ap_ST_fsm_state35 : begin
            if (((encrypt_V_data_V_1_ack_in == 1'b1) & (1'b1 == ap_CS_fsm_state35))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state35;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state11 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_state12 = ap_CS_fsm[32'd11];

assign ap_CS_fsm_state13 = ap_CS_fsm[32'd12];

assign ap_CS_fsm_state14 = ap_CS_fsm[32'd13];

assign ap_CS_fsm_state15 = ap_CS_fsm[32'd14];

assign ap_CS_fsm_state16 = ap_CS_fsm[32'd15];

assign ap_CS_fsm_state17 = ap_CS_fsm[32'd16];

assign ap_CS_fsm_state18 = ap_CS_fsm[32'd17];

assign ap_CS_fsm_state19 = ap_CS_fsm[32'd18];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state20 = ap_CS_fsm[32'd19];

assign ap_CS_fsm_state21 = ap_CS_fsm[32'd20];

assign ap_CS_fsm_state22 = ap_CS_fsm[32'd21];

assign ap_CS_fsm_state23 = ap_CS_fsm[32'd22];

assign ap_CS_fsm_state24 = ap_CS_fsm[32'd23];

assign ap_CS_fsm_state25 = ap_CS_fsm[32'd24];

assign ap_CS_fsm_state26 = ap_CS_fsm[32'd25];

assign ap_CS_fsm_state27 = ap_CS_fsm[32'd26];

assign ap_CS_fsm_state28 = ap_CS_fsm[32'd27];

assign ap_CS_fsm_state29 = ap_CS_fsm[32'd28];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state30 = ap_CS_fsm[32'd29];

assign ap_CS_fsm_state31 = ap_CS_fsm[32'd30];

assign ap_CS_fsm_state32 = ap_CS_fsm[32'd31];

assign ap_CS_fsm_state33 = ap_CS_fsm[32'd32];

assign ap_CS_fsm_state34 = ap_CS_fsm[32'd33];

assign ap_CS_fsm_state35 = ap_CS_fsm[32'd34];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd8];

always @ (*) begin
    ap_block_state18_on_subcall_done = ((ap_sync_grp_Cipher_fu_244_ap_ready & ap_sync_grp_Cipher_fu_244_ap_done) == 1'b0);
end

always @ (*) begin
    ap_block_state2 = ((encrypt_V_dest_V_1_ack_in == 1'b0) | (encrypt_V_id_V_1_ack_in == 1'b0) | (encrypt_V_last_V_1_ack_in == 1'b0) | (encrypt_V_user_V_1_ack_in == 1'b0) | (encrypt_V_strb_V_1_ack_in == 1'b0) | (encrypt_V_keep_V_1_ack_in == 1'b0) | (encrypt_V_data_V_1_ack_in == 1'b0) | ((tmp_fu_351_p2 == 1'd1) & (plain_V_data_V_0_vld_out == 1'b0)));
end

always @ (*) begin
    ap_rst_n_inv = ~ap_rst_n;
end

assign ap_sync_grp_Cipher_fu_244_ap_done = (grp_Cipher_fu_244_ap_done | ap_sync_reg_grp_Cipher_fu_244_ap_done);

assign ap_sync_grp_Cipher_fu_244_ap_ready = (grp_Cipher_fu_244_ap_ready | ap_sync_reg_grp_Cipher_fu_244_ap_ready);

assign encrypt_TDATA = encrypt_V_data_V_1_data_out;

assign encrypt_TDEST = encrypt_V_dest_V_1_data_out;

assign encrypt_TID = encrypt_V_id_V_1_data_out;

assign encrypt_TKEEP = encrypt_V_keep_V_1_data_out;

assign encrypt_TLAST = encrypt_V_last_V_1_data_out;

assign encrypt_TSTRB = encrypt_V_strb_V_1_data_out;

assign encrypt_TUSER = encrypt_V_user_V_1_data_out;

assign encrypt_TVALID = encrypt_V_dest_V_1_state[1'd0];

assign encrypt_V_data_V_1_ack_in = encrypt_V_data_V_1_state[1'd1];

assign encrypt_V_data_V_1_ack_out = encrypt_TREADY;

assign encrypt_V_data_V_1_load_A = (~encrypt_V_data_V_1_sel_wr & encrypt_V_data_V_1_state_cmp_full);

assign encrypt_V_data_V_1_load_B = (encrypt_V_data_V_1_state_cmp_full & encrypt_V_data_V_1_sel_wr);

assign encrypt_V_data_V_1_sel = encrypt_V_data_V_1_sel_rd;

assign encrypt_V_data_V_1_state_cmp_full = ((encrypt_V_data_V_1_state != 2'd1) ? 1'b1 : 1'b0);

assign encrypt_V_data_V_1_vld_out = encrypt_V_data_V_1_state[1'd0];

assign encrypt_V_dest_V_1_ack_in = encrypt_V_dest_V_1_state[1'd1];

assign encrypt_V_dest_V_1_ack_out = encrypt_TREADY;

assign encrypt_V_dest_V_1_load_A = (~encrypt_V_dest_V_1_sel_wr & encrypt_V_dest_V_1_state_cmp_full);

assign encrypt_V_dest_V_1_load_B = (encrypt_V_dest_V_1_state_cmp_full & encrypt_V_dest_V_1_sel_wr);

assign encrypt_V_dest_V_1_sel = encrypt_V_dest_V_1_sel_rd;

assign encrypt_V_dest_V_1_state_cmp_full = ((encrypt_V_dest_V_1_state != 2'd1) ? 1'b1 : 1'b0);

assign encrypt_V_dest_V_1_vld_out = encrypt_V_dest_V_1_state[1'd0];

assign encrypt_V_id_V_1_ack_in = encrypt_V_id_V_1_state[1'd1];

assign encrypt_V_id_V_1_ack_out = encrypt_TREADY;

assign encrypt_V_id_V_1_load_A = (~encrypt_V_id_V_1_sel_wr & encrypt_V_id_V_1_state_cmp_full);

assign encrypt_V_id_V_1_load_B = (encrypt_V_id_V_1_state_cmp_full & encrypt_V_id_V_1_sel_wr);

assign encrypt_V_id_V_1_sel = encrypt_V_id_V_1_sel_rd;

assign encrypt_V_id_V_1_state_cmp_full = ((encrypt_V_id_V_1_state != 2'd1) ? 1'b1 : 1'b0);

assign encrypt_V_id_V_1_vld_out = encrypt_V_id_V_1_state[1'd0];

assign encrypt_V_keep_V_1_ack_in = encrypt_V_keep_V_1_state[1'd1];

assign encrypt_V_keep_V_1_ack_out = encrypt_TREADY;

assign encrypt_V_keep_V_1_load_A = (~encrypt_V_keep_V_1_sel_wr & encrypt_V_keep_V_1_state_cmp_full);

assign encrypt_V_keep_V_1_load_B = (encrypt_V_keep_V_1_state_cmp_full & encrypt_V_keep_V_1_sel_wr);

assign encrypt_V_keep_V_1_sel = encrypt_V_keep_V_1_sel_rd;

assign encrypt_V_keep_V_1_state_cmp_full = ((encrypt_V_keep_V_1_state != 2'd1) ? 1'b1 : 1'b0);

assign encrypt_V_keep_V_1_vld_out = encrypt_V_keep_V_1_state[1'd0];

assign encrypt_V_last_V_1_ack_in = encrypt_V_last_V_1_state[1'd1];

assign encrypt_V_last_V_1_ack_out = encrypt_TREADY;

assign encrypt_V_last_V_1_load_A = (~encrypt_V_last_V_1_sel_wr & encrypt_V_last_V_1_state_cmp_full);

assign encrypt_V_last_V_1_load_B = (encrypt_V_last_V_1_state_cmp_full & encrypt_V_last_V_1_sel_wr);

assign encrypt_V_last_V_1_sel = encrypt_V_last_V_1_sel_rd;

assign encrypt_V_last_V_1_state_cmp_full = ((encrypt_V_last_V_1_state != 2'd1) ? 1'b1 : 1'b0);

assign encrypt_V_last_V_1_vld_out = encrypt_V_last_V_1_state[1'd0];

assign encrypt_V_strb_V_1_ack_in = encrypt_V_strb_V_1_state[1'd1];

assign encrypt_V_strb_V_1_ack_out = encrypt_TREADY;

assign encrypt_V_strb_V_1_load_A = (~encrypt_V_strb_V_1_sel_wr & encrypt_V_strb_V_1_state_cmp_full);

assign encrypt_V_strb_V_1_load_B = (encrypt_V_strb_V_1_state_cmp_full & encrypt_V_strb_V_1_sel_wr);

assign encrypt_V_strb_V_1_sel = encrypt_V_strb_V_1_sel_rd;

assign encrypt_V_strb_V_1_state_cmp_full = ((encrypt_V_strb_V_1_state != 2'd1) ? 1'b1 : 1'b0);

assign encrypt_V_strb_V_1_vld_out = encrypt_V_strb_V_1_state[1'd0];

assign encrypt_V_user_V_1_ack_in = encrypt_V_user_V_1_state[1'd1];

assign encrypt_V_user_V_1_ack_out = encrypt_TREADY;

assign encrypt_V_user_V_1_load_A = (~encrypt_V_user_V_1_sel_wr & encrypt_V_user_V_1_state_cmp_full);

assign encrypt_V_user_V_1_load_B = (encrypt_V_user_V_1_state_cmp_full & encrypt_V_user_V_1_sel_wr);

assign encrypt_V_user_V_1_sel = encrypt_V_user_V_1_sel_rd;

assign encrypt_V_user_V_1_state_cmp_full = ((encrypt_V_user_V_1_state != 2'd1) ? 1'b1 : 1'b0);

assign encrypt_V_user_V_1_vld_out = encrypt_V_user_V_1_state[1'd0];

assign grp_Cipher_fu_244_ap_start = grp_Cipher_fu_244_ap_start_reg;

assign i_1_fu_356_p2 = (i_reg_233 + 32'd16);

assign plain_TREADY = plain_V_dest_V_0_state[1'd1];

assign plain_V_data_V_0_ack_in = plain_V_data_V_0_state[1'd1];

assign plain_V_data_V_0_load_A = (plain_V_data_V_0_state_cmp_full & ~plain_V_data_V_0_sel_wr);

assign plain_V_data_V_0_load_B = (plain_V_data_V_0_state_cmp_full & plain_V_data_V_0_sel_wr);

assign plain_V_data_V_0_sel = plain_V_data_V_0_sel_rd;

assign plain_V_data_V_0_state_cmp_full = ((plain_V_data_V_0_state != 2'd1) ? 1'b1 : 1'b0);

assign plain_V_data_V_0_vld_in = plain_TVALID;

assign plain_V_data_V_0_vld_out = plain_V_data_V_0_state[1'd0];

assign plain_V_dest_V_0_ack_in = plain_V_dest_V_0_state[1'd1];

assign plain_V_dest_V_0_load_A = (plain_V_dest_V_0_state_cmp_full & ~plain_V_dest_V_0_sel_wr);

assign plain_V_dest_V_0_load_B = (plain_V_dest_V_0_state_cmp_full & plain_V_dest_V_0_sel_wr);

assign plain_V_dest_V_0_sel = plain_V_dest_V_0_sel_rd;

assign plain_V_dest_V_0_state_cmp_full = ((plain_V_dest_V_0_state != 2'd1) ? 1'b1 : 1'b0);

assign plain_V_dest_V_0_vld_in = plain_TVALID;

assign plain_V_dest_V_0_vld_out = plain_V_dest_V_0_state[1'd0];

assign plain_V_id_V_0_ack_in = plain_V_id_V_0_state[1'd1];

assign plain_V_id_V_0_load_A = (plain_V_id_V_0_state_cmp_full & ~plain_V_id_V_0_sel_wr);

assign plain_V_id_V_0_load_B = (plain_V_id_V_0_state_cmp_full & plain_V_id_V_0_sel_wr);

assign plain_V_id_V_0_sel = plain_V_id_V_0_sel_rd;

assign plain_V_id_V_0_state_cmp_full = ((plain_V_id_V_0_state != 2'd1) ? 1'b1 : 1'b0);

assign plain_V_id_V_0_vld_in = plain_TVALID;

assign plain_V_id_V_0_vld_out = plain_V_id_V_0_state[1'd0];

assign plain_V_keep_V_0_ack_in = plain_V_keep_V_0_state[1'd1];

assign plain_V_keep_V_0_load_A = (plain_V_keep_V_0_state_cmp_full & ~plain_V_keep_V_0_sel_wr);

assign plain_V_keep_V_0_load_B = (plain_V_keep_V_0_state_cmp_full & plain_V_keep_V_0_sel_wr);

assign plain_V_keep_V_0_sel = plain_V_keep_V_0_sel_rd;

assign plain_V_keep_V_0_state_cmp_full = ((plain_V_keep_V_0_state != 2'd1) ? 1'b1 : 1'b0);

assign plain_V_keep_V_0_vld_in = plain_TVALID;

assign plain_V_keep_V_0_vld_out = plain_V_keep_V_0_state[1'd0];

assign plain_V_last_V_0_ack_in = plain_V_last_V_0_state[1'd1];

assign plain_V_last_V_0_load_A = (plain_V_last_V_0_state_cmp_full & ~plain_V_last_V_0_sel_wr);

assign plain_V_last_V_0_load_B = (plain_V_last_V_0_state_cmp_full & plain_V_last_V_0_sel_wr);

assign plain_V_last_V_0_sel = plain_V_last_V_0_sel_rd;

assign plain_V_last_V_0_state_cmp_full = ((plain_V_last_V_0_state != 2'd1) ? 1'b1 : 1'b0);

assign plain_V_last_V_0_vld_in = plain_TVALID;

assign plain_V_last_V_0_vld_out = plain_V_last_V_0_state[1'd0];

assign plain_V_strb_V_0_ack_in = plain_V_strb_V_0_state[1'd1];

assign plain_V_strb_V_0_load_A = (plain_V_strb_V_0_state_cmp_full & ~plain_V_strb_V_0_sel_wr);

assign plain_V_strb_V_0_load_B = (plain_V_strb_V_0_state_cmp_full & plain_V_strb_V_0_sel_wr);

assign plain_V_strb_V_0_sel = plain_V_strb_V_0_sel_rd;

assign plain_V_strb_V_0_state_cmp_full = ((plain_V_strb_V_0_state != 2'd1) ? 1'b1 : 1'b0);

assign plain_V_strb_V_0_vld_in = plain_TVALID;

assign plain_V_strb_V_0_vld_out = plain_V_strb_V_0_state[1'd0];

assign plain_V_user_V_0_ack_in = plain_V_user_V_0_state[1'd1];

assign plain_V_user_V_0_load_A = (plain_V_user_V_0_state_cmp_full & ~plain_V_user_V_0_sel_wr);

assign plain_V_user_V_0_load_B = (plain_V_user_V_0_state_cmp_full & plain_V_user_V_0_sel_wr);

assign plain_V_user_V_0_sel = plain_V_user_V_0_sel_rd;

assign plain_V_user_V_0_state_cmp_full = ((plain_V_user_V_0_state != 2'd1) ? 1'b1 : 1'b0);

assign plain_V_user_V_0_vld_in = plain_TVALID;

assign plain_V_user_V_0_vld_out = plain_V_user_V_0_state[1'd0];

assign tmp_fu_351_p2 = ((i_reg_233 < len_read_reg_426) ? 1'b1 : 1'b0);

endmodule //AES_ECB_encrypt
