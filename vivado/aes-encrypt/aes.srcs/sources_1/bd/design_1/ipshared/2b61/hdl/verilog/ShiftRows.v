// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.3
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module ShiftRows (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        in_0_V_read,
        in_1_V_read,
        in_2_V_read,
        in_3_V_read,
        in_4_V_read,
        in_5_V_read,
        in_6_V_read,
        in_7_V_read,
        in_8_V_read,
        in_9_V_read,
        in_10_V_read,
        in_11_V_read,
        in_12_V_read,
        in_13_V_read,
        in_14_V_read,
        in_15_V_read,
        out_0_V,
        out_0_V_ap_vld,
        out_1_V,
        out_1_V_ap_vld,
        out_2_V,
        out_2_V_ap_vld,
        out_3_V,
        out_3_V_ap_vld,
        out_4_V,
        out_4_V_ap_vld,
        out_5_V,
        out_5_V_ap_vld,
        out_6_V,
        out_6_V_ap_vld,
        out_7_V,
        out_7_V_ap_vld,
        out_8_V,
        out_8_V_ap_vld,
        out_9_V,
        out_9_V_ap_vld,
        out_10_V,
        out_10_V_ap_vld,
        out_11_V,
        out_11_V_ap_vld,
        out_12_V,
        out_12_V_ap_vld,
        out_13_V,
        out_13_V_ap_vld,
        out_14_V,
        out_14_V_ap_vld,
        out_15_V,
        out_15_V_ap_vld
);

parameter    ap_ST_fsm_state1 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
input  [7:0] in_0_V_read;
input  [7:0] in_1_V_read;
input  [7:0] in_2_V_read;
input  [7:0] in_3_V_read;
input  [7:0] in_4_V_read;
input  [7:0] in_5_V_read;
input  [7:0] in_6_V_read;
input  [7:0] in_7_V_read;
input  [7:0] in_8_V_read;
input  [7:0] in_9_V_read;
input  [7:0] in_10_V_read;
input  [7:0] in_11_V_read;
input  [7:0] in_12_V_read;
input  [7:0] in_13_V_read;
input  [7:0] in_14_V_read;
input  [7:0] in_15_V_read;
output  [7:0] out_0_V;
output   out_0_V_ap_vld;
output  [7:0] out_1_V;
output   out_1_V_ap_vld;
output  [7:0] out_2_V;
output   out_2_V_ap_vld;
output  [7:0] out_3_V;
output   out_3_V_ap_vld;
output  [7:0] out_4_V;
output   out_4_V_ap_vld;
output  [7:0] out_5_V;
output   out_5_V_ap_vld;
output  [7:0] out_6_V;
output   out_6_V_ap_vld;
output  [7:0] out_7_V;
output   out_7_V_ap_vld;
output  [7:0] out_8_V;
output   out_8_V_ap_vld;
output  [7:0] out_9_V;
output   out_9_V_ap_vld;
output  [7:0] out_10_V;
output   out_10_V_ap_vld;
output  [7:0] out_11_V;
output   out_11_V_ap_vld;
output  [7:0] out_12_V;
output   out_12_V_ap_vld;
output  [7:0] out_13_V;
output   out_13_V_ap_vld;
output  [7:0] out_14_V;
output   out_14_V_ap_vld;
output  [7:0] out_15_V;
output   out_15_V_ap_vld;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg[7:0] out_0_V;
reg out_0_V_ap_vld;
reg[7:0] out_1_V;
reg out_1_V_ap_vld;
reg[7:0] out_2_V;
reg out_2_V_ap_vld;
reg[7:0] out_3_V;
reg out_3_V_ap_vld;
reg[7:0] out_4_V;
reg out_4_V_ap_vld;
reg[7:0] out_5_V;
reg out_5_V_ap_vld;
reg[7:0] out_6_V;
reg out_6_V_ap_vld;
reg[7:0] out_7_V;
reg out_7_V_ap_vld;
reg[7:0] out_8_V;
reg out_8_V_ap_vld;
reg[7:0] out_9_V;
reg out_9_V_ap_vld;
reg[7:0] out_10_V;
reg out_10_V_ap_vld;
reg[7:0] out_11_V;
reg out_11_V_ap_vld;
reg[7:0] out_12_V;
reg out_12_V_ap_vld;
reg[7:0] out_13_V;
reg out_13_V_ap_vld;
reg[7:0] out_14_V;
reg out_14_V_ap_vld;
reg[7:0] out_15_V;
reg out_15_V_ap_vld;

reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    ap_block_state1;
reg   [7:0] out_13_V_preg;
reg   [7:0] out_1_V_preg;
reg   [7:0] out_5_V_preg;
reg   [7:0] out_9_V_preg;
reg   [7:0] out_10_V_preg;
reg   [7:0] out_2_V_preg;
reg   [7:0] out_14_V_preg;
reg   [7:0] out_6_V_preg;
reg   [7:0] out_7_V_preg;
reg   [7:0] out_3_V_preg;
reg   [7:0] out_15_V_preg;
reg   [7:0] out_11_V_preg;
reg   [7:0] out_0_V_preg;
reg   [7:0] out_4_V_preg;
reg   [7:0] out_8_V_preg;
reg   [7:0] out_12_V_preg;
reg   [0:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 1'd1;
#0 out_13_V_preg = 8'd0;
#0 out_1_V_preg = 8'd0;
#0 out_5_V_preg = 8'd0;
#0 out_9_V_preg = 8'd0;
#0 out_10_V_preg = 8'd0;
#0 out_2_V_preg = 8'd0;
#0 out_14_V_preg = 8'd0;
#0 out_6_V_preg = 8'd0;
#0 out_7_V_preg = 8'd0;
#0 out_3_V_preg = 8'd0;
#0 out_15_V_preg = 8'd0;
#0 out_11_V_preg = 8'd0;
#0 out_0_V_preg = 8'd0;
#0 out_4_V_preg = 8'd0;
#0 out_8_V_preg = 8'd0;
#0 out_12_V_preg = 8'd0;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        out_0_V_preg <= 8'd0;
    end else begin
        if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
            out_0_V_preg <= in_0_V_read;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        out_10_V_preg <= 8'd0;
    end else begin
        if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
            out_10_V_preg <= in_2_V_read;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        out_11_V_preg <= 8'd0;
    end else begin
        if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
            out_11_V_preg <= in_7_V_read;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        out_12_V_preg <= 8'd0;
    end else begin
        if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
            out_12_V_preg <= in_12_V_read;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        out_13_V_preg <= 8'd0;
    end else begin
        if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
            out_13_V_preg <= in_1_V_read;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        out_14_V_preg <= 8'd0;
    end else begin
        if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
            out_14_V_preg <= in_6_V_read;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        out_15_V_preg <= 8'd0;
    end else begin
        if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
            out_15_V_preg <= in_11_V_read;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        out_1_V_preg <= 8'd0;
    end else begin
        if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
            out_1_V_preg <= in_5_V_read;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        out_2_V_preg <= 8'd0;
    end else begin
        if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
            out_2_V_preg <= in_10_V_read;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        out_3_V_preg <= 8'd0;
    end else begin
        if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
            out_3_V_preg <= in_15_V_read;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        out_4_V_preg <= 8'd0;
    end else begin
        if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
            out_4_V_preg <= in_4_V_read;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        out_5_V_preg <= 8'd0;
    end else begin
        if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
            out_5_V_preg <= in_9_V_read;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        out_6_V_preg <= 8'd0;
    end else begin
        if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
            out_6_V_preg <= in_14_V_read;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        out_7_V_preg <= 8'd0;
    end else begin
        if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
            out_7_V_preg <= in_3_V_read;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        out_8_V_preg <= 8'd0;
    end else begin
        if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
            out_8_V_preg <= in_8_V_read;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        out_9_V_preg <= 8'd0;
    end else begin
        if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
            out_9_V_preg <= in_13_V_read;
        end
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        out_0_V = in_0_V_read;
    end else begin
        out_0_V = out_0_V_preg;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        out_0_V_ap_vld = 1'b1;
    end else begin
        out_0_V_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        out_10_V = in_2_V_read;
    end else begin
        out_10_V = out_10_V_preg;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        out_10_V_ap_vld = 1'b1;
    end else begin
        out_10_V_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        out_11_V = in_7_V_read;
    end else begin
        out_11_V = out_11_V_preg;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        out_11_V_ap_vld = 1'b1;
    end else begin
        out_11_V_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        out_12_V = in_12_V_read;
    end else begin
        out_12_V = out_12_V_preg;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        out_12_V_ap_vld = 1'b1;
    end else begin
        out_12_V_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        out_13_V = in_1_V_read;
    end else begin
        out_13_V = out_13_V_preg;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        out_13_V_ap_vld = 1'b1;
    end else begin
        out_13_V_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        out_14_V = in_6_V_read;
    end else begin
        out_14_V = out_14_V_preg;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        out_14_V_ap_vld = 1'b1;
    end else begin
        out_14_V_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        out_15_V = in_11_V_read;
    end else begin
        out_15_V = out_15_V_preg;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        out_15_V_ap_vld = 1'b1;
    end else begin
        out_15_V_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        out_1_V = in_5_V_read;
    end else begin
        out_1_V = out_1_V_preg;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        out_1_V_ap_vld = 1'b1;
    end else begin
        out_1_V_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        out_2_V = in_10_V_read;
    end else begin
        out_2_V = out_2_V_preg;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        out_2_V_ap_vld = 1'b1;
    end else begin
        out_2_V_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        out_3_V = in_15_V_read;
    end else begin
        out_3_V = out_3_V_preg;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        out_3_V_ap_vld = 1'b1;
    end else begin
        out_3_V_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        out_4_V = in_4_V_read;
    end else begin
        out_4_V = out_4_V_preg;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        out_4_V_ap_vld = 1'b1;
    end else begin
        out_4_V_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        out_5_V = in_9_V_read;
    end else begin
        out_5_V = out_5_V_preg;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        out_5_V_ap_vld = 1'b1;
    end else begin
        out_5_V_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        out_6_V = in_14_V_read;
    end else begin
        out_6_V = out_6_V_preg;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        out_6_V_ap_vld = 1'b1;
    end else begin
        out_6_V_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        out_7_V = in_3_V_read;
    end else begin
        out_7_V = out_7_V_preg;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        out_7_V_ap_vld = 1'b1;
    end else begin
        out_7_V_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        out_8_V = in_8_V_read;
    end else begin
        out_8_V = out_8_V_preg;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        out_8_V_ap_vld = 1'b1;
    end else begin
        out_8_V_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        out_9_V = in_13_V_read;
    end else begin
        out_9_V = out_9_V_preg;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        out_9_V_ap_vld = 1'b1;
    end else begin
        out_9_V_ap_vld = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

always @ (*) begin
    ap_block_state1 = ((ap_start == 1'b0) | (ap_done_reg == 1'b1));
end

endmodule //ShiftRows
