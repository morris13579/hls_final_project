// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
// Version: 2020.2
// Copyright (C) Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module Cipher_Stream_SubBytes393 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        p_read,
        p_read1,
        p_read2,
        p_read3,
        p_read4,
        p_read5,
        p_read6,
        p_read7,
        p_read8,
        p_read9,
        p_read10,
        p_read11,
        p_read12,
        p_read13,
        p_read14,
        p_read15,
        ap_return_0,
        ap_return_1,
        ap_return_2,
        ap_return_3,
        ap_return_4,
        ap_return_5,
        ap_return_6,
        ap_return_7,
        ap_return_8,
        ap_return_9,
        ap_return_10,
        ap_return_11,
        ap_return_12,
        ap_return_13,
        ap_return_14,
        ap_return_15
);

parameter    ap_ST_fsm_state1 = 2'd1;
parameter    ap_ST_fsm_state2 = 2'd2;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
input  [7:0] p_read;
input  [7:0] p_read1;
input  [7:0] p_read2;
input  [7:0] p_read3;
input  [7:0] p_read4;
input  [7:0] p_read5;
input  [7:0] p_read6;
input  [7:0] p_read7;
input  [7:0] p_read8;
input  [7:0] p_read9;
input  [7:0] p_read10;
input  [7:0] p_read11;
input  [7:0] p_read12;
input  [7:0] p_read13;
input  [7:0] p_read14;
input  [7:0] p_read15;
output  [7:0] ap_return_0;
output  [7:0] ap_return_1;
output  [7:0] ap_return_2;
output  [7:0] ap_return_3;
output  [7:0] ap_return_4;
output  [7:0] ap_return_5;
output  [7:0] ap_return_6;
output  [7:0] ap_return_7;
output  [7:0] ap_return_8;
output  [7:0] ap_return_9;
output  [7:0] ap_return_10;
output  [7:0] ap_return_11;
output  [7:0] ap_return_12;
output  [7:0] ap_return_13;
output  [7:0] ap_return_14;
output  [7:0] ap_return_15;

reg ap_done;
reg ap_idle;
reg ap_ready;

reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [1:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [7:0] S_Box427_address0;
reg    S_Box427_ce0;
wire   [7:0] S_Box427_q0;
wire   [7:0] S_Box427_address1;
reg    S_Box427_ce1;
wire   [7:0] S_Box427_q1;
wire   [7:0] S_Box427_address2;
reg    S_Box427_ce2;
wire   [7:0] S_Box427_q2;
wire   [7:0] S_Box427_address3;
reg    S_Box427_ce3;
wire   [7:0] S_Box427_q3;
wire   [7:0] S_Box427_address4;
reg    S_Box427_ce4;
wire   [7:0] S_Box427_q4;
wire   [7:0] S_Box427_address5;
reg    S_Box427_ce5;
wire   [7:0] S_Box427_q5;
wire   [7:0] S_Box427_address6;
reg    S_Box427_ce6;
wire   [7:0] S_Box427_q6;
wire   [7:0] S_Box427_address7;
reg    S_Box427_ce7;
wire   [7:0] S_Box427_q7;
wire   [7:0] S_Box427_address8;
reg    S_Box427_ce8;
wire   [7:0] S_Box427_q8;
wire   [7:0] S_Box427_address9;
reg    S_Box427_ce9;
wire   [7:0] S_Box427_q9;
wire   [7:0] S_Box427_address10;
reg    S_Box427_ce10;
wire   [7:0] S_Box427_q10;
wire   [7:0] S_Box427_address11;
reg    S_Box427_ce11;
wire   [7:0] S_Box427_q11;
wire   [7:0] S_Box427_address12;
reg    S_Box427_ce12;
wire   [7:0] S_Box427_q12;
wire   [7:0] S_Box427_address13;
reg    S_Box427_ce13;
wire   [7:0] S_Box427_q13;
wire   [7:0] S_Box427_address14;
reg    S_Box427_ce14;
wire   [7:0] S_Box427_q14;
wire   [7:0] S_Box427_address15;
reg    S_Box427_ce15;
wire   [7:0] S_Box427_q15;
wire   [63:0] zext_ln43_fu_329_p1;
wire   [63:0] zext_ln43_91_fu_334_p1;
wire   [63:0] zext_ln43_92_fu_339_p1;
wire   [63:0] zext_ln43_93_fu_344_p1;
wire   [63:0] zext_ln43_94_fu_349_p1;
wire   [63:0] zext_ln43_95_fu_354_p1;
wire   [63:0] zext_ln43_96_fu_359_p1;
wire   [63:0] zext_ln43_97_fu_364_p1;
wire   [63:0] zext_ln43_98_fu_369_p1;
wire   [63:0] zext_ln43_99_fu_374_p1;
wire   [63:0] zext_ln43_100_fu_379_p1;
wire   [63:0] zext_ln43_101_fu_384_p1;
wire   [63:0] zext_ln43_102_fu_389_p1;
wire   [63:0] zext_ln43_103_fu_394_p1;
wire   [63:0] zext_ln43_104_fu_399_p1;
wire   [63:0] zext_ln43_105_fu_404_p1;
reg    ap_block_state1;
wire    ap_CS_fsm_state2;
reg   [1:0] ap_NS_fsm;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 2'd1;
end

Cipher_Stream_SubBytes385_S_Box429 #(
    .DataWidth( 8 ),
    .AddressRange( 256 ),
    .AddressWidth( 8 ))
S_Box427_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(S_Box427_address0),
    .ce0(S_Box427_ce0),
    .q0(S_Box427_q0),
    .address1(S_Box427_address1),
    .ce1(S_Box427_ce1),
    .q1(S_Box427_q1),
    .address2(S_Box427_address2),
    .ce2(S_Box427_ce2),
    .q2(S_Box427_q2),
    .address3(S_Box427_address3),
    .ce3(S_Box427_ce3),
    .q3(S_Box427_q3),
    .address4(S_Box427_address4),
    .ce4(S_Box427_ce4),
    .q4(S_Box427_q4),
    .address5(S_Box427_address5),
    .ce5(S_Box427_ce5),
    .q5(S_Box427_q5),
    .address6(S_Box427_address6),
    .ce6(S_Box427_ce6),
    .q6(S_Box427_q6),
    .address7(S_Box427_address7),
    .ce7(S_Box427_ce7),
    .q7(S_Box427_q7),
    .address8(S_Box427_address8),
    .ce8(S_Box427_ce8),
    .q8(S_Box427_q8),
    .address9(S_Box427_address9),
    .ce9(S_Box427_ce9),
    .q9(S_Box427_q9),
    .address10(S_Box427_address10),
    .ce10(S_Box427_ce10),
    .q10(S_Box427_q10),
    .address11(S_Box427_address11),
    .ce11(S_Box427_ce11),
    .q11(S_Box427_q11),
    .address12(S_Box427_address12),
    .ce12(S_Box427_ce12),
    .q12(S_Box427_q12),
    .address13(S_Box427_address13),
    .ce13(S_Box427_ce13),
    .q13(S_Box427_q13),
    .address14(S_Box427_address14),
    .ce14(S_Box427_ce14),
    .q14(S_Box427_q14),
    .address15(S_Box427_address15),
    .ce15(S_Box427_ce15),
    .q15(S_Box427_q15)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state2)) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        S_Box427_ce0 = 1'b1;
    end else begin
        S_Box427_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        S_Box427_ce1 = 1'b1;
    end else begin
        S_Box427_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        S_Box427_ce10 = 1'b1;
    end else begin
        S_Box427_ce10 = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        S_Box427_ce11 = 1'b1;
    end else begin
        S_Box427_ce11 = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        S_Box427_ce12 = 1'b1;
    end else begin
        S_Box427_ce12 = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        S_Box427_ce13 = 1'b1;
    end else begin
        S_Box427_ce13 = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        S_Box427_ce14 = 1'b1;
    end else begin
        S_Box427_ce14 = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        S_Box427_ce15 = 1'b1;
    end else begin
        S_Box427_ce15 = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        S_Box427_ce2 = 1'b1;
    end else begin
        S_Box427_ce2 = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        S_Box427_ce3 = 1'b1;
    end else begin
        S_Box427_ce3 = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        S_Box427_ce4 = 1'b1;
    end else begin
        S_Box427_ce4 = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        S_Box427_ce5 = 1'b1;
    end else begin
        S_Box427_ce5 = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        S_Box427_ce6 = 1'b1;
    end else begin
        S_Box427_ce6 = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        S_Box427_ce7 = 1'b1;
    end else begin
        S_Box427_ce7 = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        S_Box427_ce8 = 1'b1;
    end else begin
        S_Box427_ce8 = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        S_Box427_ce9 = 1'b1;
    end else begin
        S_Box427_ce9 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign S_Box427_address0 = zext_ln43_105_fu_404_p1;

assign S_Box427_address1 = zext_ln43_104_fu_399_p1;

assign S_Box427_address10 = zext_ln43_95_fu_354_p1;

assign S_Box427_address11 = zext_ln43_94_fu_349_p1;

assign S_Box427_address12 = zext_ln43_93_fu_344_p1;

assign S_Box427_address13 = zext_ln43_92_fu_339_p1;

assign S_Box427_address14 = zext_ln43_91_fu_334_p1;

assign S_Box427_address15 = zext_ln43_fu_329_p1;

assign S_Box427_address2 = zext_ln43_103_fu_394_p1;

assign S_Box427_address3 = zext_ln43_102_fu_389_p1;

assign S_Box427_address4 = zext_ln43_101_fu_384_p1;

assign S_Box427_address5 = zext_ln43_100_fu_379_p1;

assign S_Box427_address6 = zext_ln43_99_fu_374_p1;

assign S_Box427_address7 = zext_ln43_98_fu_369_p1;

assign S_Box427_address8 = zext_ln43_97_fu_364_p1;

assign S_Box427_address9 = zext_ln43_96_fu_359_p1;

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

always @ (*) begin
    ap_block_state1 = ((ap_start == 1'b0) | (ap_done_reg == 1'b1));
end

assign ap_return_0 = S_Box427_q15;

assign ap_return_1 = S_Box427_q14;

assign ap_return_10 = S_Box427_q5;

assign ap_return_11 = S_Box427_q4;

assign ap_return_12 = S_Box427_q3;

assign ap_return_13 = S_Box427_q2;

assign ap_return_14 = S_Box427_q1;

assign ap_return_15 = S_Box427_q0;

assign ap_return_2 = S_Box427_q13;

assign ap_return_3 = S_Box427_q12;

assign ap_return_4 = S_Box427_q11;

assign ap_return_5 = S_Box427_q10;

assign ap_return_6 = S_Box427_q9;

assign ap_return_7 = S_Box427_q8;

assign ap_return_8 = S_Box427_q7;

assign ap_return_9 = S_Box427_q6;

assign zext_ln43_100_fu_379_p1 = p_read10;

assign zext_ln43_101_fu_384_p1 = p_read11;

assign zext_ln43_102_fu_389_p1 = p_read12;

assign zext_ln43_103_fu_394_p1 = p_read13;

assign zext_ln43_104_fu_399_p1 = p_read14;

assign zext_ln43_105_fu_404_p1 = p_read15;

assign zext_ln43_91_fu_334_p1 = p_read1;

assign zext_ln43_92_fu_339_p1 = p_read2;

assign zext_ln43_93_fu_344_p1 = p_read3;

assign zext_ln43_94_fu_349_p1 = p_read4;

assign zext_ln43_95_fu_354_p1 = p_read5;

assign zext_ln43_96_fu_359_p1 = p_read6;

assign zext_ln43_97_fu_364_p1 = p_read7;

assign zext_ln43_98_fu_369_p1 = p_read8;

assign zext_ln43_99_fu_374_p1 = p_read9;

assign zext_ln43_fu_329_p1 = p_read;

endmodule //Cipher_Stream_SubBytes393
