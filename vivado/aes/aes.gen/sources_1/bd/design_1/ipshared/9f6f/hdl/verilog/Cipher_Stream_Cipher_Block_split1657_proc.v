// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
// Version: 2020.2
// Copyright (C) Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module Cipher_Stream_Cipher_Block_split1657_proc (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        p_read,
        out_r,
        out_r_ap_vld,
        p_read1,
        out16,
        out16_ap_vld,
        p_read2,
        out17,
        out17_ap_vld,
        p_read3,
        out18,
        out18_ap_vld,
        p_read4,
        out19,
        out19_ap_vld,
        p_read5,
        out20,
        out20_ap_vld,
        p_read6,
        out21,
        out21_ap_vld,
        p_read7,
        out22,
        out22_ap_vld,
        p_read8,
        out23,
        out23_ap_vld,
        p_read9,
        out24,
        out24_ap_vld,
        p_read10,
        out25,
        out25_ap_vld,
        p_read11,
        out26,
        out26_ap_vld,
        p_read12,
        out27,
        out27_ap_vld,
        p_read13,
        out28,
        out28_ap_vld,
        p_read14,
        out29,
        out29_ap_vld,
        p_read15,
        out30,
        out30_ap_vld
);

parameter    ap_ST_fsm_state1 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
input  [7:0] p_read;
output  [7:0] out_r;
output   out_r_ap_vld;
input  [7:0] p_read1;
output  [7:0] out16;
output   out16_ap_vld;
input  [7:0] p_read2;
output  [7:0] out17;
output   out17_ap_vld;
input  [7:0] p_read3;
output  [7:0] out18;
output   out18_ap_vld;
input  [7:0] p_read4;
output  [7:0] out19;
output   out19_ap_vld;
input  [7:0] p_read5;
output  [7:0] out20;
output   out20_ap_vld;
input  [7:0] p_read6;
output  [7:0] out21;
output   out21_ap_vld;
input  [7:0] p_read7;
output  [7:0] out22;
output   out22_ap_vld;
input  [7:0] p_read8;
output  [7:0] out23;
output   out23_ap_vld;
input  [7:0] p_read9;
output  [7:0] out24;
output   out24_ap_vld;
input  [7:0] p_read10;
output  [7:0] out25;
output   out25_ap_vld;
input  [7:0] p_read11;
output  [7:0] out26;
output   out26_ap_vld;
input  [7:0] p_read12;
output  [7:0] out27;
output   out27_ap_vld;
input  [7:0] p_read13;
output  [7:0] out28;
output   out28_ap_vld;
input  [7:0] p_read14;
output  [7:0] out29;
output   out29_ap_vld;
input  [7:0] p_read15;
output  [7:0] out30;
output   out30_ap_vld;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg[7:0] out_r;
reg out_r_ap_vld;
reg[7:0] out16;
reg out16_ap_vld;
reg[7:0] out17;
reg out17_ap_vld;
reg[7:0] out18;
reg out18_ap_vld;
reg[7:0] out19;
reg out19_ap_vld;
reg[7:0] out20;
reg out20_ap_vld;
reg[7:0] out21;
reg out21_ap_vld;
reg[7:0] out22;
reg out22_ap_vld;
reg[7:0] out23;
reg out23_ap_vld;
reg[7:0] out24;
reg out24_ap_vld;
reg[7:0] out25;
reg out25_ap_vld;
reg[7:0] out26;
reg out26_ap_vld;
reg[7:0] out27;
reg out27_ap_vld;
reg[7:0] out28;
reg out28_ap_vld;
reg[7:0] out29;
reg out29_ap_vld;
reg[7:0] out30;
reg out30_ap_vld;

reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    ap_block_state1;
reg   [7:0] out_r_preg;
reg   [7:0] out16_preg;
reg   [7:0] out17_preg;
reg   [7:0] out18_preg;
reg   [7:0] out19_preg;
reg   [7:0] out20_preg;
reg   [7:0] out21_preg;
reg   [7:0] out22_preg;
reg   [7:0] out23_preg;
reg   [7:0] out24_preg;
reg   [7:0] out25_preg;
reg   [7:0] out26_preg;
reg   [7:0] out27_preg;
reg   [7:0] out28_preg;
reg   [7:0] out29_preg;
reg   [7:0] out30_preg;
reg   [0:0] ap_NS_fsm;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 1'd1;
#0 out_r_preg = 8'd0;
#0 out16_preg = 8'd0;
#0 out17_preg = 8'd0;
#0 out18_preg = 8'd0;
#0 out19_preg = 8'd0;
#0 out20_preg = 8'd0;
#0 out21_preg = 8'd0;
#0 out22_preg = 8'd0;
#0 out23_preg = 8'd0;
#0 out24_preg = 8'd0;
#0 out25_preg = 8'd0;
#0 out26_preg = 8'd0;
#0 out27_preg = 8'd0;
#0 out28_preg = 8'd0;
#0 out29_preg = 8'd0;
#0 out30_preg = 8'd0;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        out16_preg <= 8'd0;
    end else begin
        if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
            out16_preg <= p_read1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        out17_preg <= 8'd0;
    end else begin
        if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
            out17_preg <= p_read2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        out18_preg <= 8'd0;
    end else begin
        if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
            out18_preg <= p_read3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        out19_preg <= 8'd0;
    end else begin
        if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
            out19_preg <= p_read4;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        out20_preg <= 8'd0;
    end else begin
        if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
            out20_preg <= p_read5;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        out21_preg <= 8'd0;
    end else begin
        if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
            out21_preg <= p_read6;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        out22_preg <= 8'd0;
    end else begin
        if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
            out22_preg <= p_read7;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        out23_preg <= 8'd0;
    end else begin
        if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
            out23_preg <= p_read8;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        out24_preg <= 8'd0;
    end else begin
        if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
            out24_preg <= p_read9;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        out25_preg <= 8'd0;
    end else begin
        if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
            out25_preg <= p_read10;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        out26_preg <= 8'd0;
    end else begin
        if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
            out26_preg <= p_read11;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        out27_preg <= 8'd0;
    end else begin
        if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
            out27_preg <= p_read12;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        out28_preg <= 8'd0;
    end else begin
        if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
            out28_preg <= p_read13;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        out29_preg <= 8'd0;
    end else begin
        if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
            out29_preg <= p_read14;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        out30_preg <= 8'd0;
    end else begin
        if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
            out30_preg <= p_read15;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        out_r_preg <= 8'd0;
    end else begin
        if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
            out_r_preg <= p_read;
        end
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        out16 = p_read1;
    end else begin
        out16 = out16_preg;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        out16_ap_vld = 1'b1;
    end else begin
        out16_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        out17 = p_read2;
    end else begin
        out17 = out17_preg;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        out17_ap_vld = 1'b1;
    end else begin
        out17_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        out18 = p_read3;
    end else begin
        out18 = out18_preg;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        out18_ap_vld = 1'b1;
    end else begin
        out18_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        out19 = p_read4;
    end else begin
        out19 = out19_preg;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        out19_ap_vld = 1'b1;
    end else begin
        out19_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        out20 = p_read5;
    end else begin
        out20 = out20_preg;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        out20_ap_vld = 1'b1;
    end else begin
        out20_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        out21 = p_read6;
    end else begin
        out21 = out21_preg;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        out21_ap_vld = 1'b1;
    end else begin
        out21_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        out22 = p_read7;
    end else begin
        out22 = out22_preg;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        out22_ap_vld = 1'b1;
    end else begin
        out22_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        out23 = p_read8;
    end else begin
        out23 = out23_preg;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        out23_ap_vld = 1'b1;
    end else begin
        out23_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        out24 = p_read9;
    end else begin
        out24 = out24_preg;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        out24_ap_vld = 1'b1;
    end else begin
        out24_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        out25 = p_read10;
    end else begin
        out25 = out25_preg;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        out25_ap_vld = 1'b1;
    end else begin
        out25_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        out26 = p_read11;
    end else begin
        out26 = out26_preg;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        out26_ap_vld = 1'b1;
    end else begin
        out26_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        out27 = p_read12;
    end else begin
        out27 = out27_preg;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        out27_ap_vld = 1'b1;
    end else begin
        out27_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        out28 = p_read13;
    end else begin
        out28 = out28_preg;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        out28_ap_vld = 1'b1;
    end else begin
        out28_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        out29 = p_read14;
    end else begin
        out29 = out29_preg;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        out29_ap_vld = 1'b1;
    end else begin
        out29_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        out30 = p_read15;
    end else begin
        out30 = out30_preg;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        out30_ap_vld = 1'b1;
    end else begin
        out30_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        out_r = p_read;
    end else begin
        out_r = out_r_preg;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        out_r_ap_vld = 1'b1;
    end else begin
        out_r_ap_vld = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

always @ (*) begin
    ap_block_state1 = ((ap_start == 1'b0) | (ap_done_reg == 1'b1));
end

endmodule //Cipher_Stream_Cipher_Block_split1657_proc
