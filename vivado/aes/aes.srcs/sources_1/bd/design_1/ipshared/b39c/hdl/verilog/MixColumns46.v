// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.3
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module MixColumns46 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        in_r_address0,
        in_r_ce0,
        in_r_q0,
        in_r_address1,
        in_r_ce1,
        in_r_q1,
        out_r_address0,
        out_r_ce0,
        out_r_we0,
        out_r_d0,
        out_r_address1,
        out_r_ce1,
        out_r_we1,
        out_r_d1
);

parameter    ap_ST_fsm_state1 = 5'd1;
parameter    ap_ST_fsm_state2 = 5'd2;
parameter    ap_ST_fsm_state3 = 5'd4;
parameter    ap_ST_fsm_state4 = 5'd8;
parameter    ap_ST_fsm_state5 = 5'd16;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
output  [3:0] in_r_address0;
output   in_r_ce0;
input  [7:0] in_r_q0;
output  [3:0] in_r_address1;
output   in_r_ce1;
input  [7:0] in_r_q1;
output  [3:0] out_r_address0;
output   out_r_ce0;
output   out_r_we0;
output  [7:0] out_r_d0;
output  [3:0] out_r_address1;
output   out_r_ce1;
output   out_r_we1;
output  [7:0] out_r_d1;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg[3:0] in_r_address0;
reg in_r_ce0;
reg[3:0] in_r_address1;
reg in_r_ce1;
reg[3:0] out_r_address0;
reg out_r_ce0;
reg out_r_we0;
reg[7:0] out_r_d0;
reg[3:0] out_r_address1;
reg out_r_ce1;
reg out_r_we1;
reg[7:0] out_r_d1;

reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [4:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [63:0] tmp_7_fu_135_p1;
reg   [63:0] tmp_7_reg_370;
wire    ap_CS_fsm_state2;
wire   [0:0] tmp_fu_127_p3;
wire   [3:0] tmp_21_fu_140_p1;
reg   [3:0] tmp_21_reg_380;
wire   [63:0] tmp_s_fu_150_p1;
reg   [63:0] tmp_s_reg_386;
wire   [4:0] i_fu_155_p2;
reg   [4:0] i_reg_396;
reg   [7:0] t_reg_401;
wire    ap_CS_fsm_state3;
reg   [7:0] in_load_reg_408;
wire   [63:0] tmp_2_fu_166_p1;
reg   [63:0] tmp_2_reg_415;
wire   [63:0] tmp_4_fu_176_p1;
reg   [63:0] tmp_4_reg_425;
wire   [7:0] tmp_13_fu_322_p2;
reg   [7:0] tmp_13_reg_435;
wire    ap_CS_fsm_state4;
wire   [7:0] tmp_14_fu_361_p2;
reg   [7:0] tmp_14_reg_440;
reg   [4:0] i1_reg_116;
reg    ap_block_state1;
wire    ap_CS_fsm_state5;
wire   [7:0] tmp_10_fu_230_p2;
wire   [7:0] tmp_12_fu_275_p2;
wire   [3:0] tmp_9_fu_144_p2;
wire   [3:0] tmp_1_fu_161_p2;
wire   [3:0] tmp_3_fu_171_p2;
wire   [7:0] Tm_fu_181_p2;
wire   [7:0] tmp_5_fu_185_p2;
wire   [0:0] tmp_23_fu_203_p3;
wire   [7:0] tmp_2_i_cast_cast_ca_fu_211_p3;
wire   [7:0] tmp_22_fu_197_p2;
wire   [7:0] Tmp_fu_191_p2;
wire   [7:0] tmp2_fu_224_p2;
wire   [7:0] tmp1_fu_219_p2;
wire   [7:0] Tm_4_fu_237_p2;
wire   [0:0] tmp_25_fu_248_p3;
wire   [7:0] tmp_2_i20_cast_cast_s_fu_256_p3;
wire   [7:0] tmp_24_fu_242_p2;
wire   [7:0] tmp4_fu_269_p2;
wire   [7:0] tmp3_fu_264_p2;
wire   [7:0] Tm_5_fu_282_p2;
wire   [0:0] tmp_27_fu_294_p3;
wire   [7:0] tmp_2_i25_cast_cast_s_fu_302_p3;
wire   [7:0] tmp_26_fu_288_p2;
wire   [7:0] tmp6_fu_316_p2;
wire   [7:0] tmp5_fu_310_p2;
wire   [7:0] Tm_6_fu_328_p2;
wire   [0:0] tmp_29_fu_339_p3;
wire   [7:0] tmp_28_fu_333_p2;
wire   [7:0] tmp7_fu_355_p2;
wire   [7:0] tmp_2_i30_cast_cast_s_fu_347_p3;
reg   [4:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 5'd1;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((tmp_fu_127_p3 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        i1_reg_116 <= i_reg_396;
    end else if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        i1_reg_116 <= 5'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_fu_127_p3 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        i_reg_396 <= i_fu_155_p2;
        tmp_21_reg_380 <= tmp_21_fu_140_p1;
        tmp_7_reg_370[4 : 0] <= tmp_7_fu_135_p1[4 : 0];
        tmp_s_reg_386[3 : 1] <= tmp_s_fu_150_p1[3 : 1];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        in_load_reg_408 <= in_r_q1;
        t_reg_401 <= in_r_q0;
        tmp_2_reg_415[0] <= tmp_2_fu_166_p1[0];
tmp_2_reg_415[3 : 2] <= tmp_2_fu_166_p1[3 : 2];
        tmp_4_reg_425[3 : 2] <= tmp_4_fu_176_p1[3 : 2];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        tmp_13_reg_435 <= tmp_13_fu_322_p2;
        tmp_14_reg_440 <= tmp_14_fu_361_p2;
    end
end

always @ (*) begin
    if (((tmp_fu_127_p3 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((tmp_fu_127_p3 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        in_r_address0 = tmp_2_fu_166_p1;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        in_r_address0 = tmp_7_fu_135_p1;
    end else begin
        in_r_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        in_r_address1 = tmp_4_fu_176_p1;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        in_r_address1 = tmp_s_fu_150_p1;
    end else begin
        in_r_address1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state2))) begin
        in_r_ce0 = 1'b1;
    end else begin
        in_r_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state2))) begin
        in_r_ce1 = 1'b1;
    end else begin
        in_r_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        out_r_address0 = tmp_2_reg_415;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        out_r_address0 = tmp_7_reg_370;
    end else begin
        out_r_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        out_r_address1 = tmp_4_reg_425;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        out_r_address1 = tmp_s_reg_386;
    end else begin
        out_r_address1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state5))) begin
        out_r_ce0 = 1'b1;
    end else begin
        out_r_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state5))) begin
        out_r_ce1 = 1'b1;
    end else begin
        out_r_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        out_r_d0 = tmp_13_reg_435;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        out_r_d0 = tmp_10_fu_230_p2;
    end else begin
        out_r_d0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        out_r_d1 = tmp_14_reg_440;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        out_r_d1 = tmp_12_fu_275_p2;
    end else begin
        out_r_d1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state5))) begin
        out_r_we0 = 1'b1;
    end else begin
        out_r_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state5))) begin
        out_r_we1 = 1'b1;
    end else begin
        out_r_we1 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((tmp_fu_127_p3 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state2;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign Tm_4_fu_237_p2 = (in_r_q0 ^ in_load_reg_408);

assign Tm_5_fu_282_p2 = (in_r_q1 ^ in_r_q0);

assign Tm_6_fu_328_p2 = (t_reg_401 ^ in_r_q1);

assign Tm_fu_181_p2 = (t_reg_401 ^ in_load_reg_408);

assign Tmp_fu_191_p2 = (tmp_5_fu_185_p2 ^ in_r_q1);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

always @ (*) begin
    ap_block_state1 = ((ap_start == 1'b0) | (ap_done_reg == 1'b1));
end

assign i_fu_155_p2 = (5'd4 + i1_reg_116);

assign tmp1_fu_219_p2 = (tmp_2_i_cast_cast_ca_fu_211_p3 ^ t_reg_401);

assign tmp2_fu_224_p2 = (tmp_22_fu_197_p2 ^ Tmp_fu_191_p2);

assign tmp3_fu_264_p2 = (tmp_2_i20_cast_cast_s_fu_256_p3 ^ in_load_reg_408);

assign tmp4_fu_269_p2 = (tmp_24_fu_242_p2 ^ Tmp_fu_191_p2);

assign tmp5_fu_310_p2 = (tmp_2_i25_cast_cast_s_fu_302_p3 ^ in_r_q0);

assign tmp6_fu_316_p2 = (tmp_26_fu_288_p2 ^ Tmp_fu_191_p2);

assign tmp7_fu_355_p2 = (tmp_5_fu_185_p2 ^ tmp_28_fu_333_p2);

assign tmp_10_fu_230_p2 = (tmp2_fu_224_p2 ^ tmp1_fu_219_p2);

assign tmp_12_fu_275_p2 = (tmp4_fu_269_p2 ^ tmp3_fu_264_p2);

assign tmp_13_fu_322_p2 = (tmp6_fu_316_p2 ^ tmp5_fu_310_p2);

assign tmp_14_fu_361_p2 = (tmp_2_i30_cast_cast_s_fu_347_p3 ^ tmp7_fu_355_p2);

assign tmp_1_fu_161_p2 = (tmp_21_reg_380 | 4'd2);

assign tmp_21_fu_140_p1 = i1_reg_116[3:0];

assign tmp_22_fu_197_p2 = Tm_fu_181_p2 << 8'd1;

assign tmp_23_fu_203_p3 = Tm_fu_181_p2[32'd7];

assign tmp_24_fu_242_p2 = Tm_4_fu_237_p2 << 8'd1;

assign tmp_25_fu_248_p3 = Tm_4_fu_237_p2[32'd7];

assign tmp_26_fu_288_p2 = Tm_5_fu_282_p2 << 8'd1;

assign tmp_27_fu_294_p3 = Tm_5_fu_282_p2[32'd7];

assign tmp_28_fu_333_p2 = Tm_6_fu_328_p2 << 8'd1;

assign tmp_29_fu_339_p3 = Tm_6_fu_328_p2[32'd7];

assign tmp_2_fu_166_p1 = tmp_1_fu_161_p2;

assign tmp_2_i20_cast_cast_s_fu_256_p3 = ((tmp_25_fu_248_p3[0:0] === 1'b1) ? 8'd27 : 8'd0);

assign tmp_2_i25_cast_cast_s_fu_302_p3 = ((tmp_27_fu_294_p3[0:0] === 1'b1) ? 8'd27 : 8'd0);

assign tmp_2_i30_cast_cast_s_fu_347_p3 = ((tmp_29_fu_339_p3[0:0] === 1'b1) ? 8'd27 : 8'd0);

assign tmp_2_i_cast_cast_ca_fu_211_p3 = ((tmp_23_fu_203_p3[0:0] === 1'b1) ? 8'd27 : 8'd0);

assign tmp_3_fu_171_p2 = (tmp_21_reg_380 | 4'd3);

assign tmp_4_fu_176_p1 = tmp_3_fu_171_p2;

assign tmp_5_fu_185_p2 = (in_r_q0 ^ Tm_fu_181_p2);

assign tmp_7_fu_135_p1 = i1_reg_116;

assign tmp_9_fu_144_p2 = (tmp_21_fu_140_p1 | 4'd1);

assign tmp_fu_127_p3 = i1_reg_116[32'd4];

assign tmp_s_fu_150_p1 = tmp_9_fu_144_p2;

always @ (posedge ap_clk) begin
    tmp_7_reg_370[63:5] <= 59'b00000000000000000000000000000000000000000000000000000000000;
    tmp_s_reg_386[0] <= 1'b1;
    tmp_s_reg_386[63:4] <= 60'b000000000000000000000000000000000000000000000000000000000000;
    tmp_2_reg_415[1] <= 1'b1;
    tmp_2_reg_415[63:4] <= 60'b000000000000000000000000000000000000000000000000000000000000;
    tmp_4_reg_425[1:0] <= 2'b11;
    tmp_4_reg_425[63:4] <= 60'b000000000000000000000000000000000000000000000000000000000000;
end

endmodule //MixColumns46
