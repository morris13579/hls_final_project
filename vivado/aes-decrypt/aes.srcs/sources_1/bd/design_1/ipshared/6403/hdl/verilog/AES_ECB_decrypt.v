// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.3
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="AES_ECB_decrypt,hls_ip_2018_3,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=1,HLS_INPUT_PART=xc7z020clg484-1,HLS_INPUT_CLOCK=5.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=4.356000,HLS_SYN_LAT=1872,HLS_SYN_TPT=none,HLS_SYN_MEM=31,HLS_SYN_DSP=0,HLS_SYN_FF=2980,HLS_SYN_LUT=11519,HLS_VERSION=2018_3}" *)

module AES_ECB_decrypt (
        ap_clk,
        ap_rst_n,
        encrypt_TDATA,
        encrypt_TVALID,
        encrypt_TREADY,
        encrypt_TKEEP,
        encrypt_TSTRB,
        encrypt_TUSER,
        encrypt_TLAST,
        encrypt_TID,
        encrypt_TDEST,
        plain_TDATA,
        plain_TVALID,
        plain_TREADY,
        plain_TKEEP,
        plain_TSTRB,
        plain_TUSER,
        plain_TLAST,
        plain_TID,
        plain_TDEST,
        s_axi_AXILiteS_AWVALID,
        s_axi_AXILiteS_AWREADY,
        s_axi_AXILiteS_AWADDR,
        s_axi_AXILiteS_WVALID,
        s_axi_AXILiteS_WREADY,
        s_axi_AXILiteS_WDATA,
        s_axi_AXILiteS_WSTRB,
        s_axi_AXILiteS_ARVALID,
        s_axi_AXILiteS_ARREADY,
        s_axi_AXILiteS_ARADDR,
        s_axi_AXILiteS_RVALID,
        s_axi_AXILiteS_RREADY,
        s_axi_AXILiteS_RDATA,
        s_axi_AXILiteS_RRESP,
        s_axi_AXILiteS_BVALID,
        s_axi_AXILiteS_BREADY,
        s_axi_AXILiteS_BRESP,
        interrupt
);

parameter    ap_ST_fsm_state1 = 7'd1;
parameter    ap_ST_fsm_state2 = 7'd2;
parameter    ap_ST_fsm_state3 = 7'd4;
parameter    ap_ST_fsm_state4 = 7'd8;
parameter    ap_ST_fsm_state5 = 7'd16;
parameter    ap_ST_fsm_state6 = 7'd32;
parameter    ap_ST_fsm_state7 = 7'd64;
parameter    C_S_AXI_AXILITES_DATA_WIDTH = 32;
parameter    C_S_AXI_AXILITES_ADDR_WIDTH = 10;
parameter    C_S_AXI_DATA_WIDTH = 32;

parameter C_S_AXI_AXILITES_WSTRB_WIDTH = (32 / 8);
parameter C_S_AXI_WSTRB_WIDTH = (32 / 8);

input   ap_clk;
input   ap_rst_n;
input  [7:0] encrypt_TDATA;
input   encrypt_TVALID;
output   encrypt_TREADY;
input  [0:0] encrypt_TKEEP;
input  [0:0] encrypt_TSTRB;
input  [0:0] encrypt_TUSER;
input  [0:0] encrypt_TLAST;
input  [0:0] encrypt_TID;
input  [0:0] encrypt_TDEST;
output  [7:0] plain_TDATA;
output   plain_TVALID;
input   plain_TREADY;
output  [0:0] plain_TKEEP;
output  [0:0] plain_TSTRB;
output  [0:0] plain_TUSER;
output  [0:0] plain_TLAST;
output  [0:0] plain_TID;
output  [0:0] plain_TDEST;
input   s_axi_AXILiteS_AWVALID;
output   s_axi_AXILiteS_AWREADY;
input  [C_S_AXI_AXILITES_ADDR_WIDTH - 1:0] s_axi_AXILiteS_AWADDR;
input   s_axi_AXILiteS_WVALID;
output   s_axi_AXILiteS_WREADY;
input  [C_S_AXI_AXILITES_DATA_WIDTH - 1:0] s_axi_AXILiteS_WDATA;
input  [C_S_AXI_AXILITES_WSTRB_WIDTH - 1:0] s_axi_AXILiteS_WSTRB;
input   s_axi_AXILiteS_ARVALID;
output   s_axi_AXILiteS_ARREADY;
input  [C_S_AXI_AXILITES_ADDR_WIDTH - 1:0] s_axi_AXILiteS_ARADDR;
output   s_axi_AXILiteS_RVALID;
input   s_axi_AXILiteS_RREADY;
output  [C_S_AXI_AXILITES_DATA_WIDTH - 1:0] s_axi_AXILiteS_RDATA;
output  [1:0] s_axi_AXILiteS_RRESP;
output   s_axi_AXILiteS_BVALID;
input   s_axi_AXILiteS_BREADY;
output  [1:0] s_axi_AXILiteS_BRESP;
output   interrupt;

 reg    ap_rst_n_inv;
wire    ap_start;
reg    ap_done;
reg    ap_idle;
(* fsm_encoding = "none" *) reg   [6:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    ap_ready;
reg   [7:0] encrypt_V_data_V_0_data_out;
wire    encrypt_V_data_V_0_vld_in;
wire    encrypt_V_data_V_0_vld_out;
wire    encrypt_V_data_V_0_ack_in;
reg    encrypt_V_data_V_0_ack_out;
reg   [7:0] encrypt_V_data_V_0_payload_A;
reg   [7:0] encrypt_V_data_V_0_payload_B;
reg    encrypt_V_data_V_0_sel_rd;
reg    encrypt_V_data_V_0_sel_wr;
wire    encrypt_V_data_V_0_sel;
wire    encrypt_V_data_V_0_load_A;
wire    encrypt_V_data_V_0_load_B;
reg   [1:0] encrypt_V_data_V_0_state;
wire    encrypt_V_data_V_0_state_cmp_full;
reg   [0:0] encrypt_V_keep_V_0_data_out;
wire    encrypt_V_keep_V_0_vld_in;
wire    encrypt_V_keep_V_0_vld_out;
wire    encrypt_V_keep_V_0_ack_in;
reg    encrypt_V_keep_V_0_ack_out;
reg   [0:0] encrypt_V_keep_V_0_payload_A;
reg   [0:0] encrypt_V_keep_V_0_payload_B;
reg    encrypt_V_keep_V_0_sel_rd;
reg    encrypt_V_keep_V_0_sel_wr;
wire    encrypt_V_keep_V_0_sel;
wire    encrypt_V_keep_V_0_load_A;
wire    encrypt_V_keep_V_0_load_B;
reg   [1:0] encrypt_V_keep_V_0_state;
wire    encrypt_V_keep_V_0_state_cmp_full;
reg   [0:0] encrypt_V_strb_V_0_data_out;
wire    encrypt_V_strb_V_0_vld_in;
wire    encrypt_V_strb_V_0_vld_out;
wire    encrypt_V_strb_V_0_ack_in;
reg    encrypt_V_strb_V_0_ack_out;
reg   [0:0] encrypt_V_strb_V_0_payload_A;
reg   [0:0] encrypt_V_strb_V_0_payload_B;
reg    encrypt_V_strb_V_0_sel_rd;
reg    encrypt_V_strb_V_0_sel_wr;
wire    encrypt_V_strb_V_0_sel;
wire    encrypt_V_strb_V_0_load_A;
wire    encrypt_V_strb_V_0_load_B;
reg   [1:0] encrypt_V_strb_V_0_state;
wire    encrypt_V_strb_V_0_state_cmp_full;
reg   [0:0] encrypt_V_user_V_0_data_out;
wire    encrypt_V_user_V_0_vld_in;
wire    encrypt_V_user_V_0_vld_out;
wire    encrypt_V_user_V_0_ack_in;
reg    encrypt_V_user_V_0_ack_out;
reg   [0:0] encrypt_V_user_V_0_payload_A;
reg   [0:0] encrypt_V_user_V_0_payload_B;
reg    encrypt_V_user_V_0_sel_rd;
reg    encrypt_V_user_V_0_sel_wr;
wire    encrypt_V_user_V_0_sel;
wire    encrypt_V_user_V_0_load_A;
wire    encrypt_V_user_V_0_load_B;
reg   [1:0] encrypt_V_user_V_0_state;
wire    encrypt_V_user_V_0_state_cmp_full;
reg   [0:0] encrypt_V_last_V_0_data_out;
wire    encrypt_V_last_V_0_vld_in;
wire    encrypt_V_last_V_0_vld_out;
wire    encrypt_V_last_V_0_ack_in;
reg    encrypt_V_last_V_0_ack_out;
reg   [0:0] encrypt_V_last_V_0_payload_A;
reg   [0:0] encrypt_V_last_V_0_payload_B;
reg    encrypt_V_last_V_0_sel_rd;
reg    encrypt_V_last_V_0_sel_wr;
wire    encrypt_V_last_V_0_sel;
wire    encrypt_V_last_V_0_load_A;
wire    encrypt_V_last_V_0_load_B;
reg   [1:0] encrypt_V_last_V_0_state;
wire    encrypt_V_last_V_0_state_cmp_full;
reg   [0:0] encrypt_V_id_V_0_data_out;
wire    encrypt_V_id_V_0_vld_in;
wire    encrypt_V_id_V_0_vld_out;
wire    encrypt_V_id_V_0_ack_in;
reg    encrypt_V_id_V_0_ack_out;
reg   [0:0] encrypt_V_id_V_0_payload_A;
reg   [0:0] encrypt_V_id_V_0_payload_B;
reg    encrypt_V_id_V_0_sel_rd;
reg    encrypt_V_id_V_0_sel_wr;
wire    encrypt_V_id_V_0_sel;
wire    encrypt_V_id_V_0_load_A;
wire    encrypt_V_id_V_0_load_B;
reg   [1:0] encrypt_V_id_V_0_state;
wire    encrypt_V_id_V_0_state_cmp_full;
reg   [0:0] encrypt_V_dest_V_0_data_out;
wire    encrypt_V_dest_V_0_vld_in;
wire    encrypt_V_dest_V_0_vld_out;
wire    encrypt_V_dest_V_0_ack_in;
reg    encrypt_V_dest_V_0_ack_out;
reg   [0:0] encrypt_V_dest_V_0_payload_A;
reg   [0:0] encrypt_V_dest_V_0_payload_B;
reg    encrypt_V_dest_V_0_sel_rd;
reg    encrypt_V_dest_V_0_sel_wr;
wire    encrypt_V_dest_V_0_sel;
wire    encrypt_V_dest_V_0_load_A;
wire    encrypt_V_dest_V_0_load_B;
reg   [1:0] encrypt_V_dest_V_0_state;
wire    encrypt_V_dest_V_0_state_cmp_full;
reg   [7:0] plain_V_data_V_1_data_out;
reg    plain_V_data_V_1_vld_in;
wire    plain_V_data_V_1_vld_out;
wire    plain_V_data_V_1_ack_in;
wire    plain_V_data_V_1_ack_out;
reg   [7:0] plain_V_data_V_1_payload_A;
reg   [7:0] plain_V_data_V_1_payload_B;
reg    plain_V_data_V_1_sel_rd;
reg    plain_V_data_V_1_sel_wr;
wire    plain_V_data_V_1_sel;
wire    plain_V_data_V_1_load_A;
wire    plain_V_data_V_1_load_B;
reg   [1:0] plain_V_data_V_1_state;
wire    plain_V_data_V_1_state_cmp_full;
reg   [0:0] plain_V_keep_V_1_data_out;
reg    plain_V_keep_V_1_vld_in;
wire    plain_V_keep_V_1_vld_out;
wire    plain_V_keep_V_1_ack_in;
wire    plain_V_keep_V_1_ack_out;
reg   [0:0] plain_V_keep_V_1_payload_A;
reg   [0:0] plain_V_keep_V_1_payload_B;
reg    plain_V_keep_V_1_sel_rd;
reg    plain_V_keep_V_1_sel_wr;
wire    plain_V_keep_V_1_sel;
wire    plain_V_keep_V_1_load_A;
wire    plain_V_keep_V_1_load_B;
reg   [1:0] plain_V_keep_V_1_state;
wire    plain_V_keep_V_1_state_cmp_full;
reg   [0:0] plain_V_strb_V_1_data_out;
reg    plain_V_strb_V_1_vld_in;
wire    plain_V_strb_V_1_vld_out;
wire    plain_V_strb_V_1_ack_in;
wire    plain_V_strb_V_1_ack_out;
reg   [0:0] plain_V_strb_V_1_payload_A;
reg   [0:0] plain_V_strb_V_1_payload_B;
reg    plain_V_strb_V_1_sel_rd;
reg    plain_V_strb_V_1_sel_wr;
wire    plain_V_strb_V_1_sel;
wire    plain_V_strb_V_1_load_A;
wire    plain_V_strb_V_1_load_B;
reg   [1:0] plain_V_strb_V_1_state;
wire    plain_V_strb_V_1_state_cmp_full;
reg   [0:0] plain_V_user_V_1_data_out;
reg    plain_V_user_V_1_vld_in;
wire    plain_V_user_V_1_vld_out;
wire    plain_V_user_V_1_ack_in;
wire    plain_V_user_V_1_ack_out;
reg   [0:0] plain_V_user_V_1_payload_A;
reg   [0:0] plain_V_user_V_1_payload_B;
reg    plain_V_user_V_1_sel_rd;
reg    plain_V_user_V_1_sel_wr;
wire    plain_V_user_V_1_sel;
wire    plain_V_user_V_1_load_A;
wire    plain_V_user_V_1_load_B;
reg   [1:0] plain_V_user_V_1_state;
wire    plain_V_user_V_1_state_cmp_full;
reg   [0:0] plain_V_last_V_1_data_out;
reg    plain_V_last_V_1_vld_in;
wire    plain_V_last_V_1_vld_out;
wire    plain_V_last_V_1_ack_in;
wire    plain_V_last_V_1_ack_out;
reg   [0:0] plain_V_last_V_1_payload_A;
reg   [0:0] plain_V_last_V_1_payload_B;
reg    plain_V_last_V_1_sel_rd;
reg    plain_V_last_V_1_sel_wr;
wire    plain_V_last_V_1_sel;
wire    plain_V_last_V_1_load_A;
wire    plain_V_last_V_1_load_B;
reg   [1:0] plain_V_last_V_1_state;
wire    plain_V_last_V_1_state_cmp_full;
reg   [0:0] plain_V_id_V_1_data_out;
reg    plain_V_id_V_1_vld_in;
wire    plain_V_id_V_1_vld_out;
wire    plain_V_id_V_1_ack_in;
wire    plain_V_id_V_1_ack_out;
reg   [0:0] plain_V_id_V_1_payload_A;
reg   [0:0] plain_V_id_V_1_payload_B;
reg    plain_V_id_V_1_sel_rd;
reg    plain_V_id_V_1_sel_wr;
wire    plain_V_id_V_1_sel;
wire    plain_V_id_V_1_load_A;
wire    plain_V_id_V_1_load_B;
reg   [1:0] plain_V_id_V_1_state;
wire    plain_V_id_V_1_state_cmp_full;
reg   [0:0] plain_V_dest_V_1_data_out;
reg    plain_V_dest_V_1_vld_in;
wire    plain_V_dest_V_1_vld_out;
wire    plain_V_dest_V_1_ack_in;
wire    plain_V_dest_V_1_ack_out;
reg   [0:0] plain_V_dest_V_1_payload_A;
reg   [0:0] plain_V_dest_V_1_payload_B;
reg    plain_V_dest_V_1_sel_rd;
reg    plain_V_dest_V_1_sel_wr;
wire    plain_V_dest_V_1_sel;
wire    plain_V_dest_V_1_load_A;
wire    plain_V_dest_V_1_load_B;
reg   [1:0] plain_V_dest_V_1_state;
wire    plain_V_dest_V_1_state_cmp_full;
wire   [7:0] key_V_q0;
wire   [31:0] length_r;
reg    encrypt_TDATA_blk_n;
wire    ap_CS_fsm_state3;
wire   [0:0] exitcond1_fu_403_p2;
reg    plain_TDATA_blk_n;
wire    ap_CS_fsm_state6;
wire    ap_CS_fsm_state7;
reg   [31:0] length_read_reg_490;
wire   [4:0] j_1_fu_409_p2;
reg    ap_block_state3;
wire   [4:0] j_2_fu_467_p2;
reg   [4:0] j_2_reg_509;
wire    ap_CS_fsm_state5;
wire   [0:0] exitcond_fu_461_p2;
wire   [31:0] i_2_fu_484_p2;
wire   [7:0] out_q0;
wire   [0:0] value_keep_V_q0;
wire   [0:0] value_strb_V_q0;
wire   [0:0] value_user_V_q0;
wire   [0:0] value_last_V_q0;
wire   [0:0] value_id_V_q0;
wire   [0:0] value_dest_V_q0;
reg   [3:0] value_keep_V_address0;
reg    value_keep_V_ce0;
reg    value_keep_V_we0;
reg   [3:0] value_strb_V_address0;
reg    value_strb_V_ce0;
reg    value_strb_V_we0;
reg   [3:0] value_user_V_address0;
reg    value_user_V_ce0;
reg    value_user_V_we0;
reg   [3:0] value_last_V_address0;
reg    value_last_V_ce0;
reg    value_last_V_we0;
reg   [3:0] value_id_V_address0;
reg    value_id_V_ce0;
reg    value_id_V_we0;
reg   [3:0] value_dest_V_address0;
reg    value_dest_V_ce0;
reg    value_dest_V_we0;
reg   [3:0] in_V_address0;
reg    in_V_ce0;
reg    in_V_we0;
wire   [7:0] in_V_q0;
reg   [3:0] out_address0;
reg    out_ce0;
reg    out_we0;
wire   [3:0] grp_InvCipher_fu_370_encrypt_V_address0;
wire    grp_InvCipher_fu_370_encrypt_V_ce0;
wire   [7:0] grp_InvCipher_fu_370_encrypt_V_d0;
wire    grp_InvCipher_fu_370_encrypt_V_we0;
wire   [3:0] grp_InvCipher_fu_370_encrypt_V_address1;
wire    grp_InvCipher_fu_370_encrypt_V_ce1;
wire   [7:0] grp_InvCipher_fu_370_encrypt_V_d1;
wire    grp_InvCipher_fu_370_encrypt_V_we1;
wire   [3:0] grp_InvCipher_fu_370_plain_V_address0;
wire    grp_InvCipher_fu_370_plain_V_ce0;
wire   [7:0] grp_InvCipher_fu_370_plain_V_d0;
wire    grp_InvCipher_fu_370_plain_V_we0;
wire   [3:0] grp_InvCipher_fu_370_plain_V_address1;
wire    grp_InvCipher_fu_370_plain_V_ce1;
wire   [7:0] grp_InvCipher_fu_370_plain_V_d1;
wire    grp_InvCipher_fu_370_plain_V_we1;
wire   [7:0] grp_InvCipher_fu_370_key_V_address0;
wire    grp_InvCipher_fu_370_key_V_ce0;
wire   [7:0] grp_InvCipher_fu_370_key_V_d0;
wire    grp_InvCipher_fu_370_key_V_we0;
wire    grp_InvCipher_fu_370_ap_start;
wire    grp_InvCipher_fu_370_ap_done;
wire    grp_InvCipher_fu_370_ap_ready;
wire    grp_InvCipher_fu_370_ap_idle;
reg    grp_InvCipher_fu_370_ap_continue;
reg   [31:0] i_reg_336;
reg   [4:0] j_reg_348;
wire    ap_CS_fsm_state2;
reg    ap_block_state2;
wire   [0:0] tmp_fu_398_p2;
reg   [4:0] j3_reg_359;
wire    ap_CS_fsm_state4;
wire    ap_sync_grp_InvCipher_fu_370_ap_ready;
wire    ap_sync_grp_InvCipher_fu_370_ap_done;
reg    ap_block_state4_on_subcall_done;
reg    grp_InvCipher_fu_370_ap_start_reg;
reg    ap_block_state3_ignore_call0;
reg    ap_sync_reg_grp_InvCipher_fu_370_ap_ready;
reg    ap_sync_reg_grp_InvCipher_fu_370_ap_done;
wire   [63:0] tmp_s_fu_415_p1;
wire   [63:0] tmp_38_fu_473_p1;
reg   [6:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 7'd1;
#0 encrypt_V_data_V_0_sel_rd = 1'b0;
#0 encrypt_V_data_V_0_sel_wr = 1'b0;
#0 encrypt_V_data_V_0_state = 2'd0;
#0 encrypt_V_keep_V_0_sel_rd = 1'b0;
#0 encrypt_V_keep_V_0_sel_wr = 1'b0;
#0 encrypt_V_keep_V_0_state = 2'd0;
#0 encrypt_V_strb_V_0_sel_rd = 1'b0;
#0 encrypt_V_strb_V_0_sel_wr = 1'b0;
#0 encrypt_V_strb_V_0_state = 2'd0;
#0 encrypt_V_user_V_0_sel_rd = 1'b0;
#0 encrypt_V_user_V_0_sel_wr = 1'b0;
#0 encrypt_V_user_V_0_state = 2'd0;
#0 encrypt_V_last_V_0_sel_rd = 1'b0;
#0 encrypt_V_last_V_0_sel_wr = 1'b0;
#0 encrypt_V_last_V_0_state = 2'd0;
#0 encrypt_V_id_V_0_sel_rd = 1'b0;
#0 encrypt_V_id_V_0_sel_wr = 1'b0;
#0 encrypt_V_id_V_0_state = 2'd0;
#0 encrypt_V_dest_V_0_sel_rd = 1'b0;
#0 encrypt_V_dest_V_0_sel_wr = 1'b0;
#0 encrypt_V_dest_V_0_state = 2'd0;
#0 plain_V_data_V_1_sel_rd = 1'b0;
#0 plain_V_data_V_1_sel_wr = 1'b0;
#0 plain_V_data_V_1_state = 2'd0;
#0 plain_V_keep_V_1_sel_rd = 1'b0;
#0 plain_V_keep_V_1_sel_wr = 1'b0;
#0 plain_V_keep_V_1_state = 2'd0;
#0 plain_V_strb_V_1_sel_rd = 1'b0;
#0 plain_V_strb_V_1_sel_wr = 1'b0;
#0 plain_V_strb_V_1_state = 2'd0;
#0 plain_V_user_V_1_sel_rd = 1'b0;
#0 plain_V_user_V_1_sel_wr = 1'b0;
#0 plain_V_user_V_1_state = 2'd0;
#0 plain_V_last_V_1_sel_rd = 1'b0;
#0 plain_V_last_V_1_sel_wr = 1'b0;
#0 plain_V_last_V_1_state = 2'd0;
#0 plain_V_id_V_1_sel_rd = 1'b0;
#0 plain_V_id_V_1_sel_wr = 1'b0;
#0 plain_V_id_V_1_state = 2'd0;
#0 plain_V_dest_V_1_sel_rd = 1'b0;
#0 plain_V_dest_V_1_sel_wr = 1'b0;
#0 plain_V_dest_V_1_state = 2'd0;
#0 grp_InvCipher_fu_370_ap_start_reg = 1'b0;
#0 ap_sync_reg_grp_InvCipher_fu_370_ap_ready = 1'b0;
#0 ap_sync_reg_grp_InvCipher_fu_370_ap_done = 1'b0;
end

AES_ECB_decrypt_AXILiteS_s_axi #(
    .C_S_AXI_ADDR_WIDTH( C_S_AXI_AXILITES_ADDR_WIDTH ),
    .C_S_AXI_DATA_WIDTH( C_S_AXI_AXILITES_DATA_WIDTH ))
AES_ECB_decrypt_AXILiteS_s_axi_U(
    .AWVALID(s_axi_AXILiteS_AWVALID),
    .AWREADY(s_axi_AXILiteS_AWREADY),
    .AWADDR(s_axi_AXILiteS_AWADDR),
    .WVALID(s_axi_AXILiteS_WVALID),
    .WREADY(s_axi_AXILiteS_WREADY),
    .WDATA(s_axi_AXILiteS_WDATA),
    .WSTRB(s_axi_AXILiteS_WSTRB),
    .ARVALID(s_axi_AXILiteS_ARVALID),
    .ARREADY(s_axi_AXILiteS_ARREADY),
    .ARADDR(s_axi_AXILiteS_ARADDR),
    .RVALID(s_axi_AXILiteS_RVALID),
    .RREADY(s_axi_AXILiteS_RREADY),
    .RDATA(s_axi_AXILiteS_RDATA),
    .RRESP(s_axi_AXILiteS_RRESP),
    .BVALID(s_axi_AXILiteS_BVALID),
    .BREADY(s_axi_AXILiteS_BREADY),
    .BRESP(s_axi_AXILiteS_BRESP),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .ap_start(ap_start),
    .interrupt(interrupt),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_idle(ap_idle),
    .key_V_address0(grp_InvCipher_fu_370_key_V_address0),
    .key_V_ce0(grp_InvCipher_fu_370_key_V_ce0),
    .key_V_q0(key_V_q0),
    .length_r(length_r)
);

AES_ECB_decrypt_vPgM #(
    .DataWidth( 1 ),
    .AddressRange( 16 ),
    .AddressWidth( 4 ))
value_keep_V_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(value_keep_V_address0),
    .ce0(value_keep_V_ce0),
    .we0(value_keep_V_we0),
    .d0(encrypt_V_keep_V_0_data_out),
    .q0(value_keep_V_q0)
);

AES_ECB_decrypt_vPgM #(
    .DataWidth( 1 ),
    .AddressRange( 16 ),
    .AddressWidth( 4 ))
value_strb_V_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(value_strb_V_address0),
    .ce0(value_strb_V_ce0),
    .we0(value_strb_V_we0),
    .d0(encrypt_V_strb_V_0_data_out),
    .q0(value_strb_V_q0)
);

AES_ECB_decrypt_vPgM #(
    .DataWidth( 1 ),
    .AddressRange( 16 ),
    .AddressWidth( 4 ))
value_user_V_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(value_user_V_address0),
    .ce0(value_user_V_ce0),
    .we0(value_user_V_we0),
    .d0(encrypt_V_user_V_0_data_out),
    .q0(value_user_V_q0)
);

AES_ECB_decrypt_vPgM #(
    .DataWidth( 1 ),
    .AddressRange( 16 ),
    .AddressWidth( 4 ))
value_last_V_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(value_last_V_address0),
    .ce0(value_last_V_ce0),
    .we0(value_last_V_we0),
    .d0(encrypt_V_last_V_0_data_out),
    .q0(value_last_V_q0)
);

AES_ECB_decrypt_vPgM #(
    .DataWidth( 1 ),
    .AddressRange( 16 ),
    .AddressWidth( 4 ))
value_id_V_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(value_id_V_address0),
    .ce0(value_id_V_ce0),
    .we0(value_id_V_we0),
    .d0(encrypt_V_id_V_0_data_out),
    .q0(value_id_V_q0)
);

AES_ECB_decrypt_vPgM #(
    .DataWidth( 1 ),
    .AddressRange( 16 ),
    .AddressWidth( 4 ))
value_dest_V_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(value_dest_V_address0),
    .ce0(value_dest_V_ce0),
    .we0(value_dest_V_we0),
    .d0(encrypt_V_dest_V_0_data_out),
    .q0(value_dest_V_q0)
);

AES_ECB_decrypt_iVhK #(
    .DataWidth( 8 ),
    .AddressRange( 16 ),
    .AddressWidth( 4 ))
in_V_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(in_V_address0),
    .ce0(in_V_ce0),
    .we0(in_V_we0),
    .d0(encrypt_V_data_V_0_data_out),
    .q0(in_V_q0)
);

AES_ECB_decrypt_iVhK #(
    .DataWidth( 8 ),
    .AddressRange( 16 ),
    .AddressWidth( 4 ))
out_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(out_address0),
    .ce0(out_ce0),
    .we0(out_we0),
    .d0(grp_InvCipher_fu_370_plain_V_d0),
    .q0(out_q0)
);

InvCipher grp_InvCipher_fu_370(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .encrypt_V_address0(grp_InvCipher_fu_370_encrypt_V_address0),
    .encrypt_V_ce0(grp_InvCipher_fu_370_encrypt_V_ce0),
    .encrypt_V_d0(grp_InvCipher_fu_370_encrypt_V_d0),
    .encrypt_V_q0(in_V_q0),
    .encrypt_V_we0(grp_InvCipher_fu_370_encrypt_V_we0),
    .encrypt_V_address1(grp_InvCipher_fu_370_encrypt_V_address1),
    .encrypt_V_ce1(grp_InvCipher_fu_370_encrypt_V_ce1),
    .encrypt_V_d1(grp_InvCipher_fu_370_encrypt_V_d1),
    .encrypt_V_q1(8'd0),
    .encrypt_V_we1(grp_InvCipher_fu_370_encrypt_V_we1),
    .plain_V_address0(grp_InvCipher_fu_370_plain_V_address0),
    .plain_V_ce0(grp_InvCipher_fu_370_plain_V_ce0),
    .plain_V_d0(grp_InvCipher_fu_370_plain_V_d0),
    .plain_V_q0(8'd0),
    .plain_V_we0(grp_InvCipher_fu_370_plain_V_we0),
    .plain_V_address1(grp_InvCipher_fu_370_plain_V_address1),
    .plain_V_ce1(grp_InvCipher_fu_370_plain_V_ce1),
    .plain_V_d1(grp_InvCipher_fu_370_plain_V_d1),
    .plain_V_q1(8'd0),
    .plain_V_we1(grp_InvCipher_fu_370_plain_V_we1),
    .key_V_address0(grp_InvCipher_fu_370_key_V_address0),
    .key_V_ce0(grp_InvCipher_fu_370_key_V_ce0),
    .key_V_d0(grp_InvCipher_fu_370_key_V_d0),
    .key_V_q0(key_V_q0),
    .key_V_we0(grp_InvCipher_fu_370_key_V_we0),
    .ap_start(grp_InvCipher_fu_370_ap_start),
    .ap_done(grp_InvCipher_fu_370_ap_done),
    .ap_ready(grp_InvCipher_fu_370_ap_ready),
    .ap_idle(grp_InvCipher_fu_370_ap_idle),
    .ap_continue(grp_InvCipher_fu_370_ap_continue)
);

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_sync_reg_grp_InvCipher_fu_370_ap_done <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_state4) & (1'b0 == ap_block_state4_on_subcall_done))) begin
            ap_sync_reg_grp_InvCipher_fu_370_ap_done <= 1'b0;
        end else if ((grp_InvCipher_fu_370_ap_done == 1'b1)) begin
            ap_sync_reg_grp_InvCipher_fu_370_ap_done <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_sync_reg_grp_InvCipher_fu_370_ap_ready <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_state4) & (1'b0 == ap_block_state4_on_subcall_done))) begin
            ap_sync_reg_grp_InvCipher_fu_370_ap_ready <= 1'b0;
        end else if ((grp_InvCipher_fu_370_ap_ready == 1'b1)) begin
            ap_sync_reg_grp_InvCipher_fu_370_ap_ready <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        encrypt_V_data_V_0_sel_rd <= 1'b0;
    end else begin
        if (((encrypt_V_data_V_0_ack_out == 1'b1) & (encrypt_V_data_V_0_vld_out == 1'b1))) begin
            encrypt_V_data_V_0_sel_rd <= ~encrypt_V_data_V_0_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        encrypt_V_data_V_0_sel_wr <= 1'b0;
    end else begin
        if (((encrypt_V_data_V_0_ack_in == 1'b1) & (encrypt_V_data_V_0_vld_in == 1'b1))) begin
            encrypt_V_data_V_0_sel_wr <= ~encrypt_V_data_V_0_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        encrypt_V_data_V_0_state <= 2'd0;
    end else begin
        if ((((encrypt_V_data_V_0_state == 2'd2) & (encrypt_V_data_V_0_vld_in == 1'b0)) | ((encrypt_V_data_V_0_state == 2'd3) & (encrypt_V_data_V_0_vld_in == 1'b0) & (encrypt_V_data_V_0_ack_out == 1'b1)))) begin
            encrypt_V_data_V_0_state <= 2'd2;
        end else if ((((encrypt_V_data_V_0_state == 2'd1) & (encrypt_V_data_V_0_ack_out == 1'b0)) | ((encrypt_V_data_V_0_state == 2'd3) & (encrypt_V_data_V_0_ack_out == 1'b0) & (encrypt_V_data_V_0_vld_in == 1'b1)))) begin
            encrypt_V_data_V_0_state <= 2'd1;
        end else if (((~((encrypt_V_data_V_0_vld_in == 1'b0) & (encrypt_V_data_V_0_ack_out == 1'b1)) & ~((encrypt_V_data_V_0_ack_out == 1'b0) & (encrypt_V_data_V_0_vld_in == 1'b1)) & (encrypt_V_data_V_0_state == 2'd3)) | ((encrypt_V_data_V_0_state == 2'd1) & (encrypt_V_data_V_0_ack_out == 1'b1)) | ((encrypt_V_data_V_0_state == 2'd2) & (encrypt_V_data_V_0_vld_in == 1'b1)))) begin
            encrypt_V_data_V_0_state <= 2'd3;
        end else begin
            encrypt_V_data_V_0_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        encrypt_V_dest_V_0_sel_rd <= 1'b0;
    end else begin
        if (((encrypt_V_dest_V_0_ack_out == 1'b1) & (encrypt_V_dest_V_0_vld_out == 1'b1))) begin
            encrypt_V_dest_V_0_sel_rd <= ~encrypt_V_dest_V_0_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        encrypt_V_dest_V_0_sel_wr <= 1'b0;
    end else begin
        if (((encrypt_V_dest_V_0_ack_in == 1'b1) & (encrypt_V_dest_V_0_vld_in == 1'b1))) begin
            encrypt_V_dest_V_0_sel_wr <= ~encrypt_V_dest_V_0_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        encrypt_V_dest_V_0_state <= 2'd0;
    end else begin
        if ((((encrypt_V_dest_V_0_state == 2'd2) & (encrypt_V_dest_V_0_vld_in == 1'b0)) | ((encrypt_V_dest_V_0_state == 2'd3) & (encrypt_V_dest_V_0_vld_in == 1'b0) & (encrypt_V_dest_V_0_ack_out == 1'b1)))) begin
            encrypt_V_dest_V_0_state <= 2'd2;
        end else if ((((encrypt_V_dest_V_0_state == 2'd1) & (encrypt_V_dest_V_0_ack_out == 1'b0)) | ((encrypt_V_dest_V_0_state == 2'd3) & (encrypt_V_dest_V_0_ack_out == 1'b0) & (encrypt_V_dest_V_0_vld_in == 1'b1)))) begin
            encrypt_V_dest_V_0_state <= 2'd1;
        end else if (((~((encrypt_V_dest_V_0_vld_in == 1'b0) & (encrypt_V_dest_V_0_ack_out == 1'b1)) & ~((encrypt_V_dest_V_0_ack_out == 1'b0) & (encrypt_V_dest_V_0_vld_in == 1'b1)) & (encrypt_V_dest_V_0_state == 2'd3)) | ((encrypt_V_dest_V_0_state == 2'd1) & (encrypt_V_dest_V_0_ack_out == 1'b1)) | ((encrypt_V_dest_V_0_state == 2'd2) & (encrypt_V_dest_V_0_vld_in == 1'b1)))) begin
            encrypt_V_dest_V_0_state <= 2'd3;
        end else begin
            encrypt_V_dest_V_0_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        encrypt_V_id_V_0_sel_rd <= 1'b0;
    end else begin
        if (((encrypt_V_id_V_0_ack_out == 1'b1) & (encrypt_V_id_V_0_vld_out == 1'b1))) begin
            encrypt_V_id_V_0_sel_rd <= ~encrypt_V_id_V_0_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        encrypt_V_id_V_0_sel_wr <= 1'b0;
    end else begin
        if (((encrypt_V_id_V_0_ack_in == 1'b1) & (encrypt_V_id_V_0_vld_in == 1'b1))) begin
            encrypt_V_id_V_0_sel_wr <= ~encrypt_V_id_V_0_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        encrypt_V_id_V_0_state <= 2'd0;
    end else begin
        if ((((encrypt_V_id_V_0_state == 2'd2) & (encrypt_V_id_V_0_vld_in == 1'b0)) | ((encrypt_V_id_V_0_state == 2'd3) & (encrypt_V_id_V_0_vld_in == 1'b0) & (encrypt_V_id_V_0_ack_out == 1'b1)))) begin
            encrypt_V_id_V_0_state <= 2'd2;
        end else if ((((encrypt_V_id_V_0_state == 2'd1) & (encrypt_V_id_V_0_ack_out == 1'b0)) | ((encrypt_V_id_V_0_state == 2'd3) & (encrypt_V_id_V_0_ack_out == 1'b0) & (encrypt_V_id_V_0_vld_in == 1'b1)))) begin
            encrypt_V_id_V_0_state <= 2'd1;
        end else if (((~((encrypt_V_id_V_0_vld_in == 1'b0) & (encrypt_V_id_V_0_ack_out == 1'b1)) & ~((encrypt_V_id_V_0_ack_out == 1'b0) & (encrypt_V_id_V_0_vld_in == 1'b1)) & (encrypt_V_id_V_0_state == 2'd3)) | ((encrypt_V_id_V_0_state == 2'd1) & (encrypt_V_id_V_0_ack_out == 1'b1)) | ((encrypt_V_id_V_0_state == 2'd2) & (encrypt_V_id_V_0_vld_in == 1'b1)))) begin
            encrypt_V_id_V_0_state <= 2'd3;
        end else begin
            encrypt_V_id_V_0_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        encrypt_V_keep_V_0_sel_rd <= 1'b0;
    end else begin
        if (((encrypt_V_keep_V_0_ack_out == 1'b1) & (encrypt_V_keep_V_0_vld_out == 1'b1))) begin
            encrypt_V_keep_V_0_sel_rd <= ~encrypt_V_keep_V_0_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        encrypt_V_keep_V_0_sel_wr <= 1'b0;
    end else begin
        if (((encrypt_V_keep_V_0_ack_in == 1'b1) & (encrypt_V_keep_V_0_vld_in == 1'b1))) begin
            encrypt_V_keep_V_0_sel_wr <= ~encrypt_V_keep_V_0_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        encrypt_V_keep_V_0_state <= 2'd0;
    end else begin
        if ((((encrypt_V_keep_V_0_state == 2'd2) & (encrypt_V_keep_V_0_vld_in == 1'b0)) | ((encrypt_V_keep_V_0_state == 2'd3) & (encrypt_V_keep_V_0_vld_in == 1'b0) & (encrypt_V_keep_V_0_ack_out == 1'b1)))) begin
            encrypt_V_keep_V_0_state <= 2'd2;
        end else if ((((encrypt_V_keep_V_0_state == 2'd1) & (encrypt_V_keep_V_0_ack_out == 1'b0)) | ((encrypt_V_keep_V_0_state == 2'd3) & (encrypt_V_keep_V_0_ack_out == 1'b0) & (encrypt_V_keep_V_0_vld_in == 1'b1)))) begin
            encrypt_V_keep_V_0_state <= 2'd1;
        end else if (((~((encrypt_V_keep_V_0_vld_in == 1'b0) & (encrypt_V_keep_V_0_ack_out == 1'b1)) & ~((encrypt_V_keep_V_0_ack_out == 1'b0) & (encrypt_V_keep_V_0_vld_in == 1'b1)) & (encrypt_V_keep_V_0_state == 2'd3)) | ((encrypt_V_keep_V_0_state == 2'd1) & (encrypt_V_keep_V_0_ack_out == 1'b1)) | ((encrypt_V_keep_V_0_state == 2'd2) & (encrypt_V_keep_V_0_vld_in == 1'b1)))) begin
            encrypt_V_keep_V_0_state <= 2'd3;
        end else begin
            encrypt_V_keep_V_0_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        encrypt_V_last_V_0_sel_rd <= 1'b0;
    end else begin
        if (((encrypt_V_last_V_0_ack_out == 1'b1) & (encrypt_V_last_V_0_vld_out == 1'b1))) begin
            encrypt_V_last_V_0_sel_rd <= ~encrypt_V_last_V_0_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        encrypt_V_last_V_0_sel_wr <= 1'b0;
    end else begin
        if (((encrypt_V_last_V_0_ack_in == 1'b1) & (encrypt_V_last_V_0_vld_in == 1'b1))) begin
            encrypt_V_last_V_0_sel_wr <= ~encrypt_V_last_V_0_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        encrypt_V_last_V_0_state <= 2'd0;
    end else begin
        if ((((encrypt_V_last_V_0_state == 2'd2) & (encrypt_V_last_V_0_vld_in == 1'b0)) | ((encrypt_V_last_V_0_state == 2'd3) & (encrypt_V_last_V_0_vld_in == 1'b0) & (encrypt_V_last_V_0_ack_out == 1'b1)))) begin
            encrypt_V_last_V_0_state <= 2'd2;
        end else if ((((encrypt_V_last_V_0_state == 2'd1) & (encrypt_V_last_V_0_ack_out == 1'b0)) | ((encrypt_V_last_V_0_state == 2'd3) & (encrypt_V_last_V_0_ack_out == 1'b0) & (encrypt_V_last_V_0_vld_in == 1'b1)))) begin
            encrypt_V_last_V_0_state <= 2'd1;
        end else if (((~((encrypt_V_last_V_0_vld_in == 1'b0) & (encrypt_V_last_V_0_ack_out == 1'b1)) & ~((encrypt_V_last_V_0_ack_out == 1'b0) & (encrypt_V_last_V_0_vld_in == 1'b1)) & (encrypt_V_last_V_0_state == 2'd3)) | ((encrypt_V_last_V_0_state == 2'd1) & (encrypt_V_last_V_0_ack_out == 1'b1)) | ((encrypt_V_last_V_0_state == 2'd2) & (encrypt_V_last_V_0_vld_in == 1'b1)))) begin
            encrypt_V_last_V_0_state <= 2'd3;
        end else begin
            encrypt_V_last_V_0_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        encrypt_V_strb_V_0_sel_rd <= 1'b0;
    end else begin
        if (((encrypt_V_strb_V_0_ack_out == 1'b1) & (encrypt_V_strb_V_0_vld_out == 1'b1))) begin
            encrypt_V_strb_V_0_sel_rd <= ~encrypt_V_strb_V_0_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        encrypt_V_strb_V_0_sel_wr <= 1'b0;
    end else begin
        if (((encrypt_V_strb_V_0_ack_in == 1'b1) & (encrypt_V_strb_V_0_vld_in == 1'b1))) begin
            encrypt_V_strb_V_0_sel_wr <= ~encrypt_V_strb_V_0_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        encrypt_V_strb_V_0_state <= 2'd0;
    end else begin
        if ((((encrypt_V_strb_V_0_state == 2'd2) & (encrypt_V_strb_V_0_vld_in == 1'b0)) | ((encrypt_V_strb_V_0_state == 2'd3) & (encrypt_V_strb_V_0_vld_in == 1'b0) & (encrypt_V_strb_V_0_ack_out == 1'b1)))) begin
            encrypt_V_strb_V_0_state <= 2'd2;
        end else if ((((encrypt_V_strb_V_0_state == 2'd1) & (encrypt_V_strb_V_0_ack_out == 1'b0)) | ((encrypt_V_strb_V_0_state == 2'd3) & (encrypt_V_strb_V_0_ack_out == 1'b0) & (encrypt_V_strb_V_0_vld_in == 1'b1)))) begin
            encrypt_V_strb_V_0_state <= 2'd1;
        end else if (((~((encrypt_V_strb_V_0_vld_in == 1'b0) & (encrypt_V_strb_V_0_ack_out == 1'b1)) & ~((encrypt_V_strb_V_0_ack_out == 1'b0) & (encrypt_V_strb_V_0_vld_in == 1'b1)) & (encrypt_V_strb_V_0_state == 2'd3)) | ((encrypt_V_strb_V_0_state == 2'd1) & (encrypt_V_strb_V_0_ack_out == 1'b1)) | ((encrypt_V_strb_V_0_state == 2'd2) & (encrypt_V_strb_V_0_vld_in == 1'b1)))) begin
            encrypt_V_strb_V_0_state <= 2'd3;
        end else begin
            encrypt_V_strb_V_0_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        encrypt_V_user_V_0_sel_rd <= 1'b0;
    end else begin
        if (((encrypt_V_user_V_0_ack_out == 1'b1) & (encrypt_V_user_V_0_vld_out == 1'b1))) begin
            encrypt_V_user_V_0_sel_rd <= ~encrypt_V_user_V_0_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        encrypt_V_user_V_0_sel_wr <= 1'b0;
    end else begin
        if (((encrypt_V_user_V_0_ack_in == 1'b1) & (encrypt_V_user_V_0_vld_in == 1'b1))) begin
            encrypt_V_user_V_0_sel_wr <= ~encrypt_V_user_V_0_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        encrypt_V_user_V_0_state <= 2'd0;
    end else begin
        if ((((encrypt_V_user_V_0_state == 2'd2) & (encrypt_V_user_V_0_vld_in == 1'b0)) | ((encrypt_V_user_V_0_state == 2'd3) & (encrypt_V_user_V_0_vld_in == 1'b0) & (encrypt_V_user_V_0_ack_out == 1'b1)))) begin
            encrypt_V_user_V_0_state <= 2'd2;
        end else if ((((encrypt_V_user_V_0_state == 2'd1) & (encrypt_V_user_V_0_ack_out == 1'b0)) | ((encrypt_V_user_V_0_state == 2'd3) & (encrypt_V_user_V_0_ack_out == 1'b0) & (encrypt_V_user_V_0_vld_in == 1'b1)))) begin
            encrypt_V_user_V_0_state <= 2'd1;
        end else if (((~((encrypt_V_user_V_0_vld_in == 1'b0) & (encrypt_V_user_V_0_ack_out == 1'b1)) & ~((encrypt_V_user_V_0_ack_out == 1'b0) & (encrypt_V_user_V_0_vld_in == 1'b1)) & (encrypt_V_user_V_0_state == 2'd3)) | ((encrypt_V_user_V_0_state == 2'd1) & (encrypt_V_user_V_0_ack_out == 1'b1)) | ((encrypt_V_user_V_0_state == 2'd2) & (encrypt_V_user_V_0_vld_in == 1'b1)))) begin
            encrypt_V_user_V_0_state <= 2'd3;
        end else begin
            encrypt_V_user_V_0_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        grp_InvCipher_fu_370_ap_start_reg <= 1'b0;
    end else begin
        if (((~((exitcond1_fu_403_p2 == 1'd0) & (encrypt_V_data_V_0_vld_out == 1'b0)) & (exitcond1_fu_403_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3)) | ((ap_sync_grp_InvCipher_fu_370_ap_ready == 1'b0) & (1'b1 == ap_CS_fsm_state4)))) begin
            grp_InvCipher_fu_370_ap_start_reg <= 1'b1;
        end else if ((grp_InvCipher_fu_370_ap_ready == 1'b1)) begin
            grp_InvCipher_fu_370_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        plain_V_data_V_1_sel_rd <= 1'b0;
    end else begin
        if (((plain_V_data_V_1_ack_out == 1'b1) & (plain_V_data_V_1_vld_out == 1'b1))) begin
            plain_V_data_V_1_sel_rd <= ~plain_V_data_V_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        plain_V_data_V_1_sel_wr <= 1'b0;
    end else begin
        if (((plain_V_data_V_1_ack_in == 1'b1) & (plain_V_data_V_1_vld_in == 1'b1))) begin
            plain_V_data_V_1_sel_wr <= ~plain_V_data_V_1_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        plain_V_data_V_1_state <= 2'd0;
    end else begin
        if ((((plain_V_data_V_1_state == 2'd2) & (plain_V_data_V_1_vld_in == 1'b0)) | ((plain_V_data_V_1_state == 2'd3) & (plain_V_data_V_1_vld_in == 1'b0) & (plain_V_data_V_1_ack_out == 1'b1)))) begin
            plain_V_data_V_1_state <= 2'd2;
        end else if ((((plain_V_data_V_1_state == 2'd1) & (plain_V_data_V_1_ack_out == 1'b0)) | ((plain_V_data_V_1_state == 2'd3) & (plain_V_data_V_1_ack_out == 1'b0) & (plain_V_data_V_1_vld_in == 1'b1)))) begin
            plain_V_data_V_1_state <= 2'd1;
        end else if (((~((plain_V_data_V_1_vld_in == 1'b0) & (plain_V_data_V_1_ack_out == 1'b1)) & ~((plain_V_data_V_1_ack_out == 1'b0) & (plain_V_data_V_1_vld_in == 1'b1)) & (plain_V_data_V_1_state == 2'd3)) | ((plain_V_data_V_1_state == 2'd1) & (plain_V_data_V_1_ack_out == 1'b1)) | ((plain_V_data_V_1_state == 2'd2) & (plain_V_data_V_1_vld_in == 1'b1)))) begin
            plain_V_data_V_1_state <= 2'd3;
        end else begin
            plain_V_data_V_1_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        plain_V_dest_V_1_sel_rd <= 1'b0;
    end else begin
        if (((plain_V_dest_V_1_ack_out == 1'b1) & (plain_V_dest_V_1_vld_out == 1'b1))) begin
            plain_V_dest_V_1_sel_rd <= ~plain_V_dest_V_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        plain_V_dest_V_1_sel_wr <= 1'b0;
    end else begin
        if (((plain_V_dest_V_1_ack_in == 1'b1) & (plain_V_dest_V_1_vld_in == 1'b1))) begin
            plain_V_dest_V_1_sel_wr <= ~plain_V_dest_V_1_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        plain_V_dest_V_1_state <= 2'd0;
    end else begin
        if ((((plain_V_dest_V_1_state == 2'd2) & (plain_V_dest_V_1_vld_in == 1'b0)) | ((plain_V_dest_V_1_state == 2'd3) & (plain_V_dest_V_1_vld_in == 1'b0) & (plain_V_dest_V_1_ack_out == 1'b1)))) begin
            plain_V_dest_V_1_state <= 2'd2;
        end else if ((((plain_V_dest_V_1_state == 2'd1) & (plain_V_dest_V_1_ack_out == 1'b0)) | ((plain_V_dest_V_1_state == 2'd3) & (plain_V_dest_V_1_ack_out == 1'b0) & (plain_V_dest_V_1_vld_in == 1'b1)))) begin
            plain_V_dest_V_1_state <= 2'd1;
        end else if (((~((plain_V_dest_V_1_vld_in == 1'b0) & (plain_V_dest_V_1_ack_out == 1'b1)) & ~((plain_V_dest_V_1_ack_out == 1'b0) & (plain_V_dest_V_1_vld_in == 1'b1)) & (plain_V_dest_V_1_state == 2'd3)) | ((plain_V_dest_V_1_state == 2'd1) & (plain_V_dest_V_1_ack_out == 1'b1)) | ((plain_V_dest_V_1_state == 2'd2) & (plain_V_dest_V_1_vld_in == 1'b1)))) begin
            plain_V_dest_V_1_state <= 2'd3;
        end else begin
            plain_V_dest_V_1_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        plain_V_id_V_1_sel_rd <= 1'b0;
    end else begin
        if (((plain_V_id_V_1_ack_out == 1'b1) & (plain_V_id_V_1_vld_out == 1'b1))) begin
            plain_V_id_V_1_sel_rd <= ~plain_V_id_V_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        plain_V_id_V_1_sel_wr <= 1'b0;
    end else begin
        if (((plain_V_id_V_1_ack_in == 1'b1) & (plain_V_id_V_1_vld_in == 1'b1))) begin
            plain_V_id_V_1_sel_wr <= ~plain_V_id_V_1_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        plain_V_id_V_1_state <= 2'd0;
    end else begin
        if ((((plain_V_id_V_1_state == 2'd2) & (plain_V_id_V_1_vld_in == 1'b0)) | ((plain_V_id_V_1_state == 2'd3) & (plain_V_id_V_1_vld_in == 1'b0) & (plain_V_id_V_1_ack_out == 1'b1)))) begin
            plain_V_id_V_1_state <= 2'd2;
        end else if ((((plain_V_id_V_1_state == 2'd1) & (plain_V_id_V_1_ack_out == 1'b0)) | ((plain_V_id_V_1_state == 2'd3) & (plain_V_id_V_1_ack_out == 1'b0) & (plain_V_id_V_1_vld_in == 1'b1)))) begin
            plain_V_id_V_1_state <= 2'd1;
        end else if (((~((plain_V_id_V_1_vld_in == 1'b0) & (plain_V_id_V_1_ack_out == 1'b1)) & ~((plain_V_id_V_1_ack_out == 1'b0) & (plain_V_id_V_1_vld_in == 1'b1)) & (plain_V_id_V_1_state == 2'd3)) | ((plain_V_id_V_1_state == 2'd1) & (plain_V_id_V_1_ack_out == 1'b1)) | ((plain_V_id_V_1_state == 2'd2) & (plain_V_id_V_1_vld_in == 1'b1)))) begin
            plain_V_id_V_1_state <= 2'd3;
        end else begin
            plain_V_id_V_1_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        plain_V_keep_V_1_sel_rd <= 1'b0;
    end else begin
        if (((plain_V_keep_V_1_ack_out == 1'b1) & (plain_V_keep_V_1_vld_out == 1'b1))) begin
            plain_V_keep_V_1_sel_rd <= ~plain_V_keep_V_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        plain_V_keep_V_1_sel_wr <= 1'b0;
    end else begin
        if (((plain_V_keep_V_1_ack_in == 1'b1) & (plain_V_keep_V_1_vld_in == 1'b1))) begin
            plain_V_keep_V_1_sel_wr <= ~plain_V_keep_V_1_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        plain_V_keep_V_1_state <= 2'd0;
    end else begin
        if ((((plain_V_keep_V_1_state == 2'd2) & (plain_V_keep_V_1_vld_in == 1'b0)) | ((plain_V_keep_V_1_state == 2'd3) & (plain_V_keep_V_1_vld_in == 1'b0) & (plain_V_keep_V_1_ack_out == 1'b1)))) begin
            plain_V_keep_V_1_state <= 2'd2;
        end else if ((((plain_V_keep_V_1_state == 2'd1) & (plain_V_keep_V_1_ack_out == 1'b0)) | ((plain_V_keep_V_1_state == 2'd3) & (plain_V_keep_V_1_ack_out == 1'b0) & (plain_V_keep_V_1_vld_in == 1'b1)))) begin
            plain_V_keep_V_1_state <= 2'd1;
        end else if (((~((plain_V_keep_V_1_vld_in == 1'b0) & (plain_V_keep_V_1_ack_out == 1'b1)) & ~((plain_V_keep_V_1_ack_out == 1'b0) & (plain_V_keep_V_1_vld_in == 1'b1)) & (plain_V_keep_V_1_state == 2'd3)) | ((plain_V_keep_V_1_state == 2'd1) & (plain_V_keep_V_1_ack_out == 1'b1)) | ((plain_V_keep_V_1_state == 2'd2) & (plain_V_keep_V_1_vld_in == 1'b1)))) begin
            plain_V_keep_V_1_state <= 2'd3;
        end else begin
            plain_V_keep_V_1_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        plain_V_last_V_1_sel_rd <= 1'b0;
    end else begin
        if (((plain_V_last_V_1_ack_out == 1'b1) & (plain_V_last_V_1_vld_out == 1'b1))) begin
            plain_V_last_V_1_sel_rd <= ~plain_V_last_V_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        plain_V_last_V_1_sel_wr <= 1'b0;
    end else begin
        if (((plain_V_last_V_1_ack_in == 1'b1) & (plain_V_last_V_1_vld_in == 1'b1))) begin
            plain_V_last_V_1_sel_wr <= ~plain_V_last_V_1_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        plain_V_last_V_1_state <= 2'd0;
    end else begin
        if ((((plain_V_last_V_1_state == 2'd2) & (plain_V_last_V_1_vld_in == 1'b0)) | ((plain_V_last_V_1_state == 2'd3) & (plain_V_last_V_1_vld_in == 1'b0) & (plain_V_last_V_1_ack_out == 1'b1)))) begin
            plain_V_last_V_1_state <= 2'd2;
        end else if ((((plain_V_last_V_1_state == 2'd1) & (plain_V_last_V_1_ack_out == 1'b0)) | ((plain_V_last_V_1_state == 2'd3) & (plain_V_last_V_1_ack_out == 1'b0) & (plain_V_last_V_1_vld_in == 1'b1)))) begin
            plain_V_last_V_1_state <= 2'd1;
        end else if (((~((plain_V_last_V_1_vld_in == 1'b0) & (plain_V_last_V_1_ack_out == 1'b1)) & ~((plain_V_last_V_1_ack_out == 1'b0) & (plain_V_last_V_1_vld_in == 1'b1)) & (plain_V_last_V_1_state == 2'd3)) | ((plain_V_last_V_1_state == 2'd1) & (plain_V_last_V_1_ack_out == 1'b1)) | ((plain_V_last_V_1_state == 2'd2) & (plain_V_last_V_1_vld_in == 1'b1)))) begin
            plain_V_last_V_1_state <= 2'd3;
        end else begin
            plain_V_last_V_1_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        plain_V_strb_V_1_sel_rd <= 1'b0;
    end else begin
        if (((plain_V_strb_V_1_ack_out == 1'b1) & (plain_V_strb_V_1_vld_out == 1'b1))) begin
            plain_V_strb_V_1_sel_rd <= ~plain_V_strb_V_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        plain_V_strb_V_1_sel_wr <= 1'b0;
    end else begin
        if (((plain_V_strb_V_1_ack_in == 1'b1) & (plain_V_strb_V_1_vld_in == 1'b1))) begin
            plain_V_strb_V_1_sel_wr <= ~plain_V_strb_V_1_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        plain_V_strb_V_1_state <= 2'd0;
    end else begin
        if ((((plain_V_strb_V_1_state == 2'd2) & (plain_V_strb_V_1_vld_in == 1'b0)) | ((plain_V_strb_V_1_state == 2'd3) & (plain_V_strb_V_1_vld_in == 1'b0) & (plain_V_strb_V_1_ack_out == 1'b1)))) begin
            plain_V_strb_V_1_state <= 2'd2;
        end else if ((((plain_V_strb_V_1_state == 2'd1) & (plain_V_strb_V_1_ack_out == 1'b0)) | ((plain_V_strb_V_1_state == 2'd3) & (plain_V_strb_V_1_ack_out == 1'b0) & (plain_V_strb_V_1_vld_in == 1'b1)))) begin
            plain_V_strb_V_1_state <= 2'd1;
        end else if (((~((plain_V_strb_V_1_vld_in == 1'b0) & (plain_V_strb_V_1_ack_out == 1'b1)) & ~((plain_V_strb_V_1_ack_out == 1'b0) & (plain_V_strb_V_1_vld_in == 1'b1)) & (plain_V_strb_V_1_state == 2'd3)) | ((plain_V_strb_V_1_state == 2'd1) & (plain_V_strb_V_1_ack_out == 1'b1)) | ((plain_V_strb_V_1_state == 2'd2) & (plain_V_strb_V_1_vld_in == 1'b1)))) begin
            plain_V_strb_V_1_state <= 2'd3;
        end else begin
            plain_V_strb_V_1_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        plain_V_user_V_1_sel_rd <= 1'b0;
    end else begin
        if (((plain_V_user_V_1_ack_out == 1'b1) & (plain_V_user_V_1_vld_out == 1'b1))) begin
            plain_V_user_V_1_sel_rd <= ~plain_V_user_V_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        plain_V_user_V_1_sel_wr <= 1'b0;
    end else begin
        if (((plain_V_user_V_1_ack_in == 1'b1) & (plain_V_user_V_1_vld_in == 1'b1))) begin
            plain_V_user_V_1_sel_wr <= ~plain_V_user_V_1_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        plain_V_user_V_1_state <= 2'd0;
    end else begin
        if ((((plain_V_user_V_1_state == 2'd2) & (plain_V_user_V_1_vld_in == 1'b0)) | ((plain_V_user_V_1_state == 2'd3) & (plain_V_user_V_1_vld_in == 1'b0) & (plain_V_user_V_1_ack_out == 1'b1)))) begin
            plain_V_user_V_1_state <= 2'd2;
        end else if ((((plain_V_user_V_1_state == 2'd1) & (plain_V_user_V_1_ack_out == 1'b0)) | ((plain_V_user_V_1_state == 2'd3) & (plain_V_user_V_1_ack_out == 1'b0) & (plain_V_user_V_1_vld_in == 1'b1)))) begin
            plain_V_user_V_1_state <= 2'd1;
        end else if (((~((plain_V_user_V_1_vld_in == 1'b0) & (plain_V_user_V_1_ack_out == 1'b1)) & ~((plain_V_user_V_1_ack_out == 1'b0) & (plain_V_user_V_1_vld_in == 1'b1)) & (plain_V_user_V_1_state == 2'd3)) | ((plain_V_user_V_1_state == 2'd1) & (plain_V_user_V_1_ack_out == 1'b1)) | ((plain_V_user_V_1_state == 2'd2) & (plain_V_user_V_1_vld_in == 1'b1)))) begin
            plain_V_user_V_1_state <= 2'd3;
        end else begin
            plain_V_user_V_1_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        i_reg_336 <= 32'd0;
    end else if (((exitcond_fu_461_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state5))) begin
        i_reg_336 <= i_2_fu_484_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((plain_V_data_V_1_ack_in == 1'b1) & (1'b1 == ap_CS_fsm_state7))) begin
        j3_reg_359 <= j_2_reg_509;
    end else if (((1'b1 == ap_CS_fsm_state4) & (1'b0 == ap_block_state4_on_subcall_done))) begin
        j3_reg_359 <= 5'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((~((plain_V_dest_V_1_ack_in == 1'b0) | (plain_V_id_V_1_ack_in == 1'b0) | (plain_V_last_V_1_ack_in == 1'b0) | (plain_V_user_V_1_ack_in == 1'b0) | (plain_V_strb_V_1_ack_in == 1'b0) | (plain_V_keep_V_1_ack_in == 1'b0) | (plain_V_data_V_1_ack_in == 1'b0)) & (tmp_fu_398_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        j_reg_348 <= 5'd0;
    end else if ((~((exitcond1_fu_403_p2 == 1'd0) & (encrypt_V_data_V_0_vld_out == 1'b0)) & (exitcond1_fu_403_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        j_reg_348 <= j_1_fu_409_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((encrypt_V_data_V_0_load_A == 1'b1)) begin
        encrypt_V_data_V_0_payload_A <= encrypt_TDATA;
    end
end

always @ (posedge ap_clk) begin
    if ((encrypt_V_data_V_0_load_B == 1'b1)) begin
        encrypt_V_data_V_0_payload_B <= encrypt_TDATA;
    end
end

always @ (posedge ap_clk) begin
    if ((encrypt_V_dest_V_0_load_A == 1'b1)) begin
        encrypt_V_dest_V_0_payload_A <= encrypt_TDEST;
    end
end

always @ (posedge ap_clk) begin
    if ((encrypt_V_dest_V_0_load_B == 1'b1)) begin
        encrypt_V_dest_V_0_payload_B <= encrypt_TDEST;
    end
end

always @ (posedge ap_clk) begin
    if ((encrypt_V_id_V_0_load_A == 1'b1)) begin
        encrypt_V_id_V_0_payload_A <= encrypt_TID;
    end
end

always @ (posedge ap_clk) begin
    if ((encrypt_V_id_V_0_load_B == 1'b1)) begin
        encrypt_V_id_V_0_payload_B <= encrypt_TID;
    end
end

always @ (posedge ap_clk) begin
    if ((encrypt_V_keep_V_0_load_A == 1'b1)) begin
        encrypt_V_keep_V_0_payload_A <= encrypt_TKEEP;
    end
end

always @ (posedge ap_clk) begin
    if ((encrypt_V_keep_V_0_load_B == 1'b1)) begin
        encrypt_V_keep_V_0_payload_B <= encrypt_TKEEP;
    end
end

always @ (posedge ap_clk) begin
    if ((encrypt_V_last_V_0_load_A == 1'b1)) begin
        encrypt_V_last_V_0_payload_A <= encrypt_TLAST;
    end
end

always @ (posedge ap_clk) begin
    if ((encrypt_V_last_V_0_load_B == 1'b1)) begin
        encrypt_V_last_V_0_payload_B <= encrypt_TLAST;
    end
end

always @ (posedge ap_clk) begin
    if ((encrypt_V_strb_V_0_load_A == 1'b1)) begin
        encrypt_V_strb_V_0_payload_A <= encrypt_TSTRB;
    end
end

always @ (posedge ap_clk) begin
    if ((encrypt_V_strb_V_0_load_B == 1'b1)) begin
        encrypt_V_strb_V_0_payload_B <= encrypt_TSTRB;
    end
end

always @ (posedge ap_clk) begin
    if ((encrypt_V_user_V_0_load_A == 1'b1)) begin
        encrypt_V_user_V_0_payload_A <= encrypt_TUSER;
    end
end

always @ (posedge ap_clk) begin
    if ((encrypt_V_user_V_0_load_B == 1'b1)) begin
        encrypt_V_user_V_0_payload_B <= encrypt_TUSER;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        j_2_reg_509 <= j_2_fu_467_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        length_read_reg_490 <= length_r;
    end
end

always @ (posedge ap_clk) begin
    if ((plain_V_data_V_1_load_A == 1'b1)) begin
        plain_V_data_V_1_payload_A <= out_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((plain_V_data_V_1_load_B == 1'b1)) begin
        plain_V_data_V_1_payload_B <= out_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((plain_V_dest_V_1_load_A == 1'b1)) begin
        plain_V_dest_V_1_payload_A <= value_dest_V_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((plain_V_dest_V_1_load_B == 1'b1)) begin
        plain_V_dest_V_1_payload_B <= value_dest_V_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((plain_V_id_V_1_load_A == 1'b1)) begin
        plain_V_id_V_1_payload_A <= value_id_V_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((plain_V_id_V_1_load_B == 1'b1)) begin
        plain_V_id_V_1_payload_B <= value_id_V_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((plain_V_keep_V_1_load_A == 1'b1)) begin
        plain_V_keep_V_1_payload_A <= value_keep_V_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((plain_V_keep_V_1_load_B == 1'b1)) begin
        plain_V_keep_V_1_payload_B <= value_keep_V_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((plain_V_last_V_1_load_A == 1'b1)) begin
        plain_V_last_V_1_payload_A <= value_last_V_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((plain_V_last_V_1_load_B == 1'b1)) begin
        plain_V_last_V_1_payload_B <= value_last_V_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((plain_V_strb_V_1_load_A == 1'b1)) begin
        plain_V_strb_V_1_payload_A <= value_strb_V_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((plain_V_strb_V_1_load_B == 1'b1)) begin
        plain_V_strb_V_1_payload_B <= value_strb_V_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((plain_V_user_V_1_load_A == 1'b1)) begin
        plain_V_user_V_1_payload_A <= value_user_V_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((plain_V_user_V_1_load_B == 1'b1)) begin
        plain_V_user_V_1_payload_B <= value_user_V_q0;
    end
end

always @ (*) begin
    if ((~((plain_V_dest_V_1_ack_in == 1'b0) | (plain_V_id_V_1_ack_in == 1'b0) | (plain_V_last_V_1_ack_in == 1'b0) | (plain_V_user_V_1_ack_in == 1'b0) | (plain_V_strb_V_1_ack_in == 1'b0) | (plain_V_keep_V_1_ack_in == 1'b0) | (plain_V_data_V_1_ack_in == 1'b0)) & (tmp_fu_398_p2 == 1'd0) & (plain_V_dest_V_1_state[1'd0] == 1'b0) & (plain_V_id_V_1_state[1'd0] == 1'b0) & (plain_V_last_V_1_state[1'd0] == 1'b0) & (plain_V_user_V_1_state[1'd0] == 1'b0) & (plain_V_strb_V_1_state[1'd0] == 1'b0) & (plain_V_keep_V_1_state[1'd0] == 1'b0) & (plain_V_data_V_1_state[1'd0] == 1'b0) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if ((~((plain_V_dest_V_1_ack_in == 1'b0) | (plain_V_id_V_1_ack_in == 1'b0) | (plain_V_last_V_1_ack_in == 1'b0) | (plain_V_user_V_1_ack_in == 1'b0) | (plain_V_strb_V_1_ack_in == 1'b0) | (plain_V_keep_V_1_ack_in == 1'b0) | (plain_V_data_V_1_ack_in == 1'b0)) & (tmp_fu_398_p2 == 1'd0) & (plain_V_dest_V_1_state[1'd0] == 1'b0) & (plain_V_id_V_1_state[1'd0] == 1'b0) & (plain_V_last_V_1_state[1'd0] == 1'b0) & (plain_V_user_V_1_state[1'd0] == 1'b0) & (plain_V_strb_V_1_state[1'd0] == 1'b0) & (plain_V_keep_V_1_state[1'd0] == 1'b0) & (plain_V_data_V_1_state[1'd0] == 1'b0) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((exitcond1_fu_403_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        encrypt_TDATA_blk_n = encrypt_V_data_V_0_state[1'd0];
    end else begin
        encrypt_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((exitcond1_fu_403_p2 == 1'd0) & (encrypt_V_data_V_0_vld_out == 1'b0)) & (exitcond1_fu_403_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        encrypt_V_data_V_0_ack_out = 1'b1;
    end else begin
        encrypt_V_data_V_0_ack_out = 1'b0;
    end
end

always @ (*) begin
    if ((encrypt_V_data_V_0_sel == 1'b1)) begin
        encrypt_V_data_V_0_data_out = encrypt_V_data_V_0_payload_B;
    end else begin
        encrypt_V_data_V_0_data_out = encrypt_V_data_V_0_payload_A;
    end
end

always @ (*) begin
    if ((~((exitcond1_fu_403_p2 == 1'd0) & (encrypt_V_data_V_0_vld_out == 1'b0)) & (exitcond1_fu_403_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        encrypt_V_dest_V_0_ack_out = 1'b1;
    end else begin
        encrypt_V_dest_V_0_ack_out = 1'b0;
    end
end

always @ (*) begin
    if ((encrypt_V_dest_V_0_sel == 1'b1)) begin
        encrypt_V_dest_V_0_data_out = encrypt_V_dest_V_0_payload_B;
    end else begin
        encrypt_V_dest_V_0_data_out = encrypt_V_dest_V_0_payload_A;
    end
end

always @ (*) begin
    if ((~((exitcond1_fu_403_p2 == 1'd0) & (encrypt_V_data_V_0_vld_out == 1'b0)) & (exitcond1_fu_403_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        encrypt_V_id_V_0_ack_out = 1'b1;
    end else begin
        encrypt_V_id_V_0_ack_out = 1'b0;
    end
end

always @ (*) begin
    if ((encrypt_V_id_V_0_sel == 1'b1)) begin
        encrypt_V_id_V_0_data_out = encrypt_V_id_V_0_payload_B;
    end else begin
        encrypt_V_id_V_0_data_out = encrypt_V_id_V_0_payload_A;
    end
end

always @ (*) begin
    if ((~((exitcond1_fu_403_p2 == 1'd0) & (encrypt_V_data_V_0_vld_out == 1'b0)) & (exitcond1_fu_403_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        encrypt_V_keep_V_0_ack_out = 1'b1;
    end else begin
        encrypt_V_keep_V_0_ack_out = 1'b0;
    end
end

always @ (*) begin
    if ((encrypt_V_keep_V_0_sel == 1'b1)) begin
        encrypt_V_keep_V_0_data_out = encrypt_V_keep_V_0_payload_B;
    end else begin
        encrypt_V_keep_V_0_data_out = encrypt_V_keep_V_0_payload_A;
    end
end

always @ (*) begin
    if ((~((exitcond1_fu_403_p2 == 1'd0) & (encrypt_V_data_V_0_vld_out == 1'b0)) & (exitcond1_fu_403_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        encrypt_V_last_V_0_ack_out = 1'b1;
    end else begin
        encrypt_V_last_V_0_ack_out = 1'b0;
    end
end

always @ (*) begin
    if ((encrypt_V_last_V_0_sel == 1'b1)) begin
        encrypt_V_last_V_0_data_out = encrypt_V_last_V_0_payload_B;
    end else begin
        encrypt_V_last_V_0_data_out = encrypt_V_last_V_0_payload_A;
    end
end

always @ (*) begin
    if ((~((exitcond1_fu_403_p2 == 1'd0) & (encrypt_V_data_V_0_vld_out == 1'b0)) & (exitcond1_fu_403_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        encrypt_V_strb_V_0_ack_out = 1'b1;
    end else begin
        encrypt_V_strb_V_0_ack_out = 1'b0;
    end
end

always @ (*) begin
    if ((encrypt_V_strb_V_0_sel == 1'b1)) begin
        encrypt_V_strb_V_0_data_out = encrypt_V_strb_V_0_payload_B;
    end else begin
        encrypt_V_strb_V_0_data_out = encrypt_V_strb_V_0_payload_A;
    end
end

always @ (*) begin
    if ((~((exitcond1_fu_403_p2 == 1'd0) & (encrypt_V_data_V_0_vld_out == 1'b0)) & (exitcond1_fu_403_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        encrypt_V_user_V_0_ack_out = 1'b1;
    end else begin
        encrypt_V_user_V_0_ack_out = 1'b0;
    end
end

always @ (*) begin
    if ((encrypt_V_user_V_0_sel == 1'b1)) begin
        encrypt_V_user_V_0_data_out = encrypt_V_user_V_0_payload_B;
    end else begin
        encrypt_V_user_V_0_data_out = encrypt_V_user_V_0_payload_A;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state4) & (1'b0 == ap_block_state4_on_subcall_done))) begin
        grp_InvCipher_fu_370_ap_continue = 1'b1;
    end else begin
        grp_InvCipher_fu_370_ap_continue = 1'b0;
    end
end

always @ (*) begin
    if (((exitcond1_fu_403_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        in_V_address0 = tmp_s_fu_415_p1;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        in_V_address0 = grp_InvCipher_fu_370_encrypt_V_address0;
    end else begin
        in_V_address0 = 'bx;
    end
end

always @ (*) begin
    if ((~((exitcond1_fu_403_p2 == 1'd0) & (encrypt_V_data_V_0_vld_out == 1'b0)) & (exitcond1_fu_403_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        in_V_ce0 = 1'b1;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        in_V_ce0 = grp_InvCipher_fu_370_encrypt_V_ce0;
    end else begin
        in_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((~((exitcond1_fu_403_p2 == 1'd0) & (encrypt_V_data_V_0_vld_out == 1'b0)) & (exitcond1_fu_403_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        in_V_we0 = 1'b1;
    end else begin
        in_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        out_address0 = tmp_38_fu_473_p1;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        out_address0 = grp_InvCipher_fu_370_plain_V_address0;
    end else begin
        out_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        out_ce0 = 1'b1;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        out_ce0 = grp_InvCipher_fu_370_plain_V_ce0;
    end else begin
        out_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        out_we0 = grp_InvCipher_fu_370_plain_V_we0;
    end else begin
        out_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state6))) begin
        plain_TDATA_blk_n = plain_V_data_V_1_state[1'd1];
    end else begin
        plain_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((plain_V_data_V_1_sel == 1'b1)) begin
        plain_V_data_V_1_data_out = plain_V_data_V_1_payload_B;
    end else begin
        plain_V_data_V_1_data_out = plain_V_data_V_1_payload_A;
    end
end

always @ (*) begin
    if (((plain_V_data_V_1_ack_in == 1'b1) & (1'b1 == ap_CS_fsm_state6))) begin
        plain_V_data_V_1_vld_in = 1'b1;
    end else begin
        plain_V_data_V_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    if ((plain_V_dest_V_1_sel == 1'b1)) begin
        plain_V_dest_V_1_data_out = plain_V_dest_V_1_payload_B;
    end else begin
        plain_V_dest_V_1_data_out = plain_V_dest_V_1_payload_A;
    end
end

always @ (*) begin
    if (((plain_V_data_V_1_ack_in == 1'b1) & (1'b1 == ap_CS_fsm_state6))) begin
        plain_V_dest_V_1_vld_in = 1'b1;
    end else begin
        plain_V_dest_V_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    if ((plain_V_id_V_1_sel == 1'b1)) begin
        plain_V_id_V_1_data_out = plain_V_id_V_1_payload_B;
    end else begin
        plain_V_id_V_1_data_out = plain_V_id_V_1_payload_A;
    end
end

always @ (*) begin
    if (((plain_V_data_V_1_ack_in == 1'b1) & (1'b1 == ap_CS_fsm_state6))) begin
        plain_V_id_V_1_vld_in = 1'b1;
    end else begin
        plain_V_id_V_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    if ((plain_V_keep_V_1_sel == 1'b1)) begin
        plain_V_keep_V_1_data_out = plain_V_keep_V_1_payload_B;
    end else begin
        plain_V_keep_V_1_data_out = plain_V_keep_V_1_payload_A;
    end
end

always @ (*) begin
    if (((plain_V_data_V_1_ack_in == 1'b1) & (1'b1 == ap_CS_fsm_state6))) begin
        plain_V_keep_V_1_vld_in = 1'b1;
    end else begin
        plain_V_keep_V_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    if ((plain_V_last_V_1_sel == 1'b1)) begin
        plain_V_last_V_1_data_out = plain_V_last_V_1_payload_B;
    end else begin
        plain_V_last_V_1_data_out = plain_V_last_V_1_payload_A;
    end
end

always @ (*) begin
    if (((plain_V_data_V_1_ack_in == 1'b1) & (1'b1 == ap_CS_fsm_state6))) begin
        plain_V_last_V_1_vld_in = 1'b1;
    end else begin
        plain_V_last_V_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    if ((plain_V_strb_V_1_sel == 1'b1)) begin
        plain_V_strb_V_1_data_out = plain_V_strb_V_1_payload_B;
    end else begin
        plain_V_strb_V_1_data_out = plain_V_strb_V_1_payload_A;
    end
end

always @ (*) begin
    if (((plain_V_data_V_1_ack_in == 1'b1) & (1'b1 == ap_CS_fsm_state6))) begin
        plain_V_strb_V_1_vld_in = 1'b1;
    end else begin
        plain_V_strb_V_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    if ((plain_V_user_V_1_sel == 1'b1)) begin
        plain_V_user_V_1_data_out = plain_V_user_V_1_payload_B;
    end else begin
        plain_V_user_V_1_data_out = plain_V_user_V_1_payload_A;
    end
end

always @ (*) begin
    if (((plain_V_data_V_1_ack_in == 1'b1) & (1'b1 == ap_CS_fsm_state6))) begin
        plain_V_user_V_1_vld_in = 1'b1;
    end else begin
        plain_V_user_V_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        value_dest_V_address0 = tmp_38_fu_473_p1;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        value_dest_V_address0 = tmp_s_fu_415_p1;
    end else begin
        value_dest_V_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state5) | (~((exitcond1_fu_403_p2 == 1'd0) & (encrypt_V_data_V_0_vld_out == 1'b0)) & (1'b1 == ap_CS_fsm_state3)))) begin
        value_dest_V_ce0 = 1'b1;
    end else begin
        value_dest_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((~((exitcond1_fu_403_p2 == 1'd0) & (encrypt_V_data_V_0_vld_out == 1'b0)) & (exitcond1_fu_403_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        value_dest_V_we0 = 1'b1;
    end else begin
        value_dest_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        value_id_V_address0 = tmp_38_fu_473_p1;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        value_id_V_address0 = tmp_s_fu_415_p1;
    end else begin
        value_id_V_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state5) | (~((exitcond1_fu_403_p2 == 1'd0) & (encrypt_V_data_V_0_vld_out == 1'b0)) & (1'b1 == ap_CS_fsm_state3)))) begin
        value_id_V_ce0 = 1'b1;
    end else begin
        value_id_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((~((exitcond1_fu_403_p2 == 1'd0) & (encrypt_V_data_V_0_vld_out == 1'b0)) & (exitcond1_fu_403_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        value_id_V_we0 = 1'b1;
    end else begin
        value_id_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        value_keep_V_address0 = tmp_38_fu_473_p1;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        value_keep_V_address0 = tmp_s_fu_415_p1;
    end else begin
        value_keep_V_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state5) | (~((exitcond1_fu_403_p2 == 1'd0) & (encrypt_V_data_V_0_vld_out == 1'b0)) & (1'b1 == ap_CS_fsm_state3)))) begin
        value_keep_V_ce0 = 1'b1;
    end else begin
        value_keep_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((~((exitcond1_fu_403_p2 == 1'd0) & (encrypt_V_data_V_0_vld_out == 1'b0)) & (exitcond1_fu_403_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        value_keep_V_we0 = 1'b1;
    end else begin
        value_keep_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        value_last_V_address0 = tmp_38_fu_473_p1;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        value_last_V_address0 = tmp_s_fu_415_p1;
    end else begin
        value_last_V_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state5) | (~((exitcond1_fu_403_p2 == 1'd0) & (encrypt_V_data_V_0_vld_out == 1'b0)) & (1'b1 == ap_CS_fsm_state3)))) begin
        value_last_V_ce0 = 1'b1;
    end else begin
        value_last_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((~((exitcond1_fu_403_p2 == 1'd0) & (encrypt_V_data_V_0_vld_out == 1'b0)) & (exitcond1_fu_403_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        value_last_V_we0 = 1'b1;
    end else begin
        value_last_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        value_strb_V_address0 = tmp_38_fu_473_p1;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        value_strb_V_address0 = tmp_s_fu_415_p1;
    end else begin
        value_strb_V_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state5) | (~((exitcond1_fu_403_p2 == 1'd0) & (encrypt_V_data_V_0_vld_out == 1'b0)) & (1'b1 == ap_CS_fsm_state3)))) begin
        value_strb_V_ce0 = 1'b1;
    end else begin
        value_strb_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((~((exitcond1_fu_403_p2 == 1'd0) & (encrypt_V_data_V_0_vld_out == 1'b0)) & (exitcond1_fu_403_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        value_strb_V_we0 = 1'b1;
    end else begin
        value_strb_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        value_user_V_address0 = tmp_38_fu_473_p1;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        value_user_V_address0 = tmp_s_fu_415_p1;
    end else begin
        value_user_V_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state5) | (~((exitcond1_fu_403_p2 == 1'd0) & (encrypt_V_data_V_0_vld_out == 1'b0)) & (1'b1 == ap_CS_fsm_state3)))) begin
        value_user_V_ce0 = 1'b1;
    end else begin
        value_user_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((~((exitcond1_fu_403_p2 == 1'd0) & (encrypt_V_data_V_0_vld_out == 1'b0)) & (exitcond1_fu_403_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        value_user_V_we0 = 1'b1;
    end else begin
        value_user_V_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if ((~((plain_V_dest_V_1_ack_in == 1'b0) | (plain_V_id_V_1_ack_in == 1'b0) | (plain_V_last_V_1_ack_in == 1'b0) | (plain_V_user_V_1_ack_in == 1'b0) | (plain_V_strb_V_1_ack_in == 1'b0) | (plain_V_keep_V_1_ack_in == 1'b0) | (plain_V_data_V_1_ack_in == 1'b0)) & (tmp_fu_398_p2 == 1'd0) & (plain_V_dest_V_1_state[1'd0] == 1'b0) & (plain_V_id_V_1_state[1'd0] == 1'b0) & (plain_V_last_V_1_state[1'd0] == 1'b0) & (plain_V_user_V_1_state[1'd0] == 1'b0) & (plain_V_strb_V_1_state[1'd0] == 1'b0) & (plain_V_keep_V_1_state[1'd0] == 1'b0) & (plain_V_data_V_1_state[1'd0] == 1'b0) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else if ((~((plain_V_dest_V_1_ack_in == 1'b0) | (plain_V_id_V_1_ack_in == 1'b0) | (plain_V_last_V_1_ack_in == 1'b0) | (plain_V_user_V_1_ack_in == 1'b0) | (plain_V_strb_V_1_ack_in == 1'b0) | (plain_V_keep_V_1_ack_in == 1'b0) | (plain_V_data_V_1_ack_in == 1'b0)) & (tmp_fu_398_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end
        end
        ap_ST_fsm_state3 : begin
            if ((~((exitcond1_fu_403_p2 == 1'd0) & (encrypt_V_data_V_0_vld_out == 1'b0)) & (exitcond1_fu_403_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else if ((~((exitcond1_fu_403_p2 == 1'd0) & (encrypt_V_data_V_0_vld_out == 1'b0)) & (exitcond1_fu_403_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state4 : begin
            if (((1'b1 == ap_CS_fsm_state4) & (1'b0 == ap_block_state4_on_subcall_done))) begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state5 : begin
            if (((exitcond_fu_461_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state5))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end
        end
        ap_ST_fsm_state6 : begin
            if (((plain_V_data_V_1_ack_in == 1'b1) & (1'b1 == ap_CS_fsm_state6))) begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end
        end
        ap_ST_fsm_state7 : begin
            if (((plain_V_data_V_1_ack_in == 1'b1) & (1'b1 == ap_CS_fsm_state7))) begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

always @ (*) begin
    ap_block_state2 = ((plain_V_dest_V_1_ack_in == 1'b0) | (plain_V_id_V_1_ack_in == 1'b0) | (plain_V_last_V_1_ack_in == 1'b0) | (plain_V_user_V_1_ack_in == 1'b0) | (plain_V_strb_V_1_ack_in == 1'b0) | (plain_V_keep_V_1_ack_in == 1'b0) | (plain_V_data_V_1_ack_in == 1'b0));
end

always @ (*) begin
    ap_block_state3 = ((exitcond1_fu_403_p2 == 1'd0) & (encrypt_V_data_V_0_vld_out == 1'b0));
end

always @ (*) begin
    ap_block_state3_ignore_call0 = ((exitcond1_fu_403_p2 == 1'd0) & (encrypt_V_data_V_0_vld_out == 1'b0));
end

always @ (*) begin
    ap_block_state4_on_subcall_done = ((ap_sync_grp_InvCipher_fu_370_ap_ready & ap_sync_grp_InvCipher_fu_370_ap_done) == 1'b0);
end

always @ (*) begin
    ap_rst_n_inv = ~ap_rst_n;
end

assign ap_sync_grp_InvCipher_fu_370_ap_done = (grp_InvCipher_fu_370_ap_done | ap_sync_reg_grp_InvCipher_fu_370_ap_done);

assign ap_sync_grp_InvCipher_fu_370_ap_ready = (grp_InvCipher_fu_370_ap_ready | ap_sync_reg_grp_InvCipher_fu_370_ap_ready);

assign encrypt_TREADY = encrypt_V_dest_V_0_state[1'd1];

assign encrypt_V_data_V_0_ack_in = encrypt_V_data_V_0_state[1'd1];

assign encrypt_V_data_V_0_load_A = (~encrypt_V_data_V_0_sel_wr & encrypt_V_data_V_0_state_cmp_full);

assign encrypt_V_data_V_0_load_B = (encrypt_V_data_V_0_state_cmp_full & encrypt_V_data_V_0_sel_wr);

assign encrypt_V_data_V_0_sel = encrypt_V_data_V_0_sel_rd;

assign encrypt_V_data_V_0_state_cmp_full = ((encrypt_V_data_V_0_state != 2'd1) ? 1'b1 : 1'b0);

assign encrypt_V_data_V_0_vld_in = encrypt_TVALID;

assign encrypt_V_data_V_0_vld_out = encrypt_V_data_V_0_state[1'd0];

assign encrypt_V_dest_V_0_ack_in = encrypt_V_dest_V_0_state[1'd1];

assign encrypt_V_dest_V_0_load_A = (~encrypt_V_dest_V_0_sel_wr & encrypt_V_dest_V_0_state_cmp_full);

assign encrypt_V_dest_V_0_load_B = (encrypt_V_dest_V_0_state_cmp_full & encrypt_V_dest_V_0_sel_wr);

assign encrypt_V_dest_V_0_sel = encrypt_V_dest_V_0_sel_rd;

assign encrypt_V_dest_V_0_state_cmp_full = ((encrypt_V_dest_V_0_state != 2'd1) ? 1'b1 : 1'b0);

assign encrypt_V_dest_V_0_vld_in = encrypt_TVALID;

assign encrypt_V_dest_V_0_vld_out = encrypt_V_dest_V_0_state[1'd0];

assign encrypt_V_id_V_0_ack_in = encrypt_V_id_V_0_state[1'd1];

assign encrypt_V_id_V_0_load_A = (~encrypt_V_id_V_0_sel_wr & encrypt_V_id_V_0_state_cmp_full);

assign encrypt_V_id_V_0_load_B = (encrypt_V_id_V_0_state_cmp_full & encrypt_V_id_V_0_sel_wr);

assign encrypt_V_id_V_0_sel = encrypt_V_id_V_0_sel_rd;

assign encrypt_V_id_V_0_state_cmp_full = ((encrypt_V_id_V_0_state != 2'd1) ? 1'b1 : 1'b0);

assign encrypt_V_id_V_0_vld_in = encrypt_TVALID;

assign encrypt_V_id_V_0_vld_out = encrypt_V_id_V_0_state[1'd0];

assign encrypt_V_keep_V_0_ack_in = encrypt_V_keep_V_0_state[1'd1];

assign encrypt_V_keep_V_0_load_A = (~encrypt_V_keep_V_0_sel_wr & encrypt_V_keep_V_0_state_cmp_full);

assign encrypt_V_keep_V_0_load_B = (encrypt_V_keep_V_0_state_cmp_full & encrypt_V_keep_V_0_sel_wr);

assign encrypt_V_keep_V_0_sel = encrypt_V_keep_V_0_sel_rd;

assign encrypt_V_keep_V_0_state_cmp_full = ((encrypt_V_keep_V_0_state != 2'd1) ? 1'b1 : 1'b0);

assign encrypt_V_keep_V_0_vld_in = encrypt_TVALID;

assign encrypt_V_keep_V_0_vld_out = encrypt_V_keep_V_0_state[1'd0];

assign encrypt_V_last_V_0_ack_in = encrypt_V_last_V_0_state[1'd1];

assign encrypt_V_last_V_0_load_A = (~encrypt_V_last_V_0_sel_wr & encrypt_V_last_V_0_state_cmp_full);

assign encrypt_V_last_V_0_load_B = (encrypt_V_last_V_0_state_cmp_full & encrypt_V_last_V_0_sel_wr);

assign encrypt_V_last_V_0_sel = encrypt_V_last_V_0_sel_rd;

assign encrypt_V_last_V_0_state_cmp_full = ((encrypt_V_last_V_0_state != 2'd1) ? 1'b1 : 1'b0);

assign encrypt_V_last_V_0_vld_in = encrypt_TVALID;

assign encrypt_V_last_V_0_vld_out = encrypt_V_last_V_0_state[1'd0];

assign encrypt_V_strb_V_0_ack_in = encrypt_V_strb_V_0_state[1'd1];

assign encrypt_V_strb_V_0_load_A = (~encrypt_V_strb_V_0_sel_wr & encrypt_V_strb_V_0_state_cmp_full);

assign encrypt_V_strb_V_0_load_B = (encrypt_V_strb_V_0_state_cmp_full & encrypt_V_strb_V_0_sel_wr);

assign encrypt_V_strb_V_0_sel = encrypt_V_strb_V_0_sel_rd;

assign encrypt_V_strb_V_0_state_cmp_full = ((encrypt_V_strb_V_0_state != 2'd1) ? 1'b1 : 1'b0);

assign encrypt_V_strb_V_0_vld_in = encrypt_TVALID;

assign encrypt_V_strb_V_0_vld_out = encrypt_V_strb_V_0_state[1'd0];

assign encrypt_V_user_V_0_ack_in = encrypt_V_user_V_0_state[1'd1];

assign encrypt_V_user_V_0_load_A = (~encrypt_V_user_V_0_sel_wr & encrypt_V_user_V_0_state_cmp_full);

assign encrypt_V_user_V_0_load_B = (encrypt_V_user_V_0_state_cmp_full & encrypt_V_user_V_0_sel_wr);

assign encrypt_V_user_V_0_sel = encrypt_V_user_V_0_sel_rd;

assign encrypt_V_user_V_0_state_cmp_full = ((encrypt_V_user_V_0_state != 2'd1) ? 1'b1 : 1'b0);

assign encrypt_V_user_V_0_vld_in = encrypt_TVALID;

assign encrypt_V_user_V_0_vld_out = encrypt_V_user_V_0_state[1'd0];

assign exitcond1_fu_403_p2 = ((j_reg_348 == 5'd16) ? 1'b1 : 1'b0);

assign exitcond_fu_461_p2 = ((j3_reg_359 == 5'd16) ? 1'b1 : 1'b0);

assign grp_InvCipher_fu_370_ap_start = grp_InvCipher_fu_370_ap_start_reg;

assign i_2_fu_484_p2 = (i_reg_336 + 32'd16);

assign j_1_fu_409_p2 = (j_reg_348 + 5'd1);

assign j_2_fu_467_p2 = (j3_reg_359 + 5'd1);

assign plain_TDATA = plain_V_data_V_1_data_out;

assign plain_TDEST = plain_V_dest_V_1_data_out;

assign plain_TID = plain_V_id_V_1_data_out;

assign plain_TKEEP = plain_V_keep_V_1_data_out;

assign plain_TLAST = plain_V_last_V_1_data_out;

assign plain_TSTRB = plain_V_strb_V_1_data_out;

assign plain_TUSER = plain_V_user_V_1_data_out;

assign plain_TVALID = plain_V_dest_V_1_state[1'd0];

assign plain_V_data_V_1_ack_in = plain_V_data_V_1_state[1'd1];

assign plain_V_data_V_1_ack_out = plain_TREADY;

assign plain_V_data_V_1_load_A = (plain_V_data_V_1_state_cmp_full & ~plain_V_data_V_1_sel_wr);

assign plain_V_data_V_1_load_B = (plain_V_data_V_1_state_cmp_full & plain_V_data_V_1_sel_wr);

assign plain_V_data_V_1_sel = plain_V_data_V_1_sel_rd;

assign plain_V_data_V_1_state_cmp_full = ((plain_V_data_V_1_state != 2'd1) ? 1'b1 : 1'b0);

assign plain_V_data_V_1_vld_out = plain_V_data_V_1_state[1'd0];

assign plain_V_dest_V_1_ack_in = plain_V_dest_V_1_state[1'd1];

assign plain_V_dest_V_1_ack_out = plain_TREADY;

assign plain_V_dest_V_1_load_A = (plain_V_dest_V_1_state_cmp_full & ~plain_V_dest_V_1_sel_wr);

assign plain_V_dest_V_1_load_B = (plain_V_dest_V_1_state_cmp_full & plain_V_dest_V_1_sel_wr);

assign plain_V_dest_V_1_sel = plain_V_dest_V_1_sel_rd;

assign plain_V_dest_V_1_state_cmp_full = ((plain_V_dest_V_1_state != 2'd1) ? 1'b1 : 1'b0);

assign plain_V_dest_V_1_vld_out = plain_V_dest_V_1_state[1'd0];

assign plain_V_id_V_1_ack_in = plain_V_id_V_1_state[1'd1];

assign plain_V_id_V_1_ack_out = plain_TREADY;

assign plain_V_id_V_1_load_A = (plain_V_id_V_1_state_cmp_full & ~plain_V_id_V_1_sel_wr);

assign plain_V_id_V_1_load_B = (plain_V_id_V_1_state_cmp_full & plain_V_id_V_1_sel_wr);

assign plain_V_id_V_1_sel = plain_V_id_V_1_sel_rd;

assign plain_V_id_V_1_state_cmp_full = ((plain_V_id_V_1_state != 2'd1) ? 1'b1 : 1'b0);

assign plain_V_id_V_1_vld_out = plain_V_id_V_1_state[1'd0];

assign plain_V_keep_V_1_ack_in = plain_V_keep_V_1_state[1'd1];

assign plain_V_keep_V_1_ack_out = plain_TREADY;

assign plain_V_keep_V_1_load_A = (plain_V_keep_V_1_state_cmp_full & ~plain_V_keep_V_1_sel_wr);

assign plain_V_keep_V_1_load_B = (plain_V_keep_V_1_state_cmp_full & plain_V_keep_V_1_sel_wr);

assign plain_V_keep_V_1_sel = plain_V_keep_V_1_sel_rd;

assign plain_V_keep_V_1_state_cmp_full = ((plain_V_keep_V_1_state != 2'd1) ? 1'b1 : 1'b0);

assign plain_V_keep_V_1_vld_out = plain_V_keep_V_1_state[1'd0];

assign plain_V_last_V_1_ack_in = plain_V_last_V_1_state[1'd1];

assign plain_V_last_V_1_ack_out = plain_TREADY;

assign plain_V_last_V_1_load_A = (plain_V_last_V_1_state_cmp_full & ~plain_V_last_V_1_sel_wr);

assign plain_V_last_V_1_load_B = (plain_V_last_V_1_state_cmp_full & plain_V_last_V_1_sel_wr);

assign plain_V_last_V_1_sel = plain_V_last_V_1_sel_rd;

assign plain_V_last_V_1_state_cmp_full = ((plain_V_last_V_1_state != 2'd1) ? 1'b1 : 1'b0);

assign plain_V_last_V_1_vld_out = plain_V_last_V_1_state[1'd0];

assign plain_V_strb_V_1_ack_in = plain_V_strb_V_1_state[1'd1];

assign plain_V_strb_V_1_ack_out = plain_TREADY;

assign plain_V_strb_V_1_load_A = (plain_V_strb_V_1_state_cmp_full & ~plain_V_strb_V_1_sel_wr);

assign plain_V_strb_V_1_load_B = (plain_V_strb_V_1_state_cmp_full & plain_V_strb_V_1_sel_wr);

assign plain_V_strb_V_1_sel = plain_V_strb_V_1_sel_rd;

assign plain_V_strb_V_1_state_cmp_full = ((plain_V_strb_V_1_state != 2'd1) ? 1'b1 : 1'b0);

assign plain_V_strb_V_1_vld_out = plain_V_strb_V_1_state[1'd0];

assign plain_V_user_V_1_ack_in = plain_V_user_V_1_state[1'd1];

assign plain_V_user_V_1_ack_out = plain_TREADY;

assign plain_V_user_V_1_load_A = (plain_V_user_V_1_state_cmp_full & ~plain_V_user_V_1_sel_wr);

assign plain_V_user_V_1_load_B = (plain_V_user_V_1_state_cmp_full & plain_V_user_V_1_sel_wr);

assign plain_V_user_V_1_sel = plain_V_user_V_1_sel_rd;

assign plain_V_user_V_1_state_cmp_full = ((plain_V_user_V_1_state != 2'd1) ? 1'b1 : 1'b0);

assign plain_V_user_V_1_vld_out = plain_V_user_V_1_state[1'd0];

assign tmp_38_fu_473_p1 = j3_reg_359;

assign tmp_fu_398_p2 = ((i_reg_336 < length_read_reg_490) ? 1'b1 : 1'b0);

assign tmp_s_fu_415_p1 = j_reg_348;

endmodule //AES_ECB_decrypt
