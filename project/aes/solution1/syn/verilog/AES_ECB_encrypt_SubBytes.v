// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
// Version: 2020.2
// Copyright (C) Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module AES_ECB_encrypt_SubBytes (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        in_0_read,
        in_1_read,
        in_2_read,
        in_3_read,
        in_4_read,
        in_5_read,
        in_6_read,
        in_7_read,
        in_8_read,
        in_9_read,
        in_10_read,
        in_11_read,
        in_12_read,
        in_13_read,
        in_14_read,
        in_15_read,
        ap_return_0,
        ap_return_1,
        ap_return_2,
        ap_return_3,
        ap_return_4,
        ap_return_5,
        ap_return_6,
        ap_return_7,
        ap_return_8,
        ap_return_9,
        ap_return_10,
        ap_return_11,
        ap_return_12,
        ap_return_13,
        ap_return_14,
        ap_return_15
);

parameter    ap_ST_fsm_state1 = 2'd1;
parameter    ap_ST_fsm_state2 = 2'd2;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
input  [7:0] in_0_read;
input  [7:0] in_1_read;
input  [7:0] in_2_read;
input  [7:0] in_3_read;
input  [7:0] in_4_read;
input  [7:0] in_5_read;
input  [7:0] in_6_read;
input  [7:0] in_7_read;
input  [7:0] in_8_read;
input  [7:0] in_9_read;
input  [7:0] in_10_read;
input  [7:0] in_11_read;
input  [7:0] in_12_read;
input  [7:0] in_13_read;
input  [7:0] in_14_read;
input  [7:0] in_15_read;
output  [7:0] ap_return_0;
output  [7:0] ap_return_1;
output  [7:0] ap_return_2;
output  [7:0] ap_return_3;
output  [7:0] ap_return_4;
output  [7:0] ap_return_5;
output  [7:0] ap_return_6;
output  [7:0] ap_return_7;
output  [7:0] ap_return_8;
output  [7:0] ap_return_9;
output  [7:0] ap_return_10;
output  [7:0] ap_return_11;
output  [7:0] ap_return_12;
output  [7:0] ap_return_13;
output  [7:0] ap_return_14;
output  [7:0] ap_return_15;

reg ap_done;
reg ap_idle;
reg ap_ready;

reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [1:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [7:0] sbox114_address0;
reg    sbox114_ce0;
wire   [7:0] sbox114_q0;
wire   [7:0] sbox114_address1;
reg    sbox114_ce1;
wire   [7:0] sbox114_q1;
wire   [7:0] sbox114_address2;
reg    sbox114_ce2;
wire   [7:0] sbox114_q2;
wire   [7:0] sbox114_address3;
reg    sbox114_ce3;
wire   [7:0] sbox114_q3;
wire   [7:0] sbox114_address4;
reg    sbox114_ce4;
wire   [7:0] sbox114_q4;
wire   [7:0] sbox114_address5;
reg    sbox114_ce5;
wire   [7:0] sbox114_q5;
wire   [7:0] sbox114_address6;
reg    sbox114_ce6;
wire   [7:0] sbox114_q6;
wire   [7:0] sbox114_address7;
reg    sbox114_ce7;
wire   [7:0] sbox114_q7;
wire   [7:0] sbox114_address8;
reg    sbox114_ce8;
wire   [7:0] sbox114_q8;
wire   [7:0] sbox114_address9;
reg    sbox114_ce9;
wire   [7:0] sbox114_q9;
wire   [7:0] sbox114_address10;
reg    sbox114_ce10;
wire   [7:0] sbox114_q10;
wire   [7:0] sbox114_address11;
reg    sbox114_ce11;
wire   [7:0] sbox114_q11;
wire   [7:0] sbox114_address12;
reg    sbox114_ce12;
wire   [7:0] sbox114_q12;
wire   [7:0] sbox114_address13;
reg    sbox114_ce13;
wire   [7:0] sbox114_q13;
wire   [7:0] sbox114_address14;
reg    sbox114_ce14;
wire   [7:0] sbox114_q14;
wire   [7:0] sbox114_address15;
reg    sbox114_ce15;
wire   [7:0] sbox114_q15;
wire   [63:0] zext_ln10_fu_329_p1;
wire   [63:0] zext_ln10_1_fu_334_p1;
wire   [63:0] zext_ln10_2_fu_339_p1;
wire   [63:0] zext_ln10_3_fu_344_p1;
wire   [63:0] zext_ln10_4_fu_349_p1;
wire   [63:0] zext_ln10_5_fu_354_p1;
wire   [63:0] zext_ln10_6_fu_359_p1;
wire   [63:0] zext_ln10_7_fu_364_p1;
wire   [63:0] zext_ln10_8_fu_369_p1;
wire   [63:0] zext_ln10_9_fu_374_p1;
wire   [63:0] zext_ln10_10_fu_379_p1;
wire   [63:0] zext_ln10_11_fu_384_p1;
wire   [63:0] zext_ln10_12_fu_389_p1;
wire   [63:0] zext_ln10_13_fu_394_p1;
wire   [63:0] zext_ln10_14_fu_399_p1;
wire   [63:0] zext_ln10_15_fu_404_p1;
reg    ap_block_state1;
wire    ap_CS_fsm_state2;
reg   [1:0] ap_NS_fsm;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 2'd1;
end

AES_ECB_encrypt_SubBytes58_sbox113 #(
    .DataWidth( 8 ),
    .AddressRange( 256 ),
    .AddressWidth( 8 ))
sbox114_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(sbox114_address0),
    .ce0(sbox114_ce0),
    .q0(sbox114_q0),
    .address1(sbox114_address1),
    .ce1(sbox114_ce1),
    .q1(sbox114_q1),
    .address2(sbox114_address2),
    .ce2(sbox114_ce2),
    .q2(sbox114_q2),
    .address3(sbox114_address3),
    .ce3(sbox114_ce3),
    .q3(sbox114_q3),
    .address4(sbox114_address4),
    .ce4(sbox114_ce4),
    .q4(sbox114_q4),
    .address5(sbox114_address5),
    .ce5(sbox114_ce5),
    .q5(sbox114_q5),
    .address6(sbox114_address6),
    .ce6(sbox114_ce6),
    .q6(sbox114_q6),
    .address7(sbox114_address7),
    .ce7(sbox114_ce7),
    .q7(sbox114_q7),
    .address8(sbox114_address8),
    .ce8(sbox114_ce8),
    .q8(sbox114_q8),
    .address9(sbox114_address9),
    .ce9(sbox114_ce9),
    .q9(sbox114_q9),
    .address10(sbox114_address10),
    .ce10(sbox114_ce10),
    .q10(sbox114_q10),
    .address11(sbox114_address11),
    .ce11(sbox114_ce11),
    .q11(sbox114_q11),
    .address12(sbox114_address12),
    .ce12(sbox114_ce12),
    .q12(sbox114_q12),
    .address13(sbox114_address13),
    .ce13(sbox114_ce13),
    .q13(sbox114_q13),
    .address14(sbox114_address14),
    .ce14(sbox114_ce14),
    .q14(sbox114_q14),
    .address15(sbox114_address15),
    .ce15(sbox114_ce15),
    .q15(sbox114_q15)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state2)) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        sbox114_ce0 = 1'b1;
    end else begin
        sbox114_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        sbox114_ce1 = 1'b1;
    end else begin
        sbox114_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        sbox114_ce10 = 1'b1;
    end else begin
        sbox114_ce10 = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        sbox114_ce11 = 1'b1;
    end else begin
        sbox114_ce11 = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        sbox114_ce12 = 1'b1;
    end else begin
        sbox114_ce12 = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        sbox114_ce13 = 1'b1;
    end else begin
        sbox114_ce13 = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        sbox114_ce14 = 1'b1;
    end else begin
        sbox114_ce14 = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        sbox114_ce15 = 1'b1;
    end else begin
        sbox114_ce15 = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        sbox114_ce2 = 1'b1;
    end else begin
        sbox114_ce2 = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        sbox114_ce3 = 1'b1;
    end else begin
        sbox114_ce3 = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        sbox114_ce4 = 1'b1;
    end else begin
        sbox114_ce4 = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        sbox114_ce5 = 1'b1;
    end else begin
        sbox114_ce5 = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        sbox114_ce6 = 1'b1;
    end else begin
        sbox114_ce6 = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        sbox114_ce7 = 1'b1;
    end else begin
        sbox114_ce7 = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        sbox114_ce8 = 1'b1;
    end else begin
        sbox114_ce8 = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        sbox114_ce9 = 1'b1;
    end else begin
        sbox114_ce9 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

always @ (*) begin
    ap_block_state1 = ((ap_start == 1'b0) | (ap_done_reg == 1'b1));
end

assign ap_return_0 = sbox114_q15;

assign ap_return_1 = sbox114_q14;

assign ap_return_10 = sbox114_q5;

assign ap_return_11 = sbox114_q4;

assign ap_return_12 = sbox114_q3;

assign ap_return_13 = sbox114_q2;

assign ap_return_14 = sbox114_q1;

assign ap_return_15 = sbox114_q0;

assign ap_return_2 = sbox114_q13;

assign ap_return_3 = sbox114_q12;

assign ap_return_4 = sbox114_q11;

assign ap_return_5 = sbox114_q10;

assign ap_return_6 = sbox114_q9;

assign ap_return_7 = sbox114_q8;

assign ap_return_8 = sbox114_q7;

assign ap_return_9 = sbox114_q6;

assign sbox114_address0 = zext_ln10_15_fu_404_p1;

assign sbox114_address1 = zext_ln10_14_fu_399_p1;

assign sbox114_address10 = zext_ln10_5_fu_354_p1;

assign sbox114_address11 = zext_ln10_4_fu_349_p1;

assign sbox114_address12 = zext_ln10_3_fu_344_p1;

assign sbox114_address13 = zext_ln10_2_fu_339_p1;

assign sbox114_address14 = zext_ln10_1_fu_334_p1;

assign sbox114_address15 = zext_ln10_fu_329_p1;

assign sbox114_address2 = zext_ln10_13_fu_394_p1;

assign sbox114_address3 = zext_ln10_12_fu_389_p1;

assign sbox114_address4 = zext_ln10_11_fu_384_p1;

assign sbox114_address5 = zext_ln10_10_fu_379_p1;

assign sbox114_address6 = zext_ln10_9_fu_374_p1;

assign sbox114_address7 = zext_ln10_8_fu_369_p1;

assign sbox114_address8 = zext_ln10_7_fu_364_p1;

assign sbox114_address9 = zext_ln10_6_fu_359_p1;

assign zext_ln10_10_fu_379_p1 = in_10_read;

assign zext_ln10_11_fu_384_p1 = in_11_read;

assign zext_ln10_12_fu_389_p1 = in_12_read;

assign zext_ln10_13_fu_394_p1 = in_13_read;

assign zext_ln10_14_fu_399_p1 = in_14_read;

assign zext_ln10_15_fu_404_p1 = in_15_read;

assign zext_ln10_1_fu_334_p1 = in_1_read;

assign zext_ln10_2_fu_339_p1 = in_2_read;

assign zext_ln10_3_fu_344_p1 = in_3_read;

assign zext_ln10_4_fu_349_p1 = in_4_read;

assign zext_ln10_5_fu_354_p1 = in_5_read;

assign zext_ln10_6_fu_359_p1 = in_6_read;

assign zext_ln10_7_fu_364_p1 = in_7_read;

assign zext_ln10_8_fu_369_p1 = in_8_read;

assign zext_ln10_9_fu_374_p1 = in_9_read;

assign zext_ln10_fu_329_p1 = in_0_read;

endmodule //AES_ECB_encrypt_SubBytes
