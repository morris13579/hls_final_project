// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
// Version: 2020.2
// Copyright (C) Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module AES_ECB_encrypt_MixColumns76 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        p_read,
        p_read1,
        p_read2,
        p_read3,
        p_read4,
        p_read5,
        p_read6,
        p_read7,
        p_read8,
        p_read9,
        p_read10,
        p_read11,
        p_read12,
        p_read13,
        p_read14,
        p_read15,
        ap_return_0,
        ap_return_1,
        ap_return_2,
        ap_return_3,
        ap_return_4,
        ap_return_5,
        ap_return_6,
        ap_return_7,
        ap_return_8,
        ap_return_9,
        ap_return_10,
        ap_return_11,
        ap_return_12,
        ap_return_13,
        ap_return_14,
        ap_return_15
);

parameter    ap_ST_fsm_state1 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
input  [7:0] p_read;
input  [7:0] p_read1;
input  [7:0] p_read2;
input  [7:0] p_read3;
input  [7:0] p_read4;
input  [7:0] p_read5;
input  [7:0] p_read6;
input  [7:0] p_read7;
input  [7:0] p_read8;
input  [7:0] p_read9;
input  [7:0] p_read10;
input  [7:0] p_read11;
input  [7:0] p_read12;
input  [7:0] p_read13;
input  [7:0] p_read14;
input  [7:0] p_read15;
output  [7:0] ap_return_0;
output  [7:0] ap_return_1;
output  [7:0] ap_return_2;
output  [7:0] ap_return_3;
output  [7:0] ap_return_4;
output  [7:0] ap_return_5;
output  [7:0] ap_return_6;
output  [7:0] ap_return_7;
output  [7:0] ap_return_8;
output  [7:0] ap_return_9;
output  [7:0] ap_return_10;
output  [7:0] ap_return_11;
output  [7:0] ap_return_12;
output  [7:0] ap_return_13;
output  [7:0] ap_return_14;
output  [7:0] ap_return_15;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg[7:0] ap_return_0;
reg[7:0] ap_return_1;
reg[7:0] ap_return_2;
reg[7:0] ap_return_3;
reg[7:0] ap_return_4;
reg[7:0] ap_return_5;
reg[7:0] ap_return_6;
reg[7:0] ap_return_7;
reg[7:0] ap_return_8;
reg[7:0] ap_return_9;
reg[7:0] ap_return_10;
reg[7:0] ap_return_11;
reg[7:0] ap_return_12;
reg[7:0] ap_return_13;
reg[7:0] ap_return_14;
reg[7:0] ap_return_15;

reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    ap_block_state1;
wire   [7:0] xor_ln50_fu_142_p2;
wire   [7:0] xor_ln50_34_fu_148_p2;
wire   [0:0] tmp_fu_166_p3;
wire   [7:0] shl_ln75_fu_160_p2;
wire   [7:0] select_ln53_fu_174_p3;
wire   [7:0] xor_ln50_35_fu_154_p2;
wire   [7:0] xor_ln53_34_fu_188_p2;
wire   [7:0] xor_ln53_fu_182_p2;
wire   [7:0] xor_ln55_fu_200_p2;
wire   [0:0] tmp_46_fu_212_p3;
wire   [7:0] shl_ln75_46_fu_206_p2;
wire   [7:0] select_ln57_fu_220_p3;
wire   [7:0] xor_ln57_34_fu_234_p2;
wire   [7:0] xor_ln57_fu_228_p2;
wire   [7:0] xor_ln59_fu_246_p2;
wire   [0:0] tmp_47_fu_258_p3;
wire   [7:0] shl_ln75_47_fu_252_p2;
wire   [7:0] select_ln61_fu_266_p3;
wire   [7:0] xor_ln61_34_fu_280_p2;
wire   [7:0] xor_ln61_fu_274_p2;
wire   [7:0] xor_ln63_fu_292_p2;
wire   [0:0] tmp_48_fu_304_p3;
wire   [7:0] select_ln65_fu_312_p3;
wire   [7:0] xor_ln65_fu_320_p2;
wire   [7:0] shl_ln75_48_fu_298_p2;
wire   [7:0] xor_ln50_36_fu_332_p2;
wire   [7:0] xor_ln50_37_fu_338_p2;
wire   [0:0] tmp_49_fu_356_p3;
wire   [7:0] shl_ln75_49_fu_350_p2;
wire   [7:0] select_ln53_10_fu_364_p3;
wire   [7:0] xor_ln50_38_fu_344_p2;
wire   [7:0] xor_ln53_37_fu_378_p2;
wire   [7:0] xor_ln53_36_fu_372_p2;
wire   [7:0] xor_ln55_10_fu_390_p2;
wire   [0:0] tmp_50_fu_402_p3;
wire   [7:0] shl_ln75_50_fu_396_p2;
wire   [7:0] select_ln57_10_fu_410_p3;
wire   [7:0] xor_ln57_37_fu_424_p2;
wire   [7:0] xor_ln57_36_fu_418_p2;
wire   [7:0] xor_ln59_10_fu_436_p2;
wire   [0:0] tmp_51_fu_448_p3;
wire   [7:0] shl_ln75_51_fu_442_p2;
wire   [7:0] select_ln61_10_fu_456_p3;
wire   [7:0] xor_ln61_37_fu_470_p2;
wire   [7:0] xor_ln61_36_fu_464_p2;
wire   [7:0] xor_ln63_10_fu_482_p2;
wire   [0:0] tmp_52_fu_494_p3;
wire   [7:0] select_ln65_10_fu_502_p3;
wire   [7:0] xor_ln65_23_fu_510_p2;
wire   [7:0] shl_ln75_52_fu_488_p2;
wire   [7:0] xor_ln50_39_fu_522_p2;
wire   [7:0] xor_ln50_40_fu_528_p2;
wire   [0:0] tmp_53_fu_546_p3;
wire   [7:0] shl_ln75_53_fu_540_p2;
wire   [7:0] select_ln53_11_fu_554_p3;
wire   [7:0] xor_ln50_41_fu_534_p2;
wire   [7:0] xor_ln53_40_fu_568_p2;
wire   [7:0] xor_ln53_39_fu_562_p2;
wire   [7:0] xor_ln55_11_fu_580_p2;
wire   [0:0] tmp_54_fu_592_p3;
wire   [7:0] shl_ln75_54_fu_586_p2;
wire   [7:0] select_ln57_11_fu_600_p3;
wire   [7:0] xor_ln57_40_fu_614_p2;
wire   [7:0] xor_ln57_39_fu_608_p2;
wire   [7:0] xor_ln59_11_fu_626_p2;
wire   [0:0] tmp_55_fu_638_p3;
wire   [7:0] shl_ln75_55_fu_632_p2;
wire   [7:0] select_ln61_11_fu_646_p3;
wire   [7:0] xor_ln61_40_fu_660_p2;
wire   [7:0] xor_ln61_39_fu_654_p2;
wire   [7:0] xor_ln63_11_fu_672_p2;
wire   [0:0] tmp_56_fu_684_p3;
wire   [7:0] select_ln65_11_fu_692_p3;
wire   [7:0] xor_ln65_25_fu_700_p2;
wire   [7:0] shl_ln75_56_fu_678_p2;
wire   [7:0] xor_ln50_42_fu_712_p2;
wire   [7:0] xor_ln50_43_fu_718_p2;
wire   [0:0] tmp_57_fu_736_p3;
wire   [7:0] shl_ln75_57_fu_730_p2;
wire   [7:0] select_ln53_12_fu_744_p3;
wire   [7:0] xor_ln50_44_fu_724_p2;
wire   [7:0] xor_ln53_43_fu_758_p2;
wire   [7:0] xor_ln53_42_fu_752_p2;
wire   [7:0] xor_ln55_12_fu_770_p2;
wire   [0:0] tmp_58_fu_782_p3;
wire   [7:0] shl_ln75_58_fu_776_p2;
wire   [7:0] select_ln57_12_fu_790_p3;
wire   [7:0] xor_ln57_43_fu_804_p2;
wire   [7:0] xor_ln57_42_fu_798_p2;
wire   [7:0] xor_ln59_12_fu_816_p2;
wire   [0:0] tmp_59_fu_828_p3;
wire   [7:0] shl_ln75_59_fu_822_p2;
wire   [7:0] select_ln61_12_fu_836_p3;
wire   [7:0] xor_ln61_43_fu_850_p2;
wire   [7:0] xor_ln61_42_fu_844_p2;
wire   [7:0] xor_ln63_12_fu_862_p2;
wire   [0:0] tmp_60_fu_874_p3;
wire   [7:0] select_ln65_12_fu_882_p3;
wire   [7:0] xor_ln65_27_fu_890_p2;
wire   [7:0] shl_ln75_60_fu_868_p2;
wire   [7:0] xor_ln53_35_fu_194_p2;
wire   [7:0] xor_ln57_35_fu_240_p2;
wire   [7:0] xor_ln61_35_fu_286_p2;
wire   [7:0] xor_ln65_22_fu_326_p2;
wire   [7:0] xor_ln53_38_fu_384_p2;
wire   [7:0] xor_ln57_38_fu_430_p2;
wire   [7:0] xor_ln61_38_fu_476_p2;
wire   [7:0] xor_ln65_24_fu_516_p2;
wire   [7:0] xor_ln53_41_fu_574_p2;
wire   [7:0] xor_ln57_41_fu_620_p2;
wire   [7:0] xor_ln61_41_fu_666_p2;
wire   [7:0] xor_ln65_26_fu_706_p2;
wire   [7:0] xor_ln53_44_fu_764_p2;
wire   [7:0] xor_ln57_44_fu_810_p2;
wire   [7:0] xor_ln61_44_fu_856_p2;
wire   [7:0] xor_ln65_28_fu_896_p2;
reg   [7:0] ap_return_0_preg;
reg   [7:0] ap_return_1_preg;
reg   [7:0] ap_return_2_preg;
reg   [7:0] ap_return_3_preg;
reg   [7:0] ap_return_4_preg;
reg   [7:0] ap_return_5_preg;
reg   [7:0] ap_return_6_preg;
reg   [7:0] ap_return_7_preg;
reg   [7:0] ap_return_8_preg;
reg   [7:0] ap_return_9_preg;
reg   [7:0] ap_return_10_preg;
reg   [7:0] ap_return_11_preg;
reg   [7:0] ap_return_12_preg;
reg   [7:0] ap_return_13_preg;
reg   [7:0] ap_return_14_preg;
reg   [7:0] ap_return_15_preg;
reg   [0:0] ap_NS_fsm;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 1'd1;
#0 ap_return_0_preg = 8'd0;
#0 ap_return_1_preg = 8'd0;
#0 ap_return_2_preg = 8'd0;
#0 ap_return_3_preg = 8'd0;
#0 ap_return_4_preg = 8'd0;
#0 ap_return_5_preg = 8'd0;
#0 ap_return_6_preg = 8'd0;
#0 ap_return_7_preg = 8'd0;
#0 ap_return_8_preg = 8'd0;
#0 ap_return_9_preg = 8'd0;
#0 ap_return_10_preg = 8'd0;
#0 ap_return_11_preg = 8'd0;
#0 ap_return_12_preg = 8'd0;
#0 ap_return_13_preg = 8'd0;
#0 ap_return_14_preg = 8'd0;
#0 ap_return_15_preg = 8'd0;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_return_0_preg <= 8'd0;
    end else begin
        if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_return_0_preg <= xor_ln53_35_fu_194_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_return_10_preg <= 8'd0;
    end else begin
        if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_return_10_preg <= xor_ln61_41_fu_666_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_return_11_preg <= 8'd0;
    end else begin
        if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_return_11_preg <= xor_ln65_26_fu_706_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_return_12_preg <= 8'd0;
    end else begin
        if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_return_12_preg <= xor_ln53_44_fu_764_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_return_13_preg <= 8'd0;
    end else begin
        if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_return_13_preg <= xor_ln57_44_fu_810_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_return_14_preg <= 8'd0;
    end else begin
        if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_return_14_preg <= xor_ln61_44_fu_856_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_return_15_preg <= 8'd0;
    end else begin
        if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_return_15_preg <= xor_ln65_28_fu_896_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_return_1_preg <= 8'd0;
    end else begin
        if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_return_1_preg <= xor_ln57_35_fu_240_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_return_2_preg <= 8'd0;
    end else begin
        if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_return_2_preg <= xor_ln61_35_fu_286_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_return_3_preg <= 8'd0;
    end else begin
        if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_return_3_preg <= xor_ln65_22_fu_326_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_return_4_preg <= 8'd0;
    end else begin
        if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_return_4_preg <= xor_ln53_38_fu_384_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_return_5_preg <= 8'd0;
    end else begin
        if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_return_5_preg <= xor_ln57_38_fu_430_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_return_6_preg <= 8'd0;
    end else begin
        if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_return_6_preg <= xor_ln61_38_fu_476_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_return_7_preg <= 8'd0;
    end else begin
        if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_return_7_preg <= xor_ln65_24_fu_516_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_return_8_preg <= 8'd0;
    end else begin
        if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_return_8_preg <= xor_ln53_41_fu_574_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_return_9_preg <= 8'd0;
    end else begin
        if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_return_9_preg <= xor_ln57_41_fu_620_p2;
        end
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_return_0 = xor_ln53_35_fu_194_p2;
    end else begin
        ap_return_0 = ap_return_0_preg;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_return_1 = xor_ln57_35_fu_240_p2;
    end else begin
        ap_return_1 = ap_return_1_preg;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_return_10 = xor_ln61_41_fu_666_p2;
    end else begin
        ap_return_10 = ap_return_10_preg;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_return_11 = xor_ln65_26_fu_706_p2;
    end else begin
        ap_return_11 = ap_return_11_preg;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_return_12 = xor_ln53_44_fu_764_p2;
    end else begin
        ap_return_12 = ap_return_12_preg;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_return_13 = xor_ln57_44_fu_810_p2;
    end else begin
        ap_return_13 = ap_return_13_preg;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_return_14 = xor_ln61_44_fu_856_p2;
    end else begin
        ap_return_14 = ap_return_14_preg;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_return_15 = xor_ln65_28_fu_896_p2;
    end else begin
        ap_return_15 = ap_return_15_preg;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_return_2 = xor_ln61_35_fu_286_p2;
    end else begin
        ap_return_2 = ap_return_2_preg;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_return_3 = xor_ln65_22_fu_326_p2;
    end else begin
        ap_return_3 = ap_return_3_preg;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_return_4 = xor_ln53_38_fu_384_p2;
    end else begin
        ap_return_4 = ap_return_4_preg;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_return_5 = xor_ln57_38_fu_430_p2;
    end else begin
        ap_return_5 = ap_return_5_preg;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_return_6 = xor_ln61_38_fu_476_p2;
    end else begin
        ap_return_6 = ap_return_6_preg;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_return_7 = xor_ln65_24_fu_516_p2;
    end else begin
        ap_return_7 = ap_return_7_preg;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_return_8 = xor_ln53_41_fu_574_p2;
    end else begin
        ap_return_8 = ap_return_8_preg;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_return_9 = xor_ln57_41_fu_620_p2;
    end else begin
        ap_return_9 = ap_return_9_preg;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

always @ (*) begin
    ap_block_state1 = ((ap_start == 1'b0) | (ap_done_reg == 1'b1));
end

assign select_ln53_10_fu_364_p3 = ((tmp_49_fu_356_p3[0:0] == 1'b1) ? 8'd27 : 8'd0);

assign select_ln53_11_fu_554_p3 = ((tmp_53_fu_546_p3[0:0] == 1'b1) ? 8'd27 : 8'd0);

assign select_ln53_12_fu_744_p3 = ((tmp_57_fu_736_p3[0:0] == 1'b1) ? 8'd27 : 8'd0);

assign select_ln53_fu_174_p3 = ((tmp_fu_166_p3[0:0] == 1'b1) ? 8'd27 : 8'd0);

assign select_ln57_10_fu_410_p3 = ((tmp_50_fu_402_p3[0:0] == 1'b1) ? 8'd27 : 8'd0);

assign select_ln57_11_fu_600_p3 = ((tmp_54_fu_592_p3[0:0] == 1'b1) ? 8'd27 : 8'd0);

assign select_ln57_12_fu_790_p3 = ((tmp_58_fu_782_p3[0:0] == 1'b1) ? 8'd27 : 8'd0);

assign select_ln57_fu_220_p3 = ((tmp_46_fu_212_p3[0:0] == 1'b1) ? 8'd27 : 8'd0);

assign select_ln61_10_fu_456_p3 = ((tmp_51_fu_448_p3[0:0] == 1'b1) ? 8'd27 : 8'd0);

assign select_ln61_11_fu_646_p3 = ((tmp_55_fu_638_p3[0:0] == 1'b1) ? 8'd27 : 8'd0);

assign select_ln61_12_fu_836_p3 = ((tmp_59_fu_828_p3[0:0] == 1'b1) ? 8'd27 : 8'd0);

assign select_ln61_fu_266_p3 = ((tmp_47_fu_258_p3[0:0] == 1'b1) ? 8'd27 : 8'd0);

assign select_ln65_10_fu_502_p3 = ((tmp_52_fu_494_p3[0:0] == 1'b1) ? 8'd27 : 8'd0);

assign select_ln65_11_fu_692_p3 = ((tmp_56_fu_684_p3[0:0] == 1'b1) ? 8'd27 : 8'd0);

assign select_ln65_12_fu_882_p3 = ((tmp_60_fu_874_p3[0:0] == 1'b1) ? 8'd27 : 8'd0);

assign select_ln65_fu_312_p3 = ((tmp_48_fu_304_p3[0:0] == 1'b1) ? 8'd27 : 8'd0);

assign shl_ln75_46_fu_206_p2 = xor_ln55_fu_200_p2 << 8'd1;

assign shl_ln75_47_fu_252_p2 = xor_ln59_fu_246_p2 << 8'd1;

assign shl_ln75_48_fu_298_p2 = xor_ln63_fu_292_p2 << 8'd1;

assign shl_ln75_49_fu_350_p2 = xor_ln50_36_fu_332_p2 << 8'd1;

assign shl_ln75_50_fu_396_p2 = xor_ln55_10_fu_390_p2 << 8'd1;

assign shl_ln75_51_fu_442_p2 = xor_ln59_10_fu_436_p2 << 8'd1;

assign shl_ln75_52_fu_488_p2 = xor_ln63_10_fu_482_p2 << 8'd1;

assign shl_ln75_53_fu_540_p2 = xor_ln50_39_fu_522_p2 << 8'd1;

assign shl_ln75_54_fu_586_p2 = xor_ln55_11_fu_580_p2 << 8'd1;

assign shl_ln75_55_fu_632_p2 = xor_ln59_11_fu_626_p2 << 8'd1;

assign shl_ln75_56_fu_678_p2 = xor_ln63_11_fu_672_p2 << 8'd1;

assign shl_ln75_57_fu_730_p2 = xor_ln50_42_fu_712_p2 << 8'd1;

assign shl_ln75_58_fu_776_p2 = xor_ln55_12_fu_770_p2 << 8'd1;

assign shl_ln75_59_fu_822_p2 = xor_ln59_12_fu_816_p2 << 8'd1;

assign shl_ln75_60_fu_868_p2 = xor_ln63_12_fu_862_p2 << 8'd1;

assign shl_ln75_fu_160_p2 = xor_ln50_fu_142_p2 << 8'd1;

assign tmp_46_fu_212_p3 = xor_ln55_fu_200_p2[32'd7];

assign tmp_47_fu_258_p3 = xor_ln59_fu_246_p2[32'd7];

assign tmp_48_fu_304_p3 = xor_ln63_fu_292_p2[32'd7];

assign tmp_49_fu_356_p3 = xor_ln50_36_fu_332_p2[32'd7];

assign tmp_50_fu_402_p3 = xor_ln55_10_fu_390_p2[32'd7];

assign tmp_51_fu_448_p3 = xor_ln59_10_fu_436_p2[32'd7];

assign tmp_52_fu_494_p3 = xor_ln63_10_fu_482_p2[32'd7];

assign tmp_53_fu_546_p3 = xor_ln50_39_fu_522_p2[32'd7];

assign tmp_54_fu_592_p3 = xor_ln55_11_fu_580_p2[32'd7];

assign tmp_55_fu_638_p3 = xor_ln59_11_fu_626_p2[32'd7];

assign tmp_56_fu_684_p3 = xor_ln63_11_fu_672_p2[32'd7];

assign tmp_57_fu_736_p3 = xor_ln50_42_fu_712_p2[32'd7];

assign tmp_58_fu_782_p3 = xor_ln55_12_fu_770_p2[32'd7];

assign tmp_59_fu_828_p3 = xor_ln59_12_fu_816_p2[32'd7];

assign tmp_60_fu_874_p3 = xor_ln63_12_fu_862_p2[32'd7];

assign tmp_fu_166_p3 = xor_ln50_fu_142_p2[32'd7];

assign xor_ln50_34_fu_148_p2 = (xor_ln50_fu_142_p2 ^ p_read2);

assign xor_ln50_35_fu_154_p2 = (xor_ln50_34_fu_148_p2 ^ p_read3);

assign xor_ln50_36_fu_332_p2 = (p_read5 ^ p_read4);

assign xor_ln50_37_fu_338_p2 = (xor_ln50_36_fu_332_p2 ^ p_read6);

assign xor_ln50_38_fu_344_p2 = (xor_ln50_37_fu_338_p2 ^ p_read7);

assign xor_ln50_39_fu_522_p2 = (p_read9 ^ p_read8);

assign xor_ln50_40_fu_528_p2 = (xor_ln50_39_fu_522_p2 ^ p_read10);

assign xor_ln50_41_fu_534_p2 = (xor_ln50_40_fu_528_p2 ^ p_read11);

assign xor_ln50_42_fu_712_p2 = (p_read13 ^ p_read12);

assign xor_ln50_43_fu_718_p2 = (xor_ln50_42_fu_712_p2 ^ p_read14);

assign xor_ln50_44_fu_724_p2 = (xor_ln50_43_fu_718_p2 ^ p_read15);

assign xor_ln50_fu_142_p2 = (p_read1 ^ p_read);

assign xor_ln53_34_fu_188_p2 = (xor_ln50_35_fu_154_p2 ^ select_ln53_fu_174_p3);

assign xor_ln53_35_fu_194_p2 = (xor_ln53_fu_182_p2 ^ xor_ln53_34_fu_188_p2);

assign xor_ln53_36_fu_372_p2 = (shl_ln75_49_fu_350_p2 ^ p_read4);

assign xor_ln53_37_fu_378_p2 = (xor_ln50_38_fu_344_p2 ^ select_ln53_10_fu_364_p3);

assign xor_ln53_38_fu_384_p2 = (xor_ln53_37_fu_378_p2 ^ xor_ln53_36_fu_372_p2);

assign xor_ln53_39_fu_562_p2 = (shl_ln75_53_fu_540_p2 ^ p_read8);

assign xor_ln53_40_fu_568_p2 = (xor_ln50_41_fu_534_p2 ^ select_ln53_11_fu_554_p3);

assign xor_ln53_41_fu_574_p2 = (xor_ln53_40_fu_568_p2 ^ xor_ln53_39_fu_562_p2);

assign xor_ln53_42_fu_752_p2 = (shl_ln75_57_fu_730_p2 ^ p_read12);

assign xor_ln53_43_fu_758_p2 = (xor_ln50_44_fu_724_p2 ^ select_ln53_12_fu_744_p3);

assign xor_ln53_44_fu_764_p2 = (xor_ln53_43_fu_758_p2 ^ xor_ln53_42_fu_752_p2);

assign xor_ln53_fu_182_p2 = (shl_ln75_fu_160_p2 ^ p_read);

assign xor_ln55_10_fu_390_p2 = (p_read6 ^ p_read5);

assign xor_ln55_11_fu_580_p2 = (p_read9 ^ p_read10);

assign xor_ln55_12_fu_770_p2 = (p_read14 ^ p_read13);

assign xor_ln55_fu_200_p2 = (p_read2 ^ p_read1);

assign xor_ln57_34_fu_234_p2 = (xor_ln50_35_fu_154_p2 ^ select_ln57_fu_220_p3);

assign xor_ln57_35_fu_240_p2 = (xor_ln57_fu_228_p2 ^ xor_ln57_34_fu_234_p2);

assign xor_ln57_36_fu_418_p2 = (shl_ln75_50_fu_396_p2 ^ p_read5);

assign xor_ln57_37_fu_424_p2 = (xor_ln50_38_fu_344_p2 ^ select_ln57_10_fu_410_p3);

assign xor_ln57_38_fu_430_p2 = (xor_ln57_37_fu_424_p2 ^ xor_ln57_36_fu_418_p2);

assign xor_ln57_39_fu_608_p2 = (shl_ln75_54_fu_586_p2 ^ p_read9);

assign xor_ln57_40_fu_614_p2 = (xor_ln50_41_fu_534_p2 ^ select_ln57_11_fu_600_p3);

assign xor_ln57_41_fu_620_p2 = (xor_ln57_40_fu_614_p2 ^ xor_ln57_39_fu_608_p2);

assign xor_ln57_42_fu_798_p2 = (shl_ln75_58_fu_776_p2 ^ p_read13);

assign xor_ln57_43_fu_804_p2 = (xor_ln50_44_fu_724_p2 ^ select_ln57_12_fu_790_p3);

assign xor_ln57_44_fu_810_p2 = (xor_ln57_43_fu_804_p2 ^ xor_ln57_42_fu_798_p2);

assign xor_ln57_fu_228_p2 = (shl_ln75_46_fu_206_p2 ^ p_read1);

assign xor_ln59_10_fu_436_p2 = (p_read7 ^ p_read6);

assign xor_ln59_11_fu_626_p2 = (p_read11 ^ p_read10);

assign xor_ln59_12_fu_816_p2 = (p_read15 ^ p_read14);

assign xor_ln59_fu_246_p2 = (p_read3 ^ p_read2);

assign xor_ln61_34_fu_280_p2 = (shl_ln75_47_fu_252_p2 ^ select_ln61_fu_266_p3);

assign xor_ln61_35_fu_286_p2 = (xor_ln61_fu_274_p2 ^ xor_ln61_34_fu_280_p2);

assign xor_ln61_36_fu_464_p2 = (xor_ln50_36_fu_332_p2 ^ p_read7);

assign xor_ln61_37_fu_470_p2 = (shl_ln75_51_fu_442_p2 ^ select_ln61_10_fu_456_p3);

assign xor_ln61_38_fu_476_p2 = (xor_ln61_37_fu_470_p2 ^ xor_ln61_36_fu_464_p2);

assign xor_ln61_39_fu_654_p2 = (xor_ln50_39_fu_522_p2 ^ p_read11);

assign xor_ln61_40_fu_660_p2 = (shl_ln75_55_fu_632_p2 ^ select_ln61_11_fu_646_p3);

assign xor_ln61_41_fu_666_p2 = (xor_ln61_40_fu_660_p2 ^ xor_ln61_39_fu_654_p2);

assign xor_ln61_42_fu_844_p2 = (xor_ln50_42_fu_712_p2 ^ p_read15);

assign xor_ln61_43_fu_850_p2 = (shl_ln75_59_fu_822_p2 ^ select_ln61_12_fu_836_p3);

assign xor_ln61_44_fu_856_p2 = (xor_ln61_43_fu_850_p2 ^ xor_ln61_42_fu_844_p2);

assign xor_ln61_fu_274_p2 = (xor_ln50_fu_142_p2 ^ p_read3);

assign xor_ln63_10_fu_482_p2 = (p_read7 ^ p_read4);

assign xor_ln63_11_fu_672_p2 = (p_read8 ^ p_read11);

assign xor_ln63_12_fu_862_p2 = (p_read15 ^ p_read12);

assign xor_ln63_fu_292_p2 = (p_read3 ^ p_read);

assign xor_ln65_22_fu_326_p2 = (xor_ln65_fu_320_p2 ^ shl_ln75_48_fu_298_p2);

assign xor_ln65_23_fu_510_p2 = (xor_ln50_37_fu_338_p2 ^ select_ln65_10_fu_502_p3);

assign xor_ln65_24_fu_516_p2 = (xor_ln65_23_fu_510_p2 ^ shl_ln75_52_fu_488_p2);

assign xor_ln65_25_fu_700_p2 = (xor_ln50_40_fu_528_p2 ^ select_ln65_11_fu_692_p3);

assign xor_ln65_26_fu_706_p2 = (xor_ln65_25_fu_700_p2 ^ shl_ln75_56_fu_678_p2);

assign xor_ln65_27_fu_890_p2 = (xor_ln50_43_fu_718_p2 ^ select_ln65_12_fu_882_p3);

assign xor_ln65_28_fu_896_p2 = (xor_ln65_27_fu_890_p2 ^ shl_ln75_60_fu_868_p2);

assign xor_ln65_fu_320_p2 = (xor_ln50_34_fu_148_p2 ^ select_ln65_fu_312_p3);

endmodule //AES_ECB_encrypt_MixColumns76
