// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
// Version: 2020.2
// Copyright (C) Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module AES_ECB_encrypt_Cipher_Block_split196237_proc (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        p_read,
        encrypt_0,
        encrypt_0_ap_vld,
        p_read1,
        encrypt_1,
        encrypt_1_ap_vld,
        p_read2,
        encrypt_2,
        encrypt_2_ap_vld,
        p_read3,
        encrypt_3,
        encrypt_3_ap_vld,
        p_read4,
        encrypt_4,
        encrypt_4_ap_vld,
        p_read5,
        encrypt_5,
        encrypt_5_ap_vld,
        p_read6,
        encrypt_6,
        encrypt_6_ap_vld,
        p_read7,
        encrypt_7,
        encrypt_7_ap_vld,
        p_read8,
        encrypt_8,
        encrypt_8_ap_vld,
        p_read9,
        encrypt_9,
        encrypt_9_ap_vld,
        p_read10,
        encrypt_10,
        encrypt_10_ap_vld,
        p_read11,
        encrypt_11,
        encrypt_11_ap_vld,
        p_read12,
        encrypt_12,
        encrypt_12_ap_vld,
        p_read13,
        encrypt_13,
        encrypt_13_ap_vld,
        p_read14,
        encrypt_14,
        encrypt_14_ap_vld,
        p_read15,
        encrypt_15,
        encrypt_15_ap_vld
);

parameter    ap_ST_fsm_state1 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
input  [7:0] p_read;
output  [7:0] encrypt_0;
output   encrypt_0_ap_vld;
input  [7:0] p_read1;
output  [7:0] encrypt_1;
output   encrypt_1_ap_vld;
input  [7:0] p_read2;
output  [7:0] encrypt_2;
output   encrypt_2_ap_vld;
input  [7:0] p_read3;
output  [7:0] encrypt_3;
output   encrypt_3_ap_vld;
input  [7:0] p_read4;
output  [7:0] encrypt_4;
output   encrypt_4_ap_vld;
input  [7:0] p_read5;
output  [7:0] encrypt_5;
output   encrypt_5_ap_vld;
input  [7:0] p_read6;
output  [7:0] encrypt_6;
output   encrypt_6_ap_vld;
input  [7:0] p_read7;
output  [7:0] encrypt_7;
output   encrypt_7_ap_vld;
input  [7:0] p_read8;
output  [7:0] encrypt_8;
output   encrypt_8_ap_vld;
input  [7:0] p_read9;
output  [7:0] encrypt_9;
output   encrypt_9_ap_vld;
input  [7:0] p_read10;
output  [7:0] encrypt_10;
output   encrypt_10_ap_vld;
input  [7:0] p_read11;
output  [7:0] encrypt_11;
output   encrypt_11_ap_vld;
input  [7:0] p_read12;
output  [7:0] encrypt_12;
output   encrypt_12_ap_vld;
input  [7:0] p_read13;
output  [7:0] encrypt_13;
output   encrypt_13_ap_vld;
input  [7:0] p_read14;
output  [7:0] encrypt_14;
output   encrypt_14_ap_vld;
input  [7:0] p_read15;
output  [7:0] encrypt_15;
output   encrypt_15_ap_vld;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg[7:0] encrypt_0;
reg encrypt_0_ap_vld;
reg[7:0] encrypt_1;
reg encrypt_1_ap_vld;
reg[7:0] encrypt_2;
reg encrypt_2_ap_vld;
reg[7:0] encrypt_3;
reg encrypt_3_ap_vld;
reg[7:0] encrypt_4;
reg encrypt_4_ap_vld;
reg[7:0] encrypt_5;
reg encrypt_5_ap_vld;
reg[7:0] encrypt_6;
reg encrypt_6_ap_vld;
reg[7:0] encrypt_7;
reg encrypt_7_ap_vld;
reg[7:0] encrypt_8;
reg encrypt_8_ap_vld;
reg[7:0] encrypt_9;
reg encrypt_9_ap_vld;
reg[7:0] encrypt_10;
reg encrypt_10_ap_vld;
reg[7:0] encrypt_11;
reg encrypt_11_ap_vld;
reg[7:0] encrypt_12;
reg encrypt_12_ap_vld;
reg[7:0] encrypt_13;
reg encrypt_13_ap_vld;
reg[7:0] encrypt_14;
reg encrypt_14_ap_vld;
reg[7:0] encrypt_15;
reg encrypt_15_ap_vld;

reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    ap_block_state1;
reg   [7:0] encrypt_0_preg;
reg   [7:0] encrypt_1_preg;
reg   [7:0] encrypt_2_preg;
reg   [7:0] encrypt_3_preg;
reg   [7:0] encrypt_4_preg;
reg   [7:0] encrypt_5_preg;
reg   [7:0] encrypt_6_preg;
reg   [7:0] encrypt_7_preg;
reg   [7:0] encrypt_8_preg;
reg   [7:0] encrypt_9_preg;
reg   [7:0] encrypt_10_preg;
reg   [7:0] encrypt_11_preg;
reg   [7:0] encrypt_12_preg;
reg   [7:0] encrypt_13_preg;
reg   [7:0] encrypt_14_preg;
reg   [7:0] encrypt_15_preg;
reg   [0:0] ap_NS_fsm;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 1'd1;
#0 encrypt_0_preg = 8'd0;
#0 encrypt_1_preg = 8'd0;
#0 encrypt_2_preg = 8'd0;
#0 encrypt_3_preg = 8'd0;
#0 encrypt_4_preg = 8'd0;
#0 encrypt_5_preg = 8'd0;
#0 encrypt_6_preg = 8'd0;
#0 encrypt_7_preg = 8'd0;
#0 encrypt_8_preg = 8'd0;
#0 encrypt_9_preg = 8'd0;
#0 encrypt_10_preg = 8'd0;
#0 encrypt_11_preg = 8'd0;
#0 encrypt_12_preg = 8'd0;
#0 encrypt_13_preg = 8'd0;
#0 encrypt_14_preg = 8'd0;
#0 encrypt_15_preg = 8'd0;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        encrypt_0_preg <= 8'd0;
    end else begin
        if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
            encrypt_0_preg <= p_read;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        encrypt_10_preg <= 8'd0;
    end else begin
        if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
            encrypt_10_preg <= p_read10;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        encrypt_11_preg <= 8'd0;
    end else begin
        if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
            encrypt_11_preg <= p_read11;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        encrypt_12_preg <= 8'd0;
    end else begin
        if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
            encrypt_12_preg <= p_read12;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        encrypt_13_preg <= 8'd0;
    end else begin
        if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
            encrypt_13_preg <= p_read13;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        encrypt_14_preg <= 8'd0;
    end else begin
        if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
            encrypt_14_preg <= p_read14;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        encrypt_15_preg <= 8'd0;
    end else begin
        if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
            encrypt_15_preg <= p_read15;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        encrypt_1_preg <= 8'd0;
    end else begin
        if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
            encrypt_1_preg <= p_read1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        encrypt_2_preg <= 8'd0;
    end else begin
        if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
            encrypt_2_preg <= p_read2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        encrypt_3_preg <= 8'd0;
    end else begin
        if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
            encrypt_3_preg <= p_read3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        encrypt_4_preg <= 8'd0;
    end else begin
        if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
            encrypt_4_preg <= p_read4;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        encrypt_5_preg <= 8'd0;
    end else begin
        if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
            encrypt_5_preg <= p_read5;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        encrypt_6_preg <= 8'd0;
    end else begin
        if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
            encrypt_6_preg <= p_read6;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        encrypt_7_preg <= 8'd0;
    end else begin
        if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
            encrypt_7_preg <= p_read7;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        encrypt_8_preg <= 8'd0;
    end else begin
        if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
            encrypt_8_preg <= p_read8;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        encrypt_9_preg <= 8'd0;
    end else begin
        if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
            encrypt_9_preg <= p_read9;
        end
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        encrypt_0 = p_read;
    end else begin
        encrypt_0 = encrypt_0_preg;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        encrypt_0_ap_vld = 1'b1;
    end else begin
        encrypt_0_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        encrypt_1 = p_read1;
    end else begin
        encrypt_1 = encrypt_1_preg;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        encrypt_10 = p_read10;
    end else begin
        encrypt_10 = encrypt_10_preg;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        encrypt_10_ap_vld = 1'b1;
    end else begin
        encrypt_10_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        encrypt_11 = p_read11;
    end else begin
        encrypt_11 = encrypt_11_preg;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        encrypt_11_ap_vld = 1'b1;
    end else begin
        encrypt_11_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        encrypt_12 = p_read12;
    end else begin
        encrypt_12 = encrypt_12_preg;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        encrypt_12_ap_vld = 1'b1;
    end else begin
        encrypt_12_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        encrypt_13 = p_read13;
    end else begin
        encrypt_13 = encrypt_13_preg;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        encrypt_13_ap_vld = 1'b1;
    end else begin
        encrypt_13_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        encrypt_14 = p_read14;
    end else begin
        encrypt_14 = encrypt_14_preg;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        encrypt_14_ap_vld = 1'b1;
    end else begin
        encrypt_14_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        encrypt_15 = p_read15;
    end else begin
        encrypt_15 = encrypt_15_preg;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        encrypt_15_ap_vld = 1'b1;
    end else begin
        encrypt_15_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        encrypt_1_ap_vld = 1'b1;
    end else begin
        encrypt_1_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        encrypt_2 = p_read2;
    end else begin
        encrypt_2 = encrypt_2_preg;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        encrypt_2_ap_vld = 1'b1;
    end else begin
        encrypt_2_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        encrypt_3 = p_read3;
    end else begin
        encrypt_3 = encrypt_3_preg;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        encrypt_3_ap_vld = 1'b1;
    end else begin
        encrypt_3_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        encrypt_4 = p_read4;
    end else begin
        encrypt_4 = encrypt_4_preg;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        encrypt_4_ap_vld = 1'b1;
    end else begin
        encrypt_4_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        encrypt_5 = p_read5;
    end else begin
        encrypt_5 = encrypt_5_preg;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        encrypt_5_ap_vld = 1'b1;
    end else begin
        encrypt_5_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        encrypt_6 = p_read6;
    end else begin
        encrypt_6 = encrypt_6_preg;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        encrypt_6_ap_vld = 1'b1;
    end else begin
        encrypt_6_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        encrypt_7 = p_read7;
    end else begin
        encrypt_7 = encrypt_7_preg;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        encrypt_7_ap_vld = 1'b1;
    end else begin
        encrypt_7_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        encrypt_8 = p_read8;
    end else begin
        encrypt_8 = encrypt_8_preg;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        encrypt_8_ap_vld = 1'b1;
    end else begin
        encrypt_8_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        encrypt_9 = p_read9;
    end else begin
        encrypt_9 = encrypt_9_preg;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        encrypt_9_ap_vld = 1'b1;
    end else begin
        encrypt_9_ap_vld = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

always @ (*) begin
    ap_block_state1 = ((ap_start == 1'b0) | (ap_done_reg == 1'b1));
end

endmodule //AES_ECB_encrypt_Cipher_Block_split196237_proc
