-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
-- Version: 2020.2
-- Copyright (C) Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity Cipher_Stream_Four_Term_Multiplication is
port (
    ap_ready : OUT STD_LOGIC;
    p_read : IN STD_LOGIC_VECTOR (7 downto 0);
    p_read1 : IN STD_LOGIC_VECTOR (7 downto 0);
    p_read2 : IN STD_LOGIC_VECTOR (7 downto 0);
    p_read3 : IN STD_LOGIC_VECTOR (7 downto 0);
    ap_return_0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    ap_return_1 : OUT STD_LOGIC_VECTOR (7 downto 0);
    ap_return_2 : OUT STD_LOGIC_VECTOR (7 downto 0);
    ap_return_3 : OUT STD_LOGIC_VECTOR (7 downto 0) );
end;


architecture behav of Cipher_Stream_Four_Term_Multiplication is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv8_1 : STD_LOGIC_VECTOR (7 downto 0) := "00000001";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv8_1B : STD_LOGIC_VECTOR (7 downto 0) := "00011011";
    constant ap_const_logic_0 : STD_LOGIC := '0';

attribute shreg_extract : string;
    signal result_fu_44_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_fu_50_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal result_1_fu_58_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal result_3_fu_72_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_1_fu_78_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal result_4_fu_86_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal result_2_fu_64_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal result_5_fu_92_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal xor_ln15_1_fu_106_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal xor_ln15_2_fu_112_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal xor_ln15_fu_100_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal result_6_fu_124_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_2_fu_130_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal result_7_fu_138_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal xor_ln16_fu_152_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal result_8_fu_144_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal xor_ln16_2_fu_164_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal xor_ln16_1_fu_158_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal result_9_fu_176_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_3_fu_182_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal result_10_fu_190_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal result_11_fu_196_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal xor_ln17_1_fu_210_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal xor_ln17_fu_204_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal xor_ln18_1_fu_228_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal xor_ln18_2_fu_234_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal xor_ln18_fu_222_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal xor_ln15_3_fu_118_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal xor_ln16_3_fu_170_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal xor_ln17_2_fu_216_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal xor_ln18_3_fu_240_p2 : STD_LOGIC_VECTOR (7 downto 0);


begin



    ap_ready <= ap_const_logic_1;
    ap_return_0 <= xor_ln15_3_fu_118_p2;
    ap_return_1 <= xor_ln16_3_fu_170_p2;
    ap_return_2 <= xor_ln17_2_fu_216_p2;
    ap_return_3 <= xor_ln18_3_fu_240_p2;
    result_10_fu_190_p2 <= (result_9_fu_176_p2 xor ap_const_lv8_1B);
    result_11_fu_196_p3 <= 
        result_10_fu_190_p2 when (tmp_3_fu_182_p3(0) = '1') else 
        result_9_fu_176_p2;
    result_1_fu_58_p2 <= (result_fu_44_p2 xor ap_const_lv8_1B);
    result_2_fu_64_p3 <= 
        result_1_fu_58_p2 when (tmp_fu_50_p3(0) = '1') else 
        result_fu_44_p2;
    result_3_fu_72_p2 <= std_logic_vector(shift_left(unsigned(p_read1),to_integer(unsigned('0' & ap_const_lv8_1(8-1 downto 0)))));
    result_4_fu_86_p2 <= (result_3_fu_72_p2 xor ap_const_lv8_1B);
    result_5_fu_92_p3 <= 
        result_4_fu_86_p2 when (tmp_1_fu_78_p3(0) = '1') else 
        result_3_fu_72_p2;
    result_6_fu_124_p2 <= std_logic_vector(shift_left(unsigned(p_read2),to_integer(unsigned('0' & ap_const_lv8_1(8-1 downto 0)))));
    result_7_fu_138_p2 <= (result_6_fu_124_p2 xor ap_const_lv8_1B);
    result_8_fu_144_p3 <= 
        result_7_fu_138_p2 when (tmp_2_fu_130_p3(0) = '1') else 
        result_6_fu_124_p2;
    result_9_fu_176_p2 <= std_logic_vector(shift_left(unsigned(p_read3),to_integer(unsigned('0' & ap_const_lv8_1(8-1 downto 0)))));
    result_fu_44_p2 <= std_logic_vector(shift_left(unsigned(p_read),to_integer(unsigned('0' & ap_const_lv8_1(8-1 downto 0)))));
    tmp_1_fu_78_p3 <= p_read1(7 downto 7);
    tmp_2_fu_130_p3 <= p_read2(7 downto 7);
    tmp_3_fu_182_p3 <= p_read3(7 downto 7);
    tmp_fu_50_p3 <= p_read(7 downto 7);
    xor_ln15_1_fu_106_p2 <= (result_5_fu_92_p3 xor p_read3);
    xor_ln15_2_fu_112_p2 <= (xor_ln15_1_fu_106_p2 xor p_read2);
    xor_ln15_3_fu_118_p2 <= (xor_ln15_fu_100_p2 xor xor_ln15_2_fu_112_p2);
    xor_ln15_fu_100_p2 <= (result_2_fu_64_p3 xor p_read);
    xor_ln16_1_fu_158_p2 <= (xor_ln16_fu_152_p2 xor result_5_fu_92_p3);
    xor_ln16_2_fu_164_p2 <= (result_8_fu_144_p3 xor p_read3);
    xor_ln16_3_fu_170_p2 <= (xor_ln16_2_fu_164_p2 xor xor_ln16_1_fu_158_p2);
    xor_ln16_fu_152_p2 <= (p_read1 xor p_read);
    xor_ln17_1_fu_210_p2 <= (result_8_fu_144_p3 xor result_11_fu_196_p3);
    xor_ln17_2_fu_216_p2 <= (xor_ln17_fu_204_p2 xor xor_ln17_1_fu_210_p2);
    xor_ln17_fu_204_p2 <= (xor_ln16_fu_152_p2 xor p_read2);
    xor_ln18_1_fu_228_p2 <= (result_11_fu_196_p3 xor p_read3);
    xor_ln18_2_fu_234_p2 <= (xor_ln18_1_fu_228_p2 xor p_read2);
    xor_ln18_3_fu_240_p2 <= (xor_ln18_fu_222_p2 xor xor_ln18_2_fu_234_p2);
    xor_ln18_fu_222_p2 <= (result_2_fu_64_p3 xor p_read1);
end behav;
