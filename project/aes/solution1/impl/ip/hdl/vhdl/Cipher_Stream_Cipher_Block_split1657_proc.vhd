-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
-- Version: 2020.2
-- Copyright (C) Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity Cipher_Stream_Cipher_Block_split1657_proc is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    p_read : IN STD_LOGIC_VECTOR (7 downto 0);
    out_r : OUT STD_LOGIC_VECTOR (7 downto 0);
    out_r_ap_vld : OUT STD_LOGIC;
    p_read1 : IN STD_LOGIC_VECTOR (7 downto 0);
    out16 : OUT STD_LOGIC_VECTOR (7 downto 0);
    out16_ap_vld : OUT STD_LOGIC;
    p_read2 : IN STD_LOGIC_VECTOR (7 downto 0);
    out17 : OUT STD_LOGIC_VECTOR (7 downto 0);
    out17_ap_vld : OUT STD_LOGIC;
    p_read3 : IN STD_LOGIC_VECTOR (7 downto 0);
    out18 : OUT STD_LOGIC_VECTOR (7 downto 0);
    out18_ap_vld : OUT STD_LOGIC;
    p_read4 : IN STD_LOGIC_VECTOR (7 downto 0);
    out19 : OUT STD_LOGIC_VECTOR (7 downto 0);
    out19_ap_vld : OUT STD_LOGIC;
    p_read5 : IN STD_LOGIC_VECTOR (7 downto 0);
    out20 : OUT STD_LOGIC_VECTOR (7 downto 0);
    out20_ap_vld : OUT STD_LOGIC;
    p_read6 : IN STD_LOGIC_VECTOR (7 downto 0);
    out21 : OUT STD_LOGIC_VECTOR (7 downto 0);
    out21_ap_vld : OUT STD_LOGIC;
    p_read7 : IN STD_LOGIC_VECTOR (7 downto 0);
    out22 : OUT STD_LOGIC_VECTOR (7 downto 0);
    out22_ap_vld : OUT STD_LOGIC;
    p_read8 : IN STD_LOGIC_VECTOR (7 downto 0);
    out23 : OUT STD_LOGIC_VECTOR (7 downto 0);
    out23_ap_vld : OUT STD_LOGIC;
    p_read9 : IN STD_LOGIC_VECTOR (7 downto 0);
    out24 : OUT STD_LOGIC_VECTOR (7 downto 0);
    out24_ap_vld : OUT STD_LOGIC;
    p_read10 : IN STD_LOGIC_VECTOR (7 downto 0);
    out25 : OUT STD_LOGIC_VECTOR (7 downto 0);
    out25_ap_vld : OUT STD_LOGIC;
    p_read11 : IN STD_LOGIC_VECTOR (7 downto 0);
    out26 : OUT STD_LOGIC_VECTOR (7 downto 0);
    out26_ap_vld : OUT STD_LOGIC;
    p_read12 : IN STD_LOGIC_VECTOR (7 downto 0);
    out27 : OUT STD_LOGIC_VECTOR (7 downto 0);
    out27_ap_vld : OUT STD_LOGIC;
    p_read13 : IN STD_LOGIC_VECTOR (7 downto 0);
    out28 : OUT STD_LOGIC_VECTOR (7 downto 0);
    out28_ap_vld : OUT STD_LOGIC;
    p_read14 : IN STD_LOGIC_VECTOR (7 downto 0);
    out29 : OUT STD_LOGIC_VECTOR (7 downto 0);
    out29_ap_vld : OUT STD_LOGIC;
    p_read15 : IN STD_LOGIC_VECTOR (7 downto 0);
    out30 : OUT STD_LOGIC_VECTOR (7 downto 0);
    out30_ap_vld : OUT STD_LOGIC );
end;


architecture behav of Cipher_Stream_Cipher_Block_split1657_proc is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_boolean_1 : BOOLEAN := true;

attribute shreg_extract : string;
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_CS_fsm : STD_LOGIC_VECTOR (0 downto 0) := "1";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal ap_block_state1 : BOOLEAN;
    signal out_r_preg : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    signal out16_preg : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    signal out17_preg : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    signal out18_preg : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    signal out19_preg : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    signal out20_preg : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    signal out21_preg : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    signal out22_preg : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    signal out23_preg : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    signal out24_preg : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    signal out25_preg : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    signal out26_preg : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    signal out27_preg : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    signal out28_preg : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    signal out29_preg : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    signal out30_preg : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    signal ap_NS_fsm : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_ce_reg : STD_LOGIC;


begin




    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    out16_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                out16_preg <= ap_const_lv8_0;
            else
                if ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                    out16_preg <= p_read1;
                end if; 
            end if;
        end if;
    end process;


    out17_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                out17_preg <= ap_const_lv8_0;
            else
                if ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                    out17_preg <= p_read2;
                end if; 
            end if;
        end if;
    end process;


    out18_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                out18_preg <= ap_const_lv8_0;
            else
                if ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                    out18_preg <= p_read3;
                end if; 
            end if;
        end if;
    end process;


    out19_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                out19_preg <= ap_const_lv8_0;
            else
                if ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                    out19_preg <= p_read4;
                end if; 
            end if;
        end if;
    end process;


    out20_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                out20_preg <= ap_const_lv8_0;
            else
                if ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                    out20_preg <= p_read5;
                end if; 
            end if;
        end if;
    end process;


    out21_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                out21_preg <= ap_const_lv8_0;
            else
                if ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                    out21_preg <= p_read6;
                end if; 
            end if;
        end if;
    end process;


    out22_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                out22_preg <= ap_const_lv8_0;
            else
                if ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                    out22_preg <= p_read7;
                end if; 
            end if;
        end if;
    end process;


    out23_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                out23_preg <= ap_const_lv8_0;
            else
                if ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                    out23_preg <= p_read8;
                end if; 
            end if;
        end if;
    end process;


    out24_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                out24_preg <= ap_const_lv8_0;
            else
                if ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                    out24_preg <= p_read9;
                end if; 
            end if;
        end if;
    end process;


    out25_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                out25_preg <= ap_const_lv8_0;
            else
                if ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                    out25_preg <= p_read10;
                end if; 
            end if;
        end if;
    end process;


    out26_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                out26_preg <= ap_const_lv8_0;
            else
                if ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                    out26_preg <= p_read11;
                end if; 
            end if;
        end if;
    end process;


    out27_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                out27_preg <= ap_const_lv8_0;
            else
                if ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                    out27_preg <= p_read12;
                end if; 
            end if;
        end if;
    end process;


    out28_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                out28_preg <= ap_const_lv8_0;
            else
                if ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                    out28_preg <= p_read13;
                end if; 
            end if;
        end if;
    end process;


    out29_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                out29_preg <= ap_const_lv8_0;
            else
                if ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                    out29_preg <= p_read14;
                end if; 
            end if;
        end if;
    end process;


    out30_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                out30_preg <= ap_const_lv8_0;
            else
                if ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                    out30_preg <= p_read15;
                end if; 
            end if;
        end if;
    end process;


    out_r_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                out_r_preg <= ap_const_lv8_0;
            else
                if ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                    out_r_preg <= p_read;
                end if; 
            end if;
        end if;
    end process;


    ap_NS_fsm_assign_proc : process (ap_start, ap_done_reg, ap_CS_fsm, ap_CS_fsm_state1)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "X";
        end case;
    end process;
    ap_CS_fsm_state1 <= ap_CS_fsm(0);

    ap_block_state1_assign_proc : process(ap_start, ap_done_reg)
    begin
                ap_block_state1 <= ((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1));
    end process;


    ap_done_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1)
    begin
        if ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_done_reg;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1)
    begin
        if ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    out16_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, p_read1, out16_preg)
    begin
        if ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            out16 <= p_read1;
        else 
            out16 <= out16_preg;
        end if; 
    end process;


    out16_ap_vld_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1)
    begin
        if ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            out16_ap_vld <= ap_const_logic_1;
        else 
            out16_ap_vld <= ap_const_logic_0;
        end if; 
    end process;


    out17_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, p_read2, out17_preg)
    begin
        if ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            out17 <= p_read2;
        else 
            out17 <= out17_preg;
        end if; 
    end process;


    out17_ap_vld_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1)
    begin
        if ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            out17_ap_vld <= ap_const_logic_1;
        else 
            out17_ap_vld <= ap_const_logic_0;
        end if; 
    end process;


    out18_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, p_read3, out18_preg)
    begin
        if ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            out18 <= p_read3;
        else 
            out18 <= out18_preg;
        end if; 
    end process;


    out18_ap_vld_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1)
    begin
        if ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            out18_ap_vld <= ap_const_logic_1;
        else 
            out18_ap_vld <= ap_const_logic_0;
        end if; 
    end process;


    out19_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, p_read4, out19_preg)
    begin
        if ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            out19 <= p_read4;
        else 
            out19 <= out19_preg;
        end if; 
    end process;


    out19_ap_vld_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1)
    begin
        if ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            out19_ap_vld <= ap_const_logic_1;
        else 
            out19_ap_vld <= ap_const_logic_0;
        end if; 
    end process;


    out20_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, p_read5, out20_preg)
    begin
        if ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            out20 <= p_read5;
        else 
            out20 <= out20_preg;
        end if; 
    end process;


    out20_ap_vld_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1)
    begin
        if ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            out20_ap_vld <= ap_const_logic_1;
        else 
            out20_ap_vld <= ap_const_logic_0;
        end if; 
    end process;


    out21_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, p_read6, out21_preg)
    begin
        if ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            out21 <= p_read6;
        else 
            out21 <= out21_preg;
        end if; 
    end process;


    out21_ap_vld_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1)
    begin
        if ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            out21_ap_vld <= ap_const_logic_1;
        else 
            out21_ap_vld <= ap_const_logic_0;
        end if; 
    end process;


    out22_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, p_read7, out22_preg)
    begin
        if ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            out22 <= p_read7;
        else 
            out22 <= out22_preg;
        end if; 
    end process;


    out22_ap_vld_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1)
    begin
        if ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            out22_ap_vld <= ap_const_logic_1;
        else 
            out22_ap_vld <= ap_const_logic_0;
        end if; 
    end process;


    out23_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, p_read8, out23_preg)
    begin
        if ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            out23 <= p_read8;
        else 
            out23 <= out23_preg;
        end if; 
    end process;


    out23_ap_vld_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1)
    begin
        if ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            out23_ap_vld <= ap_const_logic_1;
        else 
            out23_ap_vld <= ap_const_logic_0;
        end if; 
    end process;


    out24_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, p_read9, out24_preg)
    begin
        if ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            out24 <= p_read9;
        else 
            out24 <= out24_preg;
        end if; 
    end process;


    out24_ap_vld_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1)
    begin
        if ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            out24_ap_vld <= ap_const_logic_1;
        else 
            out24_ap_vld <= ap_const_logic_0;
        end if; 
    end process;


    out25_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, p_read10, out25_preg)
    begin
        if ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            out25 <= p_read10;
        else 
            out25 <= out25_preg;
        end if; 
    end process;


    out25_ap_vld_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1)
    begin
        if ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            out25_ap_vld <= ap_const_logic_1;
        else 
            out25_ap_vld <= ap_const_logic_0;
        end if; 
    end process;


    out26_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, p_read11, out26_preg)
    begin
        if ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            out26 <= p_read11;
        else 
            out26 <= out26_preg;
        end if; 
    end process;


    out26_ap_vld_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1)
    begin
        if ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            out26_ap_vld <= ap_const_logic_1;
        else 
            out26_ap_vld <= ap_const_logic_0;
        end if; 
    end process;


    out27_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, p_read12, out27_preg)
    begin
        if ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            out27 <= p_read12;
        else 
            out27 <= out27_preg;
        end if; 
    end process;


    out27_ap_vld_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1)
    begin
        if ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            out27_ap_vld <= ap_const_logic_1;
        else 
            out27_ap_vld <= ap_const_logic_0;
        end if; 
    end process;


    out28_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, p_read13, out28_preg)
    begin
        if ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            out28 <= p_read13;
        else 
            out28 <= out28_preg;
        end if; 
    end process;


    out28_ap_vld_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1)
    begin
        if ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            out28_ap_vld <= ap_const_logic_1;
        else 
            out28_ap_vld <= ap_const_logic_0;
        end if; 
    end process;


    out29_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, p_read14, out29_preg)
    begin
        if ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            out29 <= p_read14;
        else 
            out29 <= out29_preg;
        end if; 
    end process;


    out29_ap_vld_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1)
    begin
        if ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            out29_ap_vld <= ap_const_logic_1;
        else 
            out29_ap_vld <= ap_const_logic_0;
        end if; 
    end process;


    out30_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, p_read15, out30_preg)
    begin
        if ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            out30 <= p_read15;
        else 
            out30 <= out30_preg;
        end if; 
    end process;


    out30_ap_vld_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1)
    begin
        if ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            out30_ap_vld <= ap_const_logic_1;
        else 
            out30_ap_vld <= ap_const_logic_0;
        end if; 
    end process;


    out_r_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, p_read, out_r_preg)
    begin
        if ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            out_r <= p_read;
        else 
            out_r <= out_r_preg;
        end if; 
    end process;


    out_r_ap_vld_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1)
    begin
        if ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            out_r_ap_vld <= ap_const_logic_1;
        else 
            out_r_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

end behav;
