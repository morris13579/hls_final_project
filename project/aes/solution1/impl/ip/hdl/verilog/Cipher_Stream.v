// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
// Version: 2020.2
// Copyright (C) Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="Cipher_Stream_Cipher_Stream,hls_ip_2020_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020-clg400-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=6.566000,HLS_SYN_LAT=-1,HLS_SYN_TPT=none,HLS_SYN_MEM=172,HLS_SYN_DSP=0,HLS_SYN_FF=71618,HLS_SYN_LUT=68543,HLS_VERSION=2020_2}" *)

module Cipher_Stream (
        ap_clk,
        ap_rst_n,
        in_V_TDATA,
        in_V_TVALID,
        in_V_TREADY,
        out_V_TDATA,
        out_V_TVALID,
        out_V_TREADY,
        s_axi_control_AWVALID,
        s_axi_control_AWREADY,
        s_axi_control_AWADDR,
        s_axi_control_WVALID,
        s_axi_control_WREADY,
        s_axi_control_WDATA,
        s_axi_control_WSTRB,
        s_axi_control_ARVALID,
        s_axi_control_ARREADY,
        s_axi_control_ARADDR,
        s_axi_control_RVALID,
        s_axi_control_RREADY,
        s_axi_control_RDATA,
        s_axi_control_RRESP,
        s_axi_control_BVALID,
        s_axi_control_BREADY,
        s_axi_control_BRESP,
        interrupt
);

parameter    ap_ST_fsm_state1 = 35'd1;
parameter    ap_ST_fsm_state2 = 35'd2;
parameter    ap_ST_fsm_state3 = 35'd4;
parameter    ap_ST_fsm_state4 = 35'd8;
parameter    ap_ST_fsm_state5 = 35'd16;
parameter    ap_ST_fsm_state6 = 35'd32;
parameter    ap_ST_fsm_state7 = 35'd64;
parameter    ap_ST_fsm_state8 = 35'd128;
parameter    ap_ST_fsm_state9 = 35'd256;
parameter    ap_ST_fsm_state10 = 35'd512;
parameter    ap_ST_fsm_state11 = 35'd1024;
parameter    ap_ST_fsm_state12 = 35'd2048;
parameter    ap_ST_fsm_state13 = 35'd4096;
parameter    ap_ST_fsm_state14 = 35'd8192;
parameter    ap_ST_fsm_state15 = 35'd16384;
parameter    ap_ST_fsm_state16 = 35'd32768;
parameter    ap_ST_fsm_state17 = 35'd65536;
parameter    ap_ST_fsm_state18 = 35'd131072;
parameter    ap_ST_fsm_state19 = 35'd262144;
parameter    ap_ST_fsm_state20 = 35'd524288;
parameter    ap_ST_fsm_state21 = 35'd1048576;
parameter    ap_ST_fsm_state22 = 35'd2097152;
parameter    ap_ST_fsm_state23 = 35'd4194304;
parameter    ap_ST_fsm_state24 = 35'd8388608;
parameter    ap_ST_fsm_state25 = 35'd16777216;
parameter    ap_ST_fsm_state26 = 35'd33554432;
parameter    ap_ST_fsm_state27 = 35'd67108864;
parameter    ap_ST_fsm_state28 = 35'd134217728;
parameter    ap_ST_fsm_state29 = 35'd268435456;
parameter    ap_ST_fsm_state30 = 35'd536870912;
parameter    ap_ST_fsm_state31 = 35'd1073741824;
parameter    ap_ST_fsm_state32 = 35'd2147483648;
parameter    ap_ST_fsm_state33 = 35'd4294967296;
parameter    ap_ST_fsm_state34 = 35'd8589934592;
parameter    ap_ST_fsm_state35 = 35'd17179869184;
parameter    C_S_AXI_CONTROL_DATA_WIDTH = 32;
parameter    C_S_AXI_CONTROL_ADDR_WIDTH = 8;
parameter    C_S_AXI_DATA_WIDTH = 32;

parameter C_S_AXI_CONTROL_WSTRB_WIDTH = (32 / 8);
parameter C_S_AXI_WSTRB_WIDTH = (32 / 8);

input   ap_clk;
input   ap_rst_n;
input  [7:0] in_V_TDATA;
input   in_V_TVALID;
output   in_V_TREADY;
output  [7:0] out_V_TDATA;
output   out_V_TVALID;
input   out_V_TREADY;
input   s_axi_control_AWVALID;
output   s_axi_control_AWREADY;
input  [C_S_AXI_CONTROL_ADDR_WIDTH - 1:0] s_axi_control_AWADDR;
input   s_axi_control_WVALID;
output   s_axi_control_WREADY;
input  [C_S_AXI_CONTROL_DATA_WIDTH - 1:0] s_axi_control_WDATA;
input  [C_S_AXI_CONTROL_WSTRB_WIDTH - 1:0] s_axi_control_WSTRB;
input   s_axi_control_ARVALID;
output   s_axi_control_ARREADY;
input  [C_S_AXI_CONTROL_ADDR_WIDTH - 1:0] s_axi_control_ARADDR;
output   s_axi_control_RVALID;
input   s_axi_control_RREADY;
output  [C_S_AXI_CONTROL_DATA_WIDTH - 1:0] s_axi_control_RDATA;
output  [1:0] s_axi_control_RRESP;
output   s_axi_control_BVALID;
input   s_axi_control_BREADY;
output  [1:0] s_axi_control_BRESP;
output   interrupt;

 reg    ap_rst_n_inv;
wire    ap_start;
reg    ap_done;
reg    ap_idle;
(* fsm_encoding = "none" *) reg   [34:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    ap_ready;
wire   [7:0] w_0_q0;
wire   [7:0] w_1_q0;
wire   [7:0] w_2_q0;
wire   [7:0] w_3_q0;
wire   [7:0] w_4_q0;
wire   [7:0] w_5_q0;
wire   [7:0] w_6_q0;
wire   [7:0] w_7_q0;
wire   [7:0] w_8_q0;
wire   [7:0] w_9_q0;
wire   [7:0] w_10_q0;
wire   [63:0] length_r;
reg    in_V_TDATA_blk_n;
wire    ap_CS_fsm_state2;
wire   [0:0] icmp_ln85_fu_301_p2;
wire    ap_CS_fsm_state3;
wire    ap_CS_fsm_state4;
wire    ap_CS_fsm_state5;
wire    ap_CS_fsm_state6;
wire    ap_CS_fsm_state7;
wire    ap_CS_fsm_state8;
wire    ap_CS_fsm_state9;
wire    ap_CS_fsm_state10;
wire    ap_CS_fsm_state11;
wire    ap_CS_fsm_state12;
wire    ap_CS_fsm_state13;
wire    ap_CS_fsm_state14;
wire    ap_CS_fsm_state15;
wire    ap_CS_fsm_state16;
wire    ap_CS_fsm_state17;
reg    out_V_TDATA_blk_n;
wire    ap_CS_fsm_state19;
wire    ap_CS_fsm_state20;
wire    ap_CS_fsm_state21;
wire    ap_CS_fsm_state22;
wire    ap_CS_fsm_state23;
wire    ap_CS_fsm_state24;
wire    ap_CS_fsm_state25;
wire    ap_CS_fsm_state26;
wire    ap_CS_fsm_state27;
wire    ap_CS_fsm_state28;
wire    ap_CS_fsm_state29;
wire    ap_CS_fsm_state30;
wire    ap_CS_fsm_state31;
wire    ap_CS_fsm_state32;
wire    ap_CS_fsm_state33;
wire    ap_CS_fsm_state34;
wire    ap_CS_fsm_state35;
reg   [63:0] length_read_reg_370;
wire   [63:0] add_ln85_fu_295_p2;
reg   [63:0] add_ln85_reg_471;
wire    regslice_both_out_V_U_apdone_blk;
reg    ap_block_state2;
reg   [7:0] in_buffer_0_reg_479;
reg   [7:0] in_buffer_1_reg_484;
reg   [7:0] in_buffer_2_reg_489;
reg   [7:0] in_buffer_3_reg_494;
reg   [7:0] in_buffer_4_reg_499;
reg   [7:0] in_buffer_5_reg_504;
reg   [7:0] in_buffer_6_reg_509;
reg   [7:0] in_buffer_7_reg_514;
reg   [7:0] in_buffer_8_reg_519;
reg   [7:0] in_buffer_9_reg_524;
reg   [7:0] in_buffer_10_reg_529;
reg   [7:0] in_buffer_11_reg_534;
reg   [7:0] in_buffer_12_reg_539;
reg   [7:0] in_buffer_13_reg_544;
reg   [7:0] in_buffer_14_reg_549;
reg   [7:0] in_buffer_15_reg_554;
wire   [3:0] grp_Cipher_fu_216_w_0_address0;
wire    grp_Cipher_fu_216_w_0_ce0;
wire   [7:0] grp_Cipher_fu_216_w_0_d0;
wire    grp_Cipher_fu_216_w_0_we0;
wire   [3:0] grp_Cipher_fu_216_w_1_address0;
wire    grp_Cipher_fu_216_w_1_ce0;
wire   [7:0] grp_Cipher_fu_216_w_1_d0;
wire    grp_Cipher_fu_216_w_1_we0;
wire   [3:0] grp_Cipher_fu_216_w_2_address0;
wire    grp_Cipher_fu_216_w_2_ce0;
wire   [7:0] grp_Cipher_fu_216_w_2_d0;
wire    grp_Cipher_fu_216_w_2_we0;
wire   [3:0] grp_Cipher_fu_216_w_3_address0;
wire    grp_Cipher_fu_216_w_3_ce0;
wire   [7:0] grp_Cipher_fu_216_w_3_d0;
wire    grp_Cipher_fu_216_w_3_we0;
wire   [3:0] grp_Cipher_fu_216_w_4_address0;
wire    grp_Cipher_fu_216_w_4_ce0;
wire   [7:0] grp_Cipher_fu_216_w_4_d0;
wire    grp_Cipher_fu_216_w_4_we0;
wire   [3:0] grp_Cipher_fu_216_w_5_address0;
wire    grp_Cipher_fu_216_w_5_ce0;
wire   [7:0] grp_Cipher_fu_216_w_5_d0;
wire    grp_Cipher_fu_216_w_5_we0;
wire   [3:0] grp_Cipher_fu_216_w_6_address0;
wire    grp_Cipher_fu_216_w_6_ce0;
wire   [7:0] grp_Cipher_fu_216_w_6_d0;
wire    grp_Cipher_fu_216_w_6_we0;
wire   [3:0] grp_Cipher_fu_216_w_7_address0;
wire    grp_Cipher_fu_216_w_7_ce0;
wire   [7:0] grp_Cipher_fu_216_w_7_d0;
wire    grp_Cipher_fu_216_w_7_we0;
wire   [3:0] grp_Cipher_fu_216_w_8_address0;
wire    grp_Cipher_fu_216_w_8_ce0;
wire   [7:0] grp_Cipher_fu_216_w_8_d0;
wire    grp_Cipher_fu_216_w_8_we0;
wire   [3:0] grp_Cipher_fu_216_w_9_address0;
wire    grp_Cipher_fu_216_w_9_ce0;
wire   [7:0] grp_Cipher_fu_216_w_9_d0;
wire    grp_Cipher_fu_216_w_9_we0;
wire   [3:0] grp_Cipher_fu_216_w_10_address0;
wire    grp_Cipher_fu_216_w_10_ce0;
wire   [7:0] grp_Cipher_fu_216_w_10_d0;
wire    grp_Cipher_fu_216_w_10_we0;
wire   [7:0] grp_Cipher_fu_216_out_r;
wire   [7:0] grp_Cipher_fu_216_out16;
wire   [7:0] grp_Cipher_fu_216_out17;
wire   [7:0] grp_Cipher_fu_216_out18;
wire   [7:0] grp_Cipher_fu_216_out19;
wire   [7:0] grp_Cipher_fu_216_out20;
wire   [7:0] grp_Cipher_fu_216_out21;
wire   [7:0] grp_Cipher_fu_216_out22;
wire   [7:0] grp_Cipher_fu_216_out23;
wire   [7:0] grp_Cipher_fu_216_out24;
wire   [7:0] grp_Cipher_fu_216_out25;
wire   [7:0] grp_Cipher_fu_216_out26;
wire   [7:0] grp_Cipher_fu_216_out27;
wire   [7:0] grp_Cipher_fu_216_out28;
wire   [7:0] grp_Cipher_fu_216_out29;
wire   [7:0] grp_Cipher_fu_216_out30;
wire    grp_Cipher_fu_216_ap_start;
wire    grp_Cipher_fu_216_out_r_ap_vld;
wire    grp_Cipher_fu_216_out16_ap_vld;
wire    grp_Cipher_fu_216_out17_ap_vld;
wire    grp_Cipher_fu_216_out18_ap_vld;
wire    grp_Cipher_fu_216_out19_ap_vld;
wire    grp_Cipher_fu_216_out20_ap_vld;
wire    grp_Cipher_fu_216_out21_ap_vld;
wire    grp_Cipher_fu_216_out22_ap_vld;
wire    grp_Cipher_fu_216_out23_ap_vld;
wire    grp_Cipher_fu_216_out24_ap_vld;
wire    grp_Cipher_fu_216_out25_ap_vld;
wire    grp_Cipher_fu_216_out26_ap_vld;
wire    grp_Cipher_fu_216_out27_ap_vld;
wire    grp_Cipher_fu_216_out28_ap_vld;
wire    grp_Cipher_fu_216_out29_ap_vld;
wire    grp_Cipher_fu_216_out30_ap_vld;
wire    grp_Cipher_fu_216_ap_done;
wire    grp_Cipher_fu_216_ap_ready;
wire    grp_Cipher_fu_216_ap_idle;
reg    grp_Cipher_fu_216_ap_continue;
reg   [63:0] i_reg_205;
reg    grp_Cipher_fu_216_ap_start_reg;
wire    ap_CS_fsm_state18;
wire    ap_sync_grp_Cipher_fu_216_ap_ready;
wire    ap_sync_grp_Cipher_fu_216_ap_done;
reg    ap_block_state18_on_subcall_done;
reg    ap_sync_reg_grp_Cipher_fu_216_ap_ready;
reg    ap_sync_reg_grp_Cipher_fu_216_ap_done;
reg   [7:0] out_buffer_0_fu_122;
reg   [7:0] out_buffer_1_fu_126;
reg   [7:0] out_buffer_2_fu_130;
reg   [7:0] out_buffer_3_fu_134;
reg   [7:0] out_buffer_4_fu_138;
reg   [7:0] out_buffer_5_fu_142;
reg   [7:0] out_buffer_6_fu_146;
reg   [7:0] out_buffer_7_fu_150;
reg   [7:0] out_buffer_8_fu_154;
reg   [7:0] out_buffer_9_fu_158;
reg   [7:0] out_buffer_10_fu_162;
reg   [7:0] out_buffer_11_fu_166;
reg   [7:0] out_buffer_12_fu_170;
reg   [7:0] out_buffer_13_fu_174;
reg   [7:0] out_buffer_14_fu_178;
reg   [7:0] out_buffer_15_fu_182;
reg   [34:0] ap_NS_fsm;
wire    regslice_both_in_V_U_apdone_blk;
wire   [7:0] in_V_TDATA_int_regslice;
wire    in_V_TVALID_int_regslice;
reg    in_V_TREADY_int_regslice;
wire    regslice_both_in_V_U_ack_in;
reg   [7:0] out_V_TDATA_int_regslice;
reg    out_V_TVALID_int_regslice;
wire    out_V_TREADY_int_regslice;
wire    regslice_both_out_V_U_vld_out;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 35'd1;
#0 grp_Cipher_fu_216_ap_start_reg = 1'b0;
#0 ap_sync_reg_grp_Cipher_fu_216_ap_ready = 1'b0;
#0 ap_sync_reg_grp_Cipher_fu_216_ap_done = 1'b0;
end

Cipher_Stream_control_s_axi #(
    .C_S_AXI_ADDR_WIDTH( C_S_AXI_CONTROL_ADDR_WIDTH ),
    .C_S_AXI_DATA_WIDTH( C_S_AXI_CONTROL_DATA_WIDTH ))
control_s_axi_U(
    .AWVALID(s_axi_control_AWVALID),
    .AWREADY(s_axi_control_AWREADY),
    .AWADDR(s_axi_control_AWADDR),
    .WVALID(s_axi_control_WVALID),
    .WREADY(s_axi_control_WREADY),
    .WDATA(s_axi_control_WDATA),
    .WSTRB(s_axi_control_WSTRB),
    .ARVALID(s_axi_control_ARVALID),
    .ARREADY(s_axi_control_ARREADY),
    .ARADDR(s_axi_control_ARADDR),
    .RVALID(s_axi_control_RVALID),
    .RREADY(s_axi_control_RREADY),
    .RDATA(s_axi_control_RDATA),
    .RRESP(s_axi_control_RRESP),
    .BVALID(s_axi_control_BVALID),
    .BREADY(s_axi_control_BREADY),
    .BRESP(s_axi_control_BRESP),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .w_0_address0(grp_Cipher_fu_216_w_0_address0),
    .w_0_ce0(grp_Cipher_fu_216_w_0_ce0),
    .w_0_q0(w_0_q0),
    .w_1_address0(grp_Cipher_fu_216_w_1_address0),
    .w_1_ce0(grp_Cipher_fu_216_w_1_ce0),
    .w_1_q0(w_1_q0),
    .w_2_address0(grp_Cipher_fu_216_w_2_address0),
    .w_2_ce0(grp_Cipher_fu_216_w_2_ce0),
    .w_2_q0(w_2_q0),
    .w_3_address0(grp_Cipher_fu_216_w_3_address0),
    .w_3_ce0(grp_Cipher_fu_216_w_3_ce0),
    .w_3_q0(w_3_q0),
    .w_4_address0(grp_Cipher_fu_216_w_4_address0),
    .w_4_ce0(grp_Cipher_fu_216_w_4_ce0),
    .w_4_q0(w_4_q0),
    .w_5_address0(grp_Cipher_fu_216_w_5_address0),
    .w_5_ce0(grp_Cipher_fu_216_w_5_ce0),
    .w_5_q0(w_5_q0),
    .w_6_address0(grp_Cipher_fu_216_w_6_address0),
    .w_6_ce0(grp_Cipher_fu_216_w_6_ce0),
    .w_6_q0(w_6_q0),
    .w_7_address0(grp_Cipher_fu_216_w_7_address0),
    .w_7_ce0(grp_Cipher_fu_216_w_7_ce0),
    .w_7_q0(w_7_q0),
    .w_8_address0(grp_Cipher_fu_216_w_8_address0),
    .w_8_ce0(grp_Cipher_fu_216_w_8_ce0),
    .w_8_q0(w_8_q0),
    .w_9_address0(grp_Cipher_fu_216_w_9_address0),
    .w_9_ce0(grp_Cipher_fu_216_w_9_ce0),
    .w_9_q0(w_9_q0),
    .w_10_address0(grp_Cipher_fu_216_w_10_address0),
    .w_10_ce0(grp_Cipher_fu_216_w_10_ce0),
    .w_10_q0(w_10_q0),
    .length_r(length_r),
    .ap_start(ap_start),
    .interrupt(interrupt),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_idle(ap_idle)
);

Cipher_Stream_Cipher grp_Cipher_fu_216(
    .w_0_address0(grp_Cipher_fu_216_w_0_address0),
    .w_0_ce0(grp_Cipher_fu_216_w_0_ce0),
    .w_0_d0(grp_Cipher_fu_216_w_0_d0),
    .w_0_q0(w_0_q0),
    .w_0_we0(grp_Cipher_fu_216_w_0_we0),
    .w_1_address0(grp_Cipher_fu_216_w_1_address0),
    .w_1_ce0(grp_Cipher_fu_216_w_1_ce0),
    .w_1_d0(grp_Cipher_fu_216_w_1_d0),
    .w_1_q0(w_1_q0),
    .w_1_we0(grp_Cipher_fu_216_w_1_we0),
    .w_2_address0(grp_Cipher_fu_216_w_2_address0),
    .w_2_ce0(grp_Cipher_fu_216_w_2_ce0),
    .w_2_d0(grp_Cipher_fu_216_w_2_d0),
    .w_2_q0(w_2_q0),
    .w_2_we0(grp_Cipher_fu_216_w_2_we0),
    .w_3_address0(grp_Cipher_fu_216_w_3_address0),
    .w_3_ce0(grp_Cipher_fu_216_w_3_ce0),
    .w_3_d0(grp_Cipher_fu_216_w_3_d0),
    .w_3_q0(w_3_q0),
    .w_3_we0(grp_Cipher_fu_216_w_3_we0),
    .w_4_address0(grp_Cipher_fu_216_w_4_address0),
    .w_4_ce0(grp_Cipher_fu_216_w_4_ce0),
    .w_4_d0(grp_Cipher_fu_216_w_4_d0),
    .w_4_q0(w_4_q0),
    .w_4_we0(grp_Cipher_fu_216_w_4_we0),
    .w_5_address0(grp_Cipher_fu_216_w_5_address0),
    .w_5_ce0(grp_Cipher_fu_216_w_5_ce0),
    .w_5_d0(grp_Cipher_fu_216_w_5_d0),
    .w_5_q0(w_5_q0),
    .w_5_we0(grp_Cipher_fu_216_w_5_we0),
    .w_6_address0(grp_Cipher_fu_216_w_6_address0),
    .w_6_ce0(grp_Cipher_fu_216_w_6_ce0),
    .w_6_d0(grp_Cipher_fu_216_w_6_d0),
    .w_6_q0(w_6_q0),
    .w_6_we0(grp_Cipher_fu_216_w_6_we0),
    .w_7_address0(grp_Cipher_fu_216_w_7_address0),
    .w_7_ce0(grp_Cipher_fu_216_w_7_ce0),
    .w_7_d0(grp_Cipher_fu_216_w_7_d0),
    .w_7_q0(w_7_q0),
    .w_7_we0(grp_Cipher_fu_216_w_7_we0),
    .w_8_address0(grp_Cipher_fu_216_w_8_address0),
    .w_8_ce0(grp_Cipher_fu_216_w_8_ce0),
    .w_8_d0(grp_Cipher_fu_216_w_8_d0),
    .w_8_q0(w_8_q0),
    .w_8_we0(grp_Cipher_fu_216_w_8_we0),
    .w_9_address0(grp_Cipher_fu_216_w_9_address0),
    .w_9_ce0(grp_Cipher_fu_216_w_9_ce0),
    .w_9_d0(grp_Cipher_fu_216_w_9_d0),
    .w_9_q0(w_9_q0),
    .w_9_we0(grp_Cipher_fu_216_w_9_we0),
    .w_10_address0(grp_Cipher_fu_216_w_10_address0),
    .w_10_ce0(grp_Cipher_fu_216_w_10_ce0),
    .w_10_d0(grp_Cipher_fu_216_w_10_d0),
    .w_10_q0(w_10_q0),
    .w_10_we0(grp_Cipher_fu_216_w_10_we0),
    .p_read(in_buffer_0_reg_479),
    .p_read1(in_buffer_1_reg_484),
    .p_read2(in_buffer_2_reg_489),
    .p_read3(in_buffer_3_reg_494),
    .p_read4(in_buffer_4_reg_499),
    .p_read5(in_buffer_5_reg_504),
    .p_read6(in_buffer_6_reg_509),
    .p_read7(in_buffer_7_reg_514),
    .p_read8(in_buffer_8_reg_519),
    .p_read9(in_buffer_9_reg_524),
    .p_read10(in_buffer_10_reg_529),
    .p_read11(in_buffer_11_reg_534),
    .p_read12(in_buffer_12_reg_539),
    .p_read13(in_buffer_13_reg_544),
    .p_read14(in_buffer_14_reg_549),
    .p_read15(in_buffer_15_reg_554),
    .out_r(grp_Cipher_fu_216_out_r),
    .out16(grp_Cipher_fu_216_out16),
    .out17(grp_Cipher_fu_216_out17),
    .out18(grp_Cipher_fu_216_out18),
    .out19(grp_Cipher_fu_216_out19),
    .out20(grp_Cipher_fu_216_out20),
    .out21(grp_Cipher_fu_216_out21),
    .out22(grp_Cipher_fu_216_out22),
    .out23(grp_Cipher_fu_216_out23),
    .out24(grp_Cipher_fu_216_out24),
    .out25(grp_Cipher_fu_216_out25),
    .out26(grp_Cipher_fu_216_out26),
    .out27(grp_Cipher_fu_216_out27),
    .out28(grp_Cipher_fu_216_out28),
    .out29(grp_Cipher_fu_216_out29),
    .out30(grp_Cipher_fu_216_out30),
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .p_read_ap_vld(1'b1),
    .p_read1_ap_vld(1'b1),
    .p_read2_ap_vld(1'b1),
    .p_read3_ap_vld(1'b1),
    .p_read4_ap_vld(1'b1),
    .p_read5_ap_vld(1'b1),
    .p_read6_ap_vld(1'b1),
    .p_read7_ap_vld(1'b1),
    .p_read8_ap_vld(1'b1),
    .p_read9_ap_vld(1'b1),
    .p_read10_ap_vld(1'b1),
    .p_read11_ap_vld(1'b1),
    .p_read12_ap_vld(1'b1),
    .p_read13_ap_vld(1'b1),
    .p_read14_ap_vld(1'b1),
    .p_read15_ap_vld(1'b1),
    .ap_start(grp_Cipher_fu_216_ap_start),
    .out_r_ap_vld(grp_Cipher_fu_216_out_r_ap_vld),
    .out16_ap_vld(grp_Cipher_fu_216_out16_ap_vld),
    .out17_ap_vld(grp_Cipher_fu_216_out17_ap_vld),
    .out18_ap_vld(grp_Cipher_fu_216_out18_ap_vld),
    .out19_ap_vld(grp_Cipher_fu_216_out19_ap_vld),
    .out20_ap_vld(grp_Cipher_fu_216_out20_ap_vld),
    .out21_ap_vld(grp_Cipher_fu_216_out21_ap_vld),
    .out22_ap_vld(grp_Cipher_fu_216_out22_ap_vld),
    .out23_ap_vld(grp_Cipher_fu_216_out23_ap_vld),
    .out24_ap_vld(grp_Cipher_fu_216_out24_ap_vld),
    .out25_ap_vld(grp_Cipher_fu_216_out25_ap_vld),
    .out26_ap_vld(grp_Cipher_fu_216_out26_ap_vld),
    .out27_ap_vld(grp_Cipher_fu_216_out27_ap_vld),
    .out28_ap_vld(grp_Cipher_fu_216_out28_ap_vld),
    .out29_ap_vld(grp_Cipher_fu_216_out29_ap_vld),
    .out30_ap_vld(grp_Cipher_fu_216_out30_ap_vld),
    .ap_done(grp_Cipher_fu_216_ap_done),
    .ap_ready(grp_Cipher_fu_216_ap_ready),
    .ap_idle(grp_Cipher_fu_216_ap_idle),
    .ap_continue(grp_Cipher_fu_216_ap_continue)
);

Cipher_Stream_regslice_both #(
    .DataWidth( 8 ))
regslice_both_in_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(in_V_TDATA),
    .vld_in(in_V_TVALID),
    .ack_in(regslice_both_in_V_U_ack_in),
    .data_out(in_V_TDATA_int_regslice),
    .vld_out(in_V_TVALID_int_regslice),
    .ack_out(in_V_TREADY_int_regslice),
    .apdone_blk(regslice_both_in_V_U_apdone_blk)
);

Cipher_Stream_regslice_both #(
    .DataWidth( 8 ))
regslice_both_out_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(out_V_TDATA_int_regslice),
    .vld_in(out_V_TVALID_int_regslice),
    .ack_in(out_V_TREADY_int_regslice),
    .data_out(out_V_TDATA),
    .vld_out(regslice_both_out_V_U_vld_out),
    .ack_out(out_V_TREADY),
    .apdone_blk(regslice_both_out_V_U_apdone_blk)
);

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_sync_reg_grp_Cipher_fu_216_ap_done <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_state18_on_subcall_done) & (1'b1 == ap_CS_fsm_state18))) begin
            ap_sync_reg_grp_Cipher_fu_216_ap_done <= 1'b0;
        end else if ((grp_Cipher_fu_216_ap_done == 1'b1)) begin
            ap_sync_reg_grp_Cipher_fu_216_ap_done <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_sync_reg_grp_Cipher_fu_216_ap_ready <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_state18_on_subcall_done) & (1'b1 == ap_CS_fsm_state18))) begin
            ap_sync_reg_grp_Cipher_fu_216_ap_ready <= 1'b0;
        end else if ((grp_Cipher_fu_216_ap_ready == 1'b1)) begin
            ap_sync_reg_grp_Cipher_fu_216_ap_ready <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        grp_Cipher_fu_216_ap_start_reg <= 1'b0;
    end else begin
        if ((((ap_sync_grp_Cipher_fu_216_ap_ready == 1'b0) & (1'b1 == ap_CS_fsm_state18)) | ((1'b1 == ap_CS_fsm_state17) & (in_V_TVALID_int_regslice == 1'b1)))) begin
            grp_Cipher_fu_216_ap_start_reg <= 1'b1;
        end else if ((grp_Cipher_fu_216_ap_ready == 1'b1)) begin
            grp_Cipher_fu_216_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        i_reg_205 <= 64'd0;
    end else if (((1'b1 == ap_CS_fsm_state35) & (out_V_TREADY_int_regslice == 1'b1))) begin
        i_reg_205 <= add_ln85_reg_471;
    end
end

always @ (posedge ap_clk) begin
    if ((~((regslice_both_out_V_U_apdone_blk == 1'b1) | ((in_V_TVALID_int_regslice == 1'b0) & (icmp_ln85_fu_301_p2 == 1'd0))) & (1'b1 == ap_CS_fsm_state2))) begin
        add_ln85_reg_471 <= add_ln85_fu_295_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln85_fu_301_p2 == 1'd0))) begin
        in_buffer_0_reg_479 <= in_V_TDATA_int_regslice;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state12)) begin
        in_buffer_10_reg_529 <= in_V_TDATA_int_regslice;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state13)) begin
        in_buffer_11_reg_534 <= in_V_TDATA_int_regslice;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state14)) begin
        in_buffer_12_reg_539 <= in_V_TDATA_int_regslice;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state15)) begin
        in_buffer_13_reg_544 <= in_V_TDATA_int_regslice;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state16)) begin
        in_buffer_14_reg_549 <= in_V_TDATA_int_regslice;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state17)) begin
        in_buffer_15_reg_554 <= in_V_TDATA_int_regslice;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        in_buffer_1_reg_484 <= in_V_TDATA_int_regslice;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        in_buffer_2_reg_489 <= in_V_TDATA_int_regslice;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        in_buffer_3_reg_494 <= in_V_TDATA_int_regslice;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        in_buffer_4_reg_499 <= in_V_TDATA_int_regslice;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        in_buffer_5_reg_504 <= in_V_TDATA_int_regslice;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        in_buffer_6_reg_509 <= in_V_TDATA_int_regslice;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        in_buffer_7_reg_514 <= in_V_TDATA_int_regslice;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        in_buffer_8_reg_519 <= in_V_TDATA_int_regslice;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        in_buffer_9_reg_524 <= in_V_TDATA_int_regslice;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state1)) begin
        length_read_reg_370 <= length_r;
    end
end

always @ (posedge ap_clk) begin
    if (((grp_Cipher_fu_216_out_r_ap_vld == 1'b1) & (1'b1 == ap_CS_fsm_state18))) begin
        out_buffer_0_fu_122 <= grp_Cipher_fu_216_out_r;
    end
end

always @ (posedge ap_clk) begin
    if (((grp_Cipher_fu_216_out25_ap_vld == 1'b1) & (1'b1 == ap_CS_fsm_state18))) begin
        out_buffer_10_fu_162 <= grp_Cipher_fu_216_out25;
    end
end

always @ (posedge ap_clk) begin
    if (((grp_Cipher_fu_216_out26_ap_vld == 1'b1) & (1'b1 == ap_CS_fsm_state18))) begin
        out_buffer_11_fu_166 <= grp_Cipher_fu_216_out26;
    end
end

always @ (posedge ap_clk) begin
    if (((grp_Cipher_fu_216_out27_ap_vld == 1'b1) & (1'b1 == ap_CS_fsm_state18))) begin
        out_buffer_12_fu_170 <= grp_Cipher_fu_216_out27;
    end
end

always @ (posedge ap_clk) begin
    if (((grp_Cipher_fu_216_out28_ap_vld == 1'b1) & (1'b1 == ap_CS_fsm_state18))) begin
        out_buffer_13_fu_174 <= grp_Cipher_fu_216_out28;
    end
end

always @ (posedge ap_clk) begin
    if (((grp_Cipher_fu_216_out29_ap_vld == 1'b1) & (1'b1 == ap_CS_fsm_state18))) begin
        out_buffer_14_fu_178 <= grp_Cipher_fu_216_out29;
    end
end

always @ (posedge ap_clk) begin
    if (((grp_Cipher_fu_216_out30_ap_vld == 1'b1) & (1'b1 == ap_CS_fsm_state18))) begin
        out_buffer_15_fu_182 <= grp_Cipher_fu_216_out30;
    end
end

always @ (posedge ap_clk) begin
    if (((grp_Cipher_fu_216_out16_ap_vld == 1'b1) & (1'b1 == ap_CS_fsm_state18))) begin
        out_buffer_1_fu_126 <= grp_Cipher_fu_216_out16;
    end
end

always @ (posedge ap_clk) begin
    if (((grp_Cipher_fu_216_out17_ap_vld == 1'b1) & (1'b1 == ap_CS_fsm_state18))) begin
        out_buffer_2_fu_130 <= grp_Cipher_fu_216_out17;
    end
end

always @ (posedge ap_clk) begin
    if (((grp_Cipher_fu_216_out18_ap_vld == 1'b1) & (1'b1 == ap_CS_fsm_state18))) begin
        out_buffer_3_fu_134 <= grp_Cipher_fu_216_out18;
    end
end

always @ (posedge ap_clk) begin
    if (((grp_Cipher_fu_216_out19_ap_vld == 1'b1) & (1'b1 == ap_CS_fsm_state18))) begin
        out_buffer_4_fu_138 <= grp_Cipher_fu_216_out19;
    end
end

always @ (posedge ap_clk) begin
    if (((grp_Cipher_fu_216_out20_ap_vld == 1'b1) & (1'b1 == ap_CS_fsm_state18))) begin
        out_buffer_5_fu_142 <= grp_Cipher_fu_216_out20;
    end
end

always @ (posedge ap_clk) begin
    if (((grp_Cipher_fu_216_out21_ap_vld == 1'b1) & (1'b1 == ap_CS_fsm_state18))) begin
        out_buffer_6_fu_146 <= grp_Cipher_fu_216_out21;
    end
end

always @ (posedge ap_clk) begin
    if (((grp_Cipher_fu_216_out22_ap_vld == 1'b1) & (1'b1 == ap_CS_fsm_state18))) begin
        out_buffer_7_fu_150 <= grp_Cipher_fu_216_out22;
    end
end

always @ (posedge ap_clk) begin
    if (((grp_Cipher_fu_216_out23_ap_vld == 1'b1) & (1'b1 == ap_CS_fsm_state18))) begin
        out_buffer_8_fu_154 <= grp_Cipher_fu_216_out23;
    end
end

always @ (posedge ap_clk) begin
    if (((grp_Cipher_fu_216_out24_ap_vld == 1'b1) & (1'b1 == ap_CS_fsm_state18))) begin
        out_buffer_9_fu_158 <= grp_Cipher_fu_216_out24;
    end
end

always @ (*) begin
    if ((~((regslice_both_out_V_U_apdone_blk == 1'b1) | ((in_V_TVALID_int_regslice == 1'b0) & (icmp_ln85_fu_301_p2 == 1'd0))) & (1'b1 == ap_CS_fsm_state2) & (icmp_ln85_fu_301_p2 == 1'd1))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if ((~((regslice_both_out_V_U_apdone_blk == 1'b1) | ((in_V_TVALID_int_regslice == 1'b0) & (icmp_ln85_fu_301_p2 == 1'd0))) & (1'b1 == ap_CS_fsm_state2) & (icmp_ln85_fu_301_p2 == 1'd1))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_state18_on_subcall_done) & (1'b1 == ap_CS_fsm_state18))) begin
        grp_Cipher_fu_216_ap_continue = 1'b1;
    end else begin
        grp_Cipher_fu_216_ap_continue = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state17) | (1'b1 == ap_CS_fsm_state16) | (1'b1 == ap_CS_fsm_state15) | (1'b1 == ap_CS_fsm_state14) | (1'b1 == ap_CS_fsm_state13) | (1'b1 == ap_CS_fsm_state12) | (1'b1 == ap_CS_fsm_state11) | (1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state9) | (1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state3) | ((1'b1 == ap_CS_fsm_state2) & (icmp_ln85_fu_301_p2 == 1'd0)))) begin
        in_V_TDATA_blk_n = in_V_TVALID_int_regslice;
    end else begin
        in_V_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_state17) & (in_V_TVALID_int_regslice == 1'b1)) | ((1'b1 == ap_CS_fsm_state16) & (in_V_TVALID_int_regslice == 1'b1)) | ((1'b1 == ap_CS_fsm_state15) & (in_V_TVALID_int_regslice == 1'b1)) | ((1'b1 == ap_CS_fsm_state14) & (in_V_TVALID_int_regslice == 1'b1)) | ((1'b1 == ap_CS_fsm_state13) & (in_V_TVALID_int_regslice == 1'b1)) | (~((regslice_both_out_V_U_apdone_blk == 1'b1) | ((in_V_TVALID_int_regslice == 1'b0) & (icmp_ln85_fu_301_p2 == 1'd0))) & (1'b1 == ap_CS_fsm_state2) & (icmp_ln85_fu_301_p2 == 1'd0)) | ((1'b1 == ap_CS_fsm_state12) & (in_V_TVALID_int_regslice == 1'b1)) | ((1'b1 == ap_CS_fsm_state11) & (in_V_TVALID_int_regslice == 1'b1)) | ((1'b1 == ap_CS_fsm_state10) & (in_V_TVALID_int_regslice == 1'b1)) | ((1'b1 == ap_CS_fsm_state9) & (in_V_TVALID_int_regslice == 1'b1)) | ((1'b1 == ap_CS_fsm_state8) & (in_V_TVALID_int_regslice == 1'b1)) | ((1'b1 == ap_CS_fsm_state7) & (in_V_TVALID_int_regslice == 1'b1)) | ((1'b1 == ap_CS_fsm_state6) & (in_V_TVALID_int_regslice == 1'b1)) | ((1'b1 == ap_CS_fsm_state5) & (in_V_TVALID_int_regslice == 1'b1)) | ((1'b1 == ap_CS_fsm_state4) & (in_V_TVALID_int_regslice == 1'b1)) | ((1'b1 == ap_CS_fsm_state3) & (in_V_TVALID_int_regslice == 1'b1)))) begin
        in_V_TREADY_int_regslice = 1'b1;
    end else begin
        in_V_TREADY_int_regslice = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state35) | (1'b1 == ap_CS_fsm_state34) | (1'b1 == ap_CS_fsm_state33) | (1'b1 == ap_CS_fsm_state32) | (1'b1 == ap_CS_fsm_state31) | (1'b1 == ap_CS_fsm_state30) | (1'b1 == ap_CS_fsm_state29) | (1'b1 == ap_CS_fsm_state28) | (1'b1 == ap_CS_fsm_state27) | (1'b1 == ap_CS_fsm_state26) | (1'b1 == ap_CS_fsm_state25) | (1'b1 == ap_CS_fsm_state24) | (1'b1 == ap_CS_fsm_state23) | (1'b1 == ap_CS_fsm_state22) | (1'b1 == ap_CS_fsm_state21) | (1'b1 == ap_CS_fsm_state20) | (1'b1 == ap_CS_fsm_state19))) begin
        out_V_TDATA_blk_n = out_V_TREADY_int_regslice;
    end else begin
        out_V_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((out_V_TREADY_int_regslice == 1'b1)) begin
        if ((1'b1 == ap_CS_fsm_state34)) begin
            out_V_TDATA_int_regslice = out_buffer_15_fu_182;
        end else if ((1'b1 == ap_CS_fsm_state33)) begin
            out_V_TDATA_int_regslice = out_buffer_14_fu_178;
        end else if ((1'b1 == ap_CS_fsm_state32)) begin
            out_V_TDATA_int_regslice = out_buffer_13_fu_174;
        end else if ((1'b1 == ap_CS_fsm_state31)) begin
            out_V_TDATA_int_regslice = out_buffer_12_fu_170;
        end else if ((1'b1 == ap_CS_fsm_state30)) begin
            out_V_TDATA_int_regslice = out_buffer_11_fu_166;
        end else if ((1'b1 == ap_CS_fsm_state29)) begin
            out_V_TDATA_int_regslice = out_buffer_10_fu_162;
        end else if ((1'b1 == ap_CS_fsm_state28)) begin
            out_V_TDATA_int_regslice = out_buffer_9_fu_158;
        end else if ((1'b1 == ap_CS_fsm_state27)) begin
            out_V_TDATA_int_regslice = out_buffer_8_fu_154;
        end else if ((1'b1 == ap_CS_fsm_state26)) begin
            out_V_TDATA_int_regslice = out_buffer_7_fu_150;
        end else if ((1'b1 == ap_CS_fsm_state25)) begin
            out_V_TDATA_int_regslice = out_buffer_6_fu_146;
        end else if ((1'b1 == ap_CS_fsm_state24)) begin
            out_V_TDATA_int_regslice = out_buffer_5_fu_142;
        end else if ((1'b1 == ap_CS_fsm_state23)) begin
            out_V_TDATA_int_regslice = out_buffer_4_fu_138;
        end else if ((1'b1 == ap_CS_fsm_state22)) begin
            out_V_TDATA_int_regslice = out_buffer_3_fu_134;
        end else if ((1'b1 == ap_CS_fsm_state21)) begin
            out_V_TDATA_int_regslice = out_buffer_2_fu_130;
        end else if ((1'b1 == ap_CS_fsm_state20)) begin
            out_V_TDATA_int_regslice = out_buffer_1_fu_126;
        end else if ((1'b1 == ap_CS_fsm_state19)) begin
            out_V_TDATA_int_regslice = out_buffer_0_fu_122;
        end else begin
            out_V_TDATA_int_regslice = 'bx;
        end
    end else begin
        out_V_TDATA_int_regslice = 'bx;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_state34) & (out_V_TREADY_int_regslice == 1'b1)) | ((1'b1 == ap_CS_fsm_state33) & (out_V_TREADY_int_regslice == 1'b1)) | ((1'b1 == ap_CS_fsm_state32) & (out_V_TREADY_int_regslice == 1'b1)) | ((1'b1 == ap_CS_fsm_state31) & (out_V_TREADY_int_regslice == 1'b1)) | ((1'b1 == ap_CS_fsm_state30) & (out_V_TREADY_int_regslice == 1'b1)) | ((1'b1 == ap_CS_fsm_state29) & (out_V_TREADY_int_regslice == 1'b1)) | ((1'b1 == ap_CS_fsm_state28) & (out_V_TREADY_int_regslice == 1'b1)) | ((1'b1 == ap_CS_fsm_state27) & (out_V_TREADY_int_regslice == 1'b1)) | ((1'b1 == ap_CS_fsm_state26) & (out_V_TREADY_int_regslice == 1'b1)) | ((1'b1 == ap_CS_fsm_state25) & (out_V_TREADY_int_regslice == 1'b1)) | ((1'b1 == ap_CS_fsm_state24) & (out_V_TREADY_int_regslice == 1'b1)) | ((1'b1 == ap_CS_fsm_state23) & (out_V_TREADY_int_regslice == 1'b1)) | ((1'b1 == ap_CS_fsm_state22) & (out_V_TREADY_int_regslice == 1'b1)) | ((1'b1 == ap_CS_fsm_state21) & (out_V_TREADY_int_regslice == 1'b1)) | ((1'b1 == ap_CS_fsm_state20) & (out_V_TREADY_int_regslice == 1'b1)) | ((1'b1 == ap_CS_fsm_state19) & (out_V_TREADY_int_regslice == 1'b1)))) begin
        out_V_TVALID_int_regslice = 1'b1;
    end else begin
        out_V_TVALID_int_regslice = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if ((~((regslice_both_out_V_U_apdone_blk == 1'b1) | ((in_V_TVALID_int_regslice == 1'b0) & (icmp_ln85_fu_301_p2 == 1'd0))) & (1'b1 == ap_CS_fsm_state2) & (icmp_ln85_fu_301_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else if ((~((regslice_both_out_V_U_apdone_blk == 1'b1) | ((in_V_TVALID_int_regslice == 1'b0) & (icmp_ln85_fu_301_p2 == 1'd0))) & (1'b1 == ap_CS_fsm_state2) & (icmp_ln85_fu_301_p2 == 1'd0))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end
        end
        ap_ST_fsm_state3 : begin
            if (((1'b1 == ap_CS_fsm_state3) & (in_V_TVALID_int_regslice == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state4 : begin
            if (((1'b1 == ap_CS_fsm_state4) & (in_V_TVALID_int_regslice == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state5 : begin
            if (((1'b1 == ap_CS_fsm_state5) & (in_V_TVALID_int_regslice == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end
        end
        ap_ST_fsm_state6 : begin
            if (((1'b1 == ap_CS_fsm_state6) & (in_V_TVALID_int_regslice == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end
        end
        ap_ST_fsm_state7 : begin
            if (((1'b1 == ap_CS_fsm_state7) & (in_V_TVALID_int_regslice == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state8;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end
        end
        ap_ST_fsm_state8 : begin
            if (((1'b1 == ap_CS_fsm_state8) & (in_V_TVALID_int_regslice == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state9;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state8;
            end
        end
        ap_ST_fsm_state9 : begin
            if (((1'b1 == ap_CS_fsm_state9) & (in_V_TVALID_int_regslice == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state10;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state9;
            end
        end
        ap_ST_fsm_state10 : begin
            if (((1'b1 == ap_CS_fsm_state10) & (in_V_TVALID_int_regslice == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state11;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state10;
            end
        end
        ap_ST_fsm_state11 : begin
            if (((1'b1 == ap_CS_fsm_state11) & (in_V_TVALID_int_regslice == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state12;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state11;
            end
        end
        ap_ST_fsm_state12 : begin
            if (((1'b1 == ap_CS_fsm_state12) & (in_V_TVALID_int_regslice == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state13;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state12;
            end
        end
        ap_ST_fsm_state13 : begin
            if (((1'b1 == ap_CS_fsm_state13) & (in_V_TVALID_int_regslice == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state14;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state13;
            end
        end
        ap_ST_fsm_state14 : begin
            if (((1'b1 == ap_CS_fsm_state14) & (in_V_TVALID_int_regslice == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state15;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state14;
            end
        end
        ap_ST_fsm_state15 : begin
            if (((1'b1 == ap_CS_fsm_state15) & (in_V_TVALID_int_regslice == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state16;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state15;
            end
        end
        ap_ST_fsm_state16 : begin
            if (((1'b1 == ap_CS_fsm_state16) & (in_V_TVALID_int_regslice == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state17;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state16;
            end
        end
        ap_ST_fsm_state17 : begin
            if (((1'b1 == ap_CS_fsm_state17) & (in_V_TVALID_int_regslice == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state18;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state17;
            end
        end
        ap_ST_fsm_state18 : begin
            if (((1'b0 == ap_block_state18_on_subcall_done) & (1'b1 == ap_CS_fsm_state18))) begin
                ap_NS_fsm = ap_ST_fsm_state19;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state18;
            end
        end
        ap_ST_fsm_state19 : begin
            if (((1'b1 == ap_CS_fsm_state19) & (out_V_TREADY_int_regslice == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state20;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state19;
            end
        end
        ap_ST_fsm_state20 : begin
            if (((1'b1 == ap_CS_fsm_state20) & (out_V_TREADY_int_regslice == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state21;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state20;
            end
        end
        ap_ST_fsm_state21 : begin
            if (((1'b1 == ap_CS_fsm_state21) & (out_V_TREADY_int_regslice == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state22;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state21;
            end
        end
        ap_ST_fsm_state22 : begin
            if (((1'b1 == ap_CS_fsm_state22) & (out_V_TREADY_int_regslice == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state23;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state22;
            end
        end
        ap_ST_fsm_state23 : begin
            if (((1'b1 == ap_CS_fsm_state23) & (out_V_TREADY_int_regslice == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state24;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state23;
            end
        end
        ap_ST_fsm_state24 : begin
            if (((1'b1 == ap_CS_fsm_state24) & (out_V_TREADY_int_regslice == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state25;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state24;
            end
        end
        ap_ST_fsm_state25 : begin
            if (((1'b1 == ap_CS_fsm_state25) & (out_V_TREADY_int_regslice == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state26;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state25;
            end
        end
        ap_ST_fsm_state26 : begin
            if (((1'b1 == ap_CS_fsm_state26) & (out_V_TREADY_int_regslice == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state27;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state26;
            end
        end
        ap_ST_fsm_state27 : begin
            if (((1'b1 == ap_CS_fsm_state27) & (out_V_TREADY_int_regslice == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state28;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state27;
            end
        end
        ap_ST_fsm_state28 : begin
            if (((1'b1 == ap_CS_fsm_state28) & (out_V_TREADY_int_regslice == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state29;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state28;
            end
        end
        ap_ST_fsm_state29 : begin
            if (((1'b1 == ap_CS_fsm_state29) & (out_V_TREADY_int_regslice == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state30;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state29;
            end
        end
        ap_ST_fsm_state30 : begin
            if (((1'b1 == ap_CS_fsm_state30) & (out_V_TREADY_int_regslice == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state31;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state30;
            end
        end
        ap_ST_fsm_state31 : begin
            if (((1'b1 == ap_CS_fsm_state31) & (out_V_TREADY_int_regslice == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state32;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state31;
            end
        end
        ap_ST_fsm_state32 : begin
            if (((1'b1 == ap_CS_fsm_state32) & (out_V_TREADY_int_regslice == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state33;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state32;
            end
        end
        ap_ST_fsm_state33 : begin
            if (((1'b1 == ap_CS_fsm_state33) & (out_V_TREADY_int_regslice == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state34;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state33;
            end
        end
        ap_ST_fsm_state34 : begin
            if (((1'b1 == ap_CS_fsm_state34) & (out_V_TREADY_int_regslice == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state35;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state34;
            end
        end
        ap_ST_fsm_state35 : begin
            if (((1'b1 == ap_CS_fsm_state35) & (out_V_TREADY_int_regslice == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state35;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln85_fu_295_p2 = (i_reg_205 + 64'd1);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state11 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_state12 = ap_CS_fsm[32'd11];

assign ap_CS_fsm_state13 = ap_CS_fsm[32'd12];

assign ap_CS_fsm_state14 = ap_CS_fsm[32'd13];

assign ap_CS_fsm_state15 = ap_CS_fsm[32'd14];

assign ap_CS_fsm_state16 = ap_CS_fsm[32'd15];

assign ap_CS_fsm_state17 = ap_CS_fsm[32'd16];

assign ap_CS_fsm_state18 = ap_CS_fsm[32'd17];

assign ap_CS_fsm_state19 = ap_CS_fsm[32'd18];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state20 = ap_CS_fsm[32'd19];

assign ap_CS_fsm_state21 = ap_CS_fsm[32'd20];

assign ap_CS_fsm_state22 = ap_CS_fsm[32'd21];

assign ap_CS_fsm_state23 = ap_CS_fsm[32'd22];

assign ap_CS_fsm_state24 = ap_CS_fsm[32'd23];

assign ap_CS_fsm_state25 = ap_CS_fsm[32'd24];

assign ap_CS_fsm_state26 = ap_CS_fsm[32'd25];

assign ap_CS_fsm_state27 = ap_CS_fsm[32'd26];

assign ap_CS_fsm_state28 = ap_CS_fsm[32'd27];

assign ap_CS_fsm_state29 = ap_CS_fsm[32'd28];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state30 = ap_CS_fsm[32'd29];

assign ap_CS_fsm_state31 = ap_CS_fsm[32'd30];

assign ap_CS_fsm_state32 = ap_CS_fsm[32'd31];

assign ap_CS_fsm_state33 = ap_CS_fsm[32'd32];

assign ap_CS_fsm_state34 = ap_CS_fsm[32'd33];

assign ap_CS_fsm_state35 = ap_CS_fsm[32'd34];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd8];

always @ (*) begin
    ap_block_state18_on_subcall_done = ((ap_sync_grp_Cipher_fu_216_ap_ready & ap_sync_grp_Cipher_fu_216_ap_done) == 1'b0);
end

always @ (*) begin
    ap_block_state2 = ((regslice_both_out_V_U_apdone_blk == 1'b1) | ((in_V_TVALID_int_regslice == 1'b0) & (icmp_ln85_fu_301_p2 == 1'd0)));
end

always @ (*) begin
    ap_rst_n_inv = ~ap_rst_n;
end

assign ap_sync_grp_Cipher_fu_216_ap_done = (grp_Cipher_fu_216_ap_done | ap_sync_reg_grp_Cipher_fu_216_ap_done);

assign ap_sync_grp_Cipher_fu_216_ap_ready = (grp_Cipher_fu_216_ap_ready | ap_sync_reg_grp_Cipher_fu_216_ap_ready);

assign grp_Cipher_fu_216_ap_start = grp_Cipher_fu_216_ap_start_reg;

assign icmp_ln85_fu_301_p2 = ((i_reg_205 == length_read_reg_370) ? 1'b1 : 1'b0);

assign in_V_TREADY = regslice_both_in_V_U_ack_in;

assign out_V_TVALID = regslice_both_out_V_U_vld_out;


// synthesis translate_off
`include "Cipher_Stream_hls_deadlock_detector.vh"
// synthesis translate_on

endmodule //Cipher_Stream

