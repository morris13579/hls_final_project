// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
// Version: 2020.2
// Copyright (C) Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module Cipher_Stream_Four_Term_Multiplication (
        ap_ready,
        p_read,
        p_read1,
        p_read2,
        p_read3,
        ap_return_0,
        ap_return_1,
        ap_return_2,
        ap_return_3
);


output   ap_ready;
input  [7:0] p_read;
input  [7:0] p_read1;
input  [7:0] p_read2;
input  [7:0] p_read3;
output  [7:0] ap_return_0;
output  [7:0] ap_return_1;
output  [7:0] ap_return_2;
output  [7:0] ap_return_3;

wire   [7:0] result_fu_44_p2;
wire   [0:0] tmp_fu_50_p3;
wire   [7:0] result_1_fu_58_p2;
wire   [7:0] result_3_fu_72_p2;
wire   [0:0] tmp_1_fu_78_p3;
wire   [7:0] result_4_fu_86_p2;
wire   [7:0] result_2_fu_64_p3;
wire   [7:0] result_5_fu_92_p3;
wire   [7:0] xor_ln15_1_fu_106_p2;
wire   [7:0] xor_ln15_2_fu_112_p2;
wire   [7:0] xor_ln15_fu_100_p2;
wire   [7:0] result_6_fu_124_p2;
wire   [0:0] tmp_2_fu_130_p3;
wire   [7:0] result_7_fu_138_p2;
wire   [7:0] xor_ln16_fu_152_p2;
wire   [7:0] result_8_fu_144_p3;
wire   [7:0] xor_ln16_2_fu_164_p2;
wire   [7:0] xor_ln16_1_fu_158_p2;
wire   [7:0] result_9_fu_176_p2;
wire   [0:0] tmp_3_fu_182_p3;
wire   [7:0] result_10_fu_190_p2;
wire   [7:0] result_11_fu_196_p3;
wire   [7:0] xor_ln17_1_fu_210_p2;
wire   [7:0] xor_ln17_fu_204_p2;
wire   [7:0] xor_ln18_1_fu_228_p2;
wire   [7:0] xor_ln18_2_fu_234_p2;
wire   [7:0] xor_ln18_fu_222_p2;
wire   [7:0] xor_ln15_3_fu_118_p2;
wire   [7:0] xor_ln16_3_fu_170_p2;
wire   [7:0] xor_ln17_2_fu_216_p2;
wire   [7:0] xor_ln18_3_fu_240_p2;

assign ap_ready = 1'b1;

assign ap_return_0 = xor_ln15_3_fu_118_p2;

assign ap_return_1 = xor_ln16_3_fu_170_p2;

assign ap_return_2 = xor_ln17_2_fu_216_p2;

assign ap_return_3 = xor_ln18_3_fu_240_p2;

assign result_10_fu_190_p2 = (result_9_fu_176_p2 ^ 8'd27);

assign result_11_fu_196_p3 = ((tmp_3_fu_182_p3[0:0] == 1'b1) ? result_10_fu_190_p2 : result_9_fu_176_p2);

assign result_1_fu_58_p2 = (result_fu_44_p2 ^ 8'd27);

assign result_2_fu_64_p3 = ((tmp_fu_50_p3[0:0] == 1'b1) ? result_1_fu_58_p2 : result_fu_44_p2);

assign result_3_fu_72_p2 = p_read1 << 8'd1;

assign result_4_fu_86_p2 = (result_3_fu_72_p2 ^ 8'd27);

assign result_5_fu_92_p3 = ((tmp_1_fu_78_p3[0:0] == 1'b1) ? result_4_fu_86_p2 : result_3_fu_72_p2);

assign result_6_fu_124_p2 = p_read2 << 8'd1;

assign result_7_fu_138_p2 = (result_6_fu_124_p2 ^ 8'd27);

assign result_8_fu_144_p3 = ((tmp_2_fu_130_p3[0:0] == 1'b1) ? result_7_fu_138_p2 : result_6_fu_124_p2);

assign result_9_fu_176_p2 = p_read3 << 8'd1;

assign result_fu_44_p2 = p_read << 8'd1;

assign tmp_1_fu_78_p3 = p_read1[32'd7];

assign tmp_2_fu_130_p3 = p_read2[32'd7];

assign tmp_3_fu_182_p3 = p_read3[32'd7];

assign tmp_fu_50_p3 = p_read[32'd7];

assign xor_ln15_1_fu_106_p2 = (result_5_fu_92_p3 ^ p_read3);

assign xor_ln15_2_fu_112_p2 = (xor_ln15_1_fu_106_p2 ^ p_read2);

assign xor_ln15_3_fu_118_p2 = (xor_ln15_fu_100_p2 ^ xor_ln15_2_fu_112_p2);

assign xor_ln15_fu_100_p2 = (result_2_fu_64_p3 ^ p_read);

assign xor_ln16_1_fu_158_p2 = (xor_ln16_fu_152_p2 ^ result_5_fu_92_p3);

assign xor_ln16_2_fu_164_p2 = (result_8_fu_144_p3 ^ p_read3);

assign xor_ln16_3_fu_170_p2 = (xor_ln16_2_fu_164_p2 ^ xor_ln16_1_fu_158_p2);

assign xor_ln16_fu_152_p2 = (p_read1 ^ p_read);

assign xor_ln17_1_fu_210_p2 = (result_8_fu_144_p3 ^ result_11_fu_196_p3);

assign xor_ln17_2_fu_216_p2 = (xor_ln17_fu_204_p2 ^ xor_ln17_1_fu_210_p2);

assign xor_ln17_fu_204_p2 = (xor_ln16_fu_152_p2 ^ p_read2);

assign xor_ln18_1_fu_228_p2 = (result_11_fu_196_p3 ^ p_read3);

assign xor_ln18_2_fu_234_p2 = (xor_ln18_1_fu_228_p2 ^ p_read2);

assign xor_ln18_3_fu_240_p2 = (xor_ln18_fu_222_p2 ^ xor_ln18_2_fu_234_p2);

assign xor_ln18_fu_222_p2 = (result_2_fu_64_p3 ^ p_read1);

endmodule //Cipher_Stream_Four_Term_Multiplication
