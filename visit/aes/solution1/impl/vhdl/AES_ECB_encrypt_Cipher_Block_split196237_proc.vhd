-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
-- Version: 2020.2
-- Copyright (C) Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity AES_ECB_encrypt_Cipher_Block_split196237_proc is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    p_read : IN STD_LOGIC_VECTOR (7 downto 0);
    encrypt_0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    encrypt_0_ap_vld : OUT STD_LOGIC;
    p_read1 : IN STD_LOGIC_VECTOR (7 downto 0);
    encrypt_1 : OUT STD_LOGIC_VECTOR (7 downto 0);
    encrypt_1_ap_vld : OUT STD_LOGIC;
    p_read2 : IN STD_LOGIC_VECTOR (7 downto 0);
    encrypt_2 : OUT STD_LOGIC_VECTOR (7 downto 0);
    encrypt_2_ap_vld : OUT STD_LOGIC;
    p_read3 : IN STD_LOGIC_VECTOR (7 downto 0);
    encrypt_3 : OUT STD_LOGIC_VECTOR (7 downto 0);
    encrypt_3_ap_vld : OUT STD_LOGIC;
    p_read4 : IN STD_LOGIC_VECTOR (7 downto 0);
    encrypt_4 : OUT STD_LOGIC_VECTOR (7 downto 0);
    encrypt_4_ap_vld : OUT STD_LOGIC;
    p_read5 : IN STD_LOGIC_VECTOR (7 downto 0);
    encrypt_5 : OUT STD_LOGIC_VECTOR (7 downto 0);
    encrypt_5_ap_vld : OUT STD_LOGIC;
    p_read6 : IN STD_LOGIC_VECTOR (7 downto 0);
    encrypt_6 : OUT STD_LOGIC_VECTOR (7 downto 0);
    encrypt_6_ap_vld : OUT STD_LOGIC;
    p_read7 : IN STD_LOGIC_VECTOR (7 downto 0);
    encrypt_7 : OUT STD_LOGIC_VECTOR (7 downto 0);
    encrypt_7_ap_vld : OUT STD_LOGIC;
    p_read8 : IN STD_LOGIC_VECTOR (7 downto 0);
    encrypt_8 : OUT STD_LOGIC_VECTOR (7 downto 0);
    encrypt_8_ap_vld : OUT STD_LOGIC;
    p_read9 : IN STD_LOGIC_VECTOR (7 downto 0);
    encrypt_9 : OUT STD_LOGIC_VECTOR (7 downto 0);
    encrypt_9_ap_vld : OUT STD_LOGIC;
    p_read10 : IN STD_LOGIC_VECTOR (7 downto 0);
    encrypt_10 : OUT STD_LOGIC_VECTOR (7 downto 0);
    encrypt_10_ap_vld : OUT STD_LOGIC;
    p_read11 : IN STD_LOGIC_VECTOR (7 downto 0);
    encrypt_11 : OUT STD_LOGIC_VECTOR (7 downto 0);
    encrypt_11_ap_vld : OUT STD_LOGIC;
    p_read12 : IN STD_LOGIC_VECTOR (7 downto 0);
    encrypt_12 : OUT STD_LOGIC_VECTOR (7 downto 0);
    encrypt_12_ap_vld : OUT STD_LOGIC;
    p_read13 : IN STD_LOGIC_VECTOR (7 downto 0);
    encrypt_13 : OUT STD_LOGIC_VECTOR (7 downto 0);
    encrypt_13_ap_vld : OUT STD_LOGIC;
    p_read14 : IN STD_LOGIC_VECTOR (7 downto 0);
    encrypt_14 : OUT STD_LOGIC_VECTOR (7 downto 0);
    encrypt_14_ap_vld : OUT STD_LOGIC;
    p_read15 : IN STD_LOGIC_VECTOR (7 downto 0);
    encrypt_15 : OUT STD_LOGIC_VECTOR (7 downto 0);
    encrypt_15_ap_vld : OUT STD_LOGIC );
end;


architecture behav of AES_ECB_encrypt_Cipher_Block_split196237_proc is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_boolean_1 : BOOLEAN := true;

attribute shreg_extract : string;
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_CS_fsm : STD_LOGIC_VECTOR (0 downto 0) := "1";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal ap_block_state1 : BOOLEAN;
    signal encrypt_0_preg : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    signal encrypt_1_preg : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    signal encrypt_2_preg : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    signal encrypt_3_preg : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    signal encrypt_4_preg : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    signal encrypt_5_preg : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    signal encrypt_6_preg : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    signal encrypt_7_preg : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    signal encrypt_8_preg : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    signal encrypt_9_preg : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    signal encrypt_10_preg : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    signal encrypt_11_preg : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    signal encrypt_12_preg : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    signal encrypt_13_preg : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    signal encrypt_14_preg : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    signal encrypt_15_preg : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    signal ap_NS_fsm : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_ce_reg : STD_LOGIC;


begin




    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    encrypt_0_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                encrypt_0_preg <= ap_const_lv8_0;
            else
                if ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                    encrypt_0_preg <= p_read;
                end if; 
            end if;
        end if;
    end process;


    encrypt_10_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                encrypt_10_preg <= ap_const_lv8_0;
            else
                if ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                    encrypt_10_preg <= p_read10;
                end if; 
            end if;
        end if;
    end process;


    encrypt_11_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                encrypt_11_preg <= ap_const_lv8_0;
            else
                if ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                    encrypt_11_preg <= p_read11;
                end if; 
            end if;
        end if;
    end process;


    encrypt_12_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                encrypt_12_preg <= ap_const_lv8_0;
            else
                if ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                    encrypt_12_preg <= p_read12;
                end if; 
            end if;
        end if;
    end process;


    encrypt_13_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                encrypt_13_preg <= ap_const_lv8_0;
            else
                if ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                    encrypt_13_preg <= p_read13;
                end if; 
            end if;
        end if;
    end process;


    encrypt_14_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                encrypt_14_preg <= ap_const_lv8_0;
            else
                if ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                    encrypt_14_preg <= p_read14;
                end if; 
            end if;
        end if;
    end process;


    encrypt_15_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                encrypt_15_preg <= ap_const_lv8_0;
            else
                if ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                    encrypt_15_preg <= p_read15;
                end if; 
            end if;
        end if;
    end process;


    encrypt_1_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                encrypt_1_preg <= ap_const_lv8_0;
            else
                if ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                    encrypt_1_preg <= p_read1;
                end if; 
            end if;
        end if;
    end process;


    encrypt_2_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                encrypt_2_preg <= ap_const_lv8_0;
            else
                if ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                    encrypt_2_preg <= p_read2;
                end if; 
            end if;
        end if;
    end process;


    encrypt_3_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                encrypt_3_preg <= ap_const_lv8_0;
            else
                if ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                    encrypt_3_preg <= p_read3;
                end if; 
            end if;
        end if;
    end process;


    encrypt_4_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                encrypt_4_preg <= ap_const_lv8_0;
            else
                if ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                    encrypt_4_preg <= p_read4;
                end if; 
            end if;
        end if;
    end process;


    encrypt_5_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                encrypt_5_preg <= ap_const_lv8_0;
            else
                if ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                    encrypt_5_preg <= p_read5;
                end if; 
            end if;
        end if;
    end process;


    encrypt_6_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                encrypt_6_preg <= ap_const_lv8_0;
            else
                if ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                    encrypt_6_preg <= p_read6;
                end if; 
            end if;
        end if;
    end process;


    encrypt_7_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                encrypt_7_preg <= ap_const_lv8_0;
            else
                if ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                    encrypt_7_preg <= p_read7;
                end if; 
            end if;
        end if;
    end process;


    encrypt_8_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                encrypt_8_preg <= ap_const_lv8_0;
            else
                if ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                    encrypt_8_preg <= p_read8;
                end if; 
            end if;
        end if;
    end process;


    encrypt_9_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                encrypt_9_preg <= ap_const_lv8_0;
            else
                if ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                    encrypt_9_preg <= p_read9;
                end if; 
            end if;
        end if;
    end process;


    ap_NS_fsm_assign_proc : process (ap_start, ap_done_reg, ap_CS_fsm, ap_CS_fsm_state1)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "X";
        end case;
    end process;
    ap_CS_fsm_state1 <= ap_CS_fsm(0);

    ap_block_state1_assign_proc : process(ap_start, ap_done_reg)
    begin
                ap_block_state1 <= ((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1));
    end process;


    ap_done_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1)
    begin
        if ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_done_reg;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1)
    begin
        if ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    encrypt_0_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, p_read, encrypt_0_preg)
    begin
        if ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            encrypt_0 <= p_read;
        else 
            encrypt_0 <= encrypt_0_preg;
        end if; 
    end process;


    encrypt_0_ap_vld_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1)
    begin
        if ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            encrypt_0_ap_vld <= ap_const_logic_1;
        else 
            encrypt_0_ap_vld <= ap_const_logic_0;
        end if; 
    end process;


    encrypt_1_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, p_read1, encrypt_1_preg)
    begin
        if ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            encrypt_1 <= p_read1;
        else 
            encrypt_1 <= encrypt_1_preg;
        end if; 
    end process;


    encrypt_10_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, p_read10, encrypt_10_preg)
    begin
        if ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            encrypt_10 <= p_read10;
        else 
            encrypt_10 <= encrypt_10_preg;
        end if; 
    end process;


    encrypt_10_ap_vld_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1)
    begin
        if ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            encrypt_10_ap_vld <= ap_const_logic_1;
        else 
            encrypt_10_ap_vld <= ap_const_logic_0;
        end if; 
    end process;


    encrypt_11_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, p_read11, encrypt_11_preg)
    begin
        if ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            encrypt_11 <= p_read11;
        else 
            encrypt_11 <= encrypt_11_preg;
        end if; 
    end process;


    encrypt_11_ap_vld_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1)
    begin
        if ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            encrypt_11_ap_vld <= ap_const_logic_1;
        else 
            encrypt_11_ap_vld <= ap_const_logic_0;
        end if; 
    end process;


    encrypt_12_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, p_read12, encrypt_12_preg)
    begin
        if ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            encrypt_12 <= p_read12;
        else 
            encrypt_12 <= encrypt_12_preg;
        end if; 
    end process;


    encrypt_12_ap_vld_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1)
    begin
        if ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            encrypt_12_ap_vld <= ap_const_logic_1;
        else 
            encrypt_12_ap_vld <= ap_const_logic_0;
        end if; 
    end process;


    encrypt_13_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, p_read13, encrypt_13_preg)
    begin
        if ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            encrypt_13 <= p_read13;
        else 
            encrypt_13 <= encrypt_13_preg;
        end if; 
    end process;


    encrypt_13_ap_vld_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1)
    begin
        if ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            encrypt_13_ap_vld <= ap_const_logic_1;
        else 
            encrypt_13_ap_vld <= ap_const_logic_0;
        end if; 
    end process;


    encrypt_14_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, p_read14, encrypt_14_preg)
    begin
        if ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            encrypt_14 <= p_read14;
        else 
            encrypt_14 <= encrypt_14_preg;
        end if; 
    end process;


    encrypt_14_ap_vld_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1)
    begin
        if ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            encrypt_14_ap_vld <= ap_const_logic_1;
        else 
            encrypt_14_ap_vld <= ap_const_logic_0;
        end if; 
    end process;


    encrypt_15_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, p_read15, encrypt_15_preg)
    begin
        if ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            encrypt_15 <= p_read15;
        else 
            encrypt_15 <= encrypt_15_preg;
        end if; 
    end process;


    encrypt_15_ap_vld_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1)
    begin
        if ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            encrypt_15_ap_vld <= ap_const_logic_1;
        else 
            encrypt_15_ap_vld <= ap_const_logic_0;
        end if; 
    end process;


    encrypt_1_ap_vld_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1)
    begin
        if ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            encrypt_1_ap_vld <= ap_const_logic_1;
        else 
            encrypt_1_ap_vld <= ap_const_logic_0;
        end if; 
    end process;


    encrypt_2_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, p_read2, encrypt_2_preg)
    begin
        if ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            encrypt_2 <= p_read2;
        else 
            encrypt_2 <= encrypt_2_preg;
        end if; 
    end process;


    encrypt_2_ap_vld_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1)
    begin
        if ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            encrypt_2_ap_vld <= ap_const_logic_1;
        else 
            encrypt_2_ap_vld <= ap_const_logic_0;
        end if; 
    end process;


    encrypt_3_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, p_read3, encrypt_3_preg)
    begin
        if ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            encrypt_3 <= p_read3;
        else 
            encrypt_3 <= encrypt_3_preg;
        end if; 
    end process;


    encrypt_3_ap_vld_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1)
    begin
        if ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            encrypt_3_ap_vld <= ap_const_logic_1;
        else 
            encrypt_3_ap_vld <= ap_const_logic_0;
        end if; 
    end process;


    encrypt_4_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, p_read4, encrypt_4_preg)
    begin
        if ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            encrypt_4 <= p_read4;
        else 
            encrypt_4 <= encrypt_4_preg;
        end if; 
    end process;


    encrypt_4_ap_vld_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1)
    begin
        if ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            encrypt_4_ap_vld <= ap_const_logic_1;
        else 
            encrypt_4_ap_vld <= ap_const_logic_0;
        end if; 
    end process;


    encrypt_5_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, p_read5, encrypt_5_preg)
    begin
        if ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            encrypt_5 <= p_read5;
        else 
            encrypt_5 <= encrypt_5_preg;
        end if; 
    end process;


    encrypt_5_ap_vld_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1)
    begin
        if ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            encrypt_5_ap_vld <= ap_const_logic_1;
        else 
            encrypt_5_ap_vld <= ap_const_logic_0;
        end if; 
    end process;


    encrypt_6_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, p_read6, encrypt_6_preg)
    begin
        if ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            encrypt_6 <= p_read6;
        else 
            encrypt_6 <= encrypt_6_preg;
        end if; 
    end process;


    encrypt_6_ap_vld_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1)
    begin
        if ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            encrypt_6_ap_vld <= ap_const_logic_1;
        else 
            encrypt_6_ap_vld <= ap_const_logic_0;
        end if; 
    end process;


    encrypt_7_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, p_read7, encrypt_7_preg)
    begin
        if ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            encrypt_7 <= p_read7;
        else 
            encrypt_7 <= encrypt_7_preg;
        end if; 
    end process;


    encrypt_7_ap_vld_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1)
    begin
        if ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            encrypt_7_ap_vld <= ap_const_logic_1;
        else 
            encrypt_7_ap_vld <= ap_const_logic_0;
        end if; 
    end process;


    encrypt_8_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, p_read8, encrypt_8_preg)
    begin
        if ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            encrypt_8 <= p_read8;
        else 
            encrypt_8 <= encrypt_8_preg;
        end if; 
    end process;


    encrypt_8_ap_vld_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1)
    begin
        if ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            encrypt_8_ap_vld <= ap_const_logic_1;
        else 
            encrypt_8_ap_vld <= ap_const_logic_0;
        end if; 
    end process;


    encrypt_9_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, p_read9, encrypt_9_preg)
    begin
        if ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            encrypt_9 <= p_read9;
        else 
            encrypt_9 <= encrypt_9_preg;
        end if; 
    end process;


    encrypt_9_ap_vld_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1)
    begin
        if ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            encrypt_9_ap_vld <= ap_const_logic_1;
        else 
            encrypt_9_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

end behav;
