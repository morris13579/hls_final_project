-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
-- Version: 2020.2
-- Copyright (C) Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity AES_ECB_encrypt_SubBytes66 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    p_read : IN STD_LOGIC_VECTOR (7 downto 0);
    p_read1 : IN STD_LOGIC_VECTOR (7 downto 0);
    p_read2 : IN STD_LOGIC_VECTOR (7 downto 0);
    p_read3 : IN STD_LOGIC_VECTOR (7 downto 0);
    p_read4 : IN STD_LOGIC_VECTOR (7 downto 0);
    p_read5 : IN STD_LOGIC_VECTOR (7 downto 0);
    p_read6 : IN STD_LOGIC_VECTOR (7 downto 0);
    p_read7 : IN STD_LOGIC_VECTOR (7 downto 0);
    p_read8 : IN STD_LOGIC_VECTOR (7 downto 0);
    p_read9 : IN STD_LOGIC_VECTOR (7 downto 0);
    p_read10 : IN STD_LOGIC_VECTOR (7 downto 0);
    p_read11 : IN STD_LOGIC_VECTOR (7 downto 0);
    p_read12 : IN STD_LOGIC_VECTOR (7 downto 0);
    p_read13 : IN STD_LOGIC_VECTOR (7 downto 0);
    p_read14 : IN STD_LOGIC_VECTOR (7 downto 0);
    p_read15 : IN STD_LOGIC_VECTOR (7 downto 0);
    out_0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    out_0_ap_vld : OUT STD_LOGIC;
    out_1 : OUT STD_LOGIC_VECTOR (7 downto 0);
    out_1_ap_vld : OUT STD_LOGIC;
    out_2 : OUT STD_LOGIC_VECTOR (7 downto 0);
    out_2_ap_vld : OUT STD_LOGIC;
    out_3 : OUT STD_LOGIC_VECTOR (7 downto 0);
    out_3_ap_vld : OUT STD_LOGIC;
    out_4 : OUT STD_LOGIC_VECTOR (7 downto 0);
    out_4_ap_vld : OUT STD_LOGIC;
    out_5 : OUT STD_LOGIC_VECTOR (7 downto 0);
    out_5_ap_vld : OUT STD_LOGIC;
    out_6 : OUT STD_LOGIC_VECTOR (7 downto 0);
    out_6_ap_vld : OUT STD_LOGIC;
    out_7 : OUT STD_LOGIC_VECTOR (7 downto 0);
    out_7_ap_vld : OUT STD_LOGIC;
    out_8 : OUT STD_LOGIC_VECTOR (7 downto 0);
    out_8_ap_vld : OUT STD_LOGIC;
    out_9 : OUT STD_LOGIC_VECTOR (7 downto 0);
    out_9_ap_vld : OUT STD_LOGIC;
    out_10 : OUT STD_LOGIC_VECTOR (7 downto 0);
    out_10_ap_vld : OUT STD_LOGIC;
    out_11 : OUT STD_LOGIC_VECTOR (7 downto 0);
    out_11_ap_vld : OUT STD_LOGIC;
    out_12 : OUT STD_LOGIC_VECTOR (7 downto 0);
    out_12_ap_vld : OUT STD_LOGIC;
    out_13 : OUT STD_LOGIC_VECTOR (7 downto 0);
    out_13_ap_vld : OUT STD_LOGIC;
    out_14 : OUT STD_LOGIC_VECTOR (7 downto 0);
    out_14_ap_vld : OUT STD_LOGIC;
    out_15 : OUT STD_LOGIC_VECTOR (7 downto 0);
    out_15_ap_vld : OUT STD_LOGIC );
end;


architecture behav of AES_ECB_encrypt_SubBytes66 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_boolean_1 : BOOLEAN := true;

attribute shreg_extract : string;
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_CS_fsm : STD_LOGIC_VECTOR (1 downto 0) := "01";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal sbox111_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal sbox111_ce0 : STD_LOGIC;
    signal sbox111_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal sbox111_address1 : STD_LOGIC_VECTOR (7 downto 0);
    signal sbox111_ce1 : STD_LOGIC;
    signal sbox111_q1 : STD_LOGIC_VECTOR (7 downto 0);
    signal sbox111_address2 : STD_LOGIC_VECTOR (7 downto 0);
    signal sbox111_ce2 : STD_LOGIC;
    signal sbox111_q2 : STD_LOGIC_VECTOR (7 downto 0);
    signal sbox111_address3 : STD_LOGIC_VECTOR (7 downto 0);
    signal sbox111_ce3 : STD_LOGIC;
    signal sbox111_q3 : STD_LOGIC_VECTOR (7 downto 0);
    signal sbox111_address4 : STD_LOGIC_VECTOR (7 downto 0);
    signal sbox111_ce4 : STD_LOGIC;
    signal sbox111_q4 : STD_LOGIC_VECTOR (7 downto 0);
    signal sbox111_address5 : STD_LOGIC_VECTOR (7 downto 0);
    signal sbox111_ce5 : STD_LOGIC;
    signal sbox111_q5 : STD_LOGIC_VECTOR (7 downto 0);
    signal sbox111_address6 : STD_LOGIC_VECTOR (7 downto 0);
    signal sbox111_ce6 : STD_LOGIC;
    signal sbox111_q6 : STD_LOGIC_VECTOR (7 downto 0);
    signal sbox111_address7 : STD_LOGIC_VECTOR (7 downto 0);
    signal sbox111_ce7 : STD_LOGIC;
    signal sbox111_q7 : STD_LOGIC_VECTOR (7 downto 0);
    signal sbox111_address8 : STD_LOGIC_VECTOR (7 downto 0);
    signal sbox111_ce8 : STD_LOGIC;
    signal sbox111_q8 : STD_LOGIC_VECTOR (7 downto 0);
    signal sbox111_address9 : STD_LOGIC_VECTOR (7 downto 0);
    signal sbox111_ce9 : STD_LOGIC;
    signal sbox111_q9 : STD_LOGIC_VECTOR (7 downto 0);
    signal sbox111_address10 : STD_LOGIC_VECTOR (7 downto 0);
    signal sbox111_ce10 : STD_LOGIC;
    signal sbox111_q10 : STD_LOGIC_VECTOR (7 downto 0);
    signal sbox111_address11 : STD_LOGIC_VECTOR (7 downto 0);
    signal sbox111_ce11 : STD_LOGIC;
    signal sbox111_q11 : STD_LOGIC_VECTOR (7 downto 0);
    signal sbox111_address12 : STD_LOGIC_VECTOR (7 downto 0);
    signal sbox111_ce12 : STD_LOGIC;
    signal sbox111_q12 : STD_LOGIC_VECTOR (7 downto 0);
    signal sbox111_address13 : STD_LOGIC_VECTOR (7 downto 0);
    signal sbox111_ce13 : STD_LOGIC;
    signal sbox111_q13 : STD_LOGIC_VECTOR (7 downto 0);
    signal sbox111_address14 : STD_LOGIC_VECTOR (7 downto 0);
    signal sbox111_ce14 : STD_LOGIC;
    signal sbox111_q14 : STD_LOGIC_VECTOR (7 downto 0);
    signal sbox111_address15 : STD_LOGIC_VECTOR (7 downto 0);
    signal sbox111_ce15 : STD_LOGIC;
    signal sbox111_q15 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln10_fu_489_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln10_1_fu_494_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln10_2_fu_499_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln10_3_fu_504_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln10_4_fu_509_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln10_5_fu_514_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln10_6_fu_519_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln10_7_fu_524_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln10_8_fu_529_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln10_9_fu_534_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln10_10_fu_539_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln10_11_fu_544_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln10_12_fu_549_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln10_13_fu_554_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln10_14_fu_559_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln10_15_fu_564_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_state1 : BOOLEAN;
    signal out_0_preg : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal out_1_preg : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    signal out_2_preg : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    signal out_3_preg : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    signal out_4_preg : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    signal out_5_preg : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    signal out_6_preg : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    signal out_7_preg : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    signal out_8_preg : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    signal out_9_preg : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    signal out_10_preg : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    signal out_11_preg : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    signal out_12_preg : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    signal out_13_preg : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    signal out_14_preg : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    signal out_15_preg : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    signal ap_NS_fsm : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_ce_reg : STD_LOGIC;

    component AES_ECB_encrypt_SubBytes58_sbox113 IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        address1 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce1 : IN STD_LOGIC;
        q1 : OUT STD_LOGIC_VECTOR (7 downto 0);
        address2 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce2 : IN STD_LOGIC;
        q2 : OUT STD_LOGIC_VECTOR (7 downto 0);
        address3 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce3 : IN STD_LOGIC;
        q3 : OUT STD_LOGIC_VECTOR (7 downto 0);
        address4 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce4 : IN STD_LOGIC;
        q4 : OUT STD_LOGIC_VECTOR (7 downto 0);
        address5 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce5 : IN STD_LOGIC;
        q5 : OUT STD_LOGIC_VECTOR (7 downto 0);
        address6 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce6 : IN STD_LOGIC;
        q6 : OUT STD_LOGIC_VECTOR (7 downto 0);
        address7 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce7 : IN STD_LOGIC;
        q7 : OUT STD_LOGIC_VECTOR (7 downto 0);
        address8 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce8 : IN STD_LOGIC;
        q8 : OUT STD_LOGIC_VECTOR (7 downto 0);
        address9 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce9 : IN STD_LOGIC;
        q9 : OUT STD_LOGIC_VECTOR (7 downto 0);
        address10 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce10 : IN STD_LOGIC;
        q10 : OUT STD_LOGIC_VECTOR (7 downto 0);
        address11 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce11 : IN STD_LOGIC;
        q11 : OUT STD_LOGIC_VECTOR (7 downto 0);
        address12 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce12 : IN STD_LOGIC;
        q12 : OUT STD_LOGIC_VECTOR (7 downto 0);
        address13 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce13 : IN STD_LOGIC;
        q13 : OUT STD_LOGIC_VECTOR (7 downto 0);
        address14 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce14 : IN STD_LOGIC;
        q14 : OUT STD_LOGIC_VECTOR (7 downto 0);
        address15 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce15 : IN STD_LOGIC;
        q15 : OUT STD_LOGIC_VECTOR (7 downto 0) );
    end component;



begin
    sbox111_U : component AES_ECB_encrypt_SubBytes58_sbox113
    generic map (
        DataWidth => 8,
        AddressRange => 256,
        AddressWidth => 8)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => sbox111_address0,
        ce0 => sbox111_ce0,
        q0 => sbox111_q0,
        address1 => sbox111_address1,
        ce1 => sbox111_ce1,
        q1 => sbox111_q1,
        address2 => sbox111_address2,
        ce2 => sbox111_ce2,
        q2 => sbox111_q2,
        address3 => sbox111_address3,
        ce3 => sbox111_ce3,
        q3 => sbox111_q3,
        address4 => sbox111_address4,
        ce4 => sbox111_ce4,
        q4 => sbox111_q4,
        address5 => sbox111_address5,
        ce5 => sbox111_ce5,
        q5 => sbox111_q5,
        address6 => sbox111_address6,
        ce6 => sbox111_ce6,
        q6 => sbox111_q6,
        address7 => sbox111_address7,
        ce7 => sbox111_ce7,
        q7 => sbox111_q7,
        address8 => sbox111_address8,
        ce8 => sbox111_ce8,
        q8 => sbox111_q8,
        address9 => sbox111_address9,
        ce9 => sbox111_ce9,
        q9 => sbox111_q9,
        address10 => sbox111_address10,
        ce10 => sbox111_ce10,
        q10 => sbox111_q10,
        address11 => sbox111_address11,
        ce11 => sbox111_ce11,
        q11 => sbox111_q11,
        address12 => sbox111_address12,
        ce12 => sbox111_ce12,
        q12 => sbox111_q12,
        address13 => sbox111_address13,
        ce13 => sbox111_ce13,
        q13 => sbox111_q13,
        address14 => sbox111_address14,
        ce14 => sbox111_ce14,
        q14 => sbox111_q14,
        address15 => sbox111_address15,
        ce15 => sbox111_ce15,
        q15 => sbox111_q15);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    out_0_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                out_0_preg <= ap_const_lv8_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
                    out_0_preg <= sbox111_q15;
                end if; 
            end if;
        end if;
    end process;


    out_10_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                out_10_preg <= ap_const_lv8_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
                    out_10_preg <= sbox111_q5;
                end if; 
            end if;
        end if;
    end process;


    out_11_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                out_11_preg <= ap_const_lv8_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
                    out_11_preg <= sbox111_q4;
                end if; 
            end if;
        end if;
    end process;


    out_12_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                out_12_preg <= ap_const_lv8_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
                    out_12_preg <= sbox111_q3;
                end if; 
            end if;
        end if;
    end process;


    out_13_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                out_13_preg <= ap_const_lv8_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
                    out_13_preg <= sbox111_q2;
                end if; 
            end if;
        end if;
    end process;


    out_14_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                out_14_preg <= ap_const_lv8_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
                    out_14_preg <= sbox111_q1;
                end if; 
            end if;
        end if;
    end process;


    out_15_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                out_15_preg <= ap_const_lv8_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
                    out_15_preg <= sbox111_q0;
                end if; 
            end if;
        end if;
    end process;


    out_1_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                out_1_preg <= ap_const_lv8_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
                    out_1_preg <= sbox111_q14;
                end if; 
            end if;
        end if;
    end process;


    out_2_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                out_2_preg <= ap_const_lv8_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
                    out_2_preg <= sbox111_q13;
                end if; 
            end if;
        end if;
    end process;


    out_3_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                out_3_preg <= ap_const_lv8_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
                    out_3_preg <= sbox111_q12;
                end if; 
            end if;
        end if;
    end process;


    out_4_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                out_4_preg <= ap_const_lv8_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
                    out_4_preg <= sbox111_q11;
                end if; 
            end if;
        end if;
    end process;


    out_5_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                out_5_preg <= ap_const_lv8_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
                    out_5_preg <= sbox111_q10;
                end if; 
            end if;
        end if;
    end process;


    out_6_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                out_6_preg <= ap_const_lv8_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
                    out_6_preg <= sbox111_q9;
                end if; 
            end if;
        end if;
    end process;


    out_7_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                out_7_preg <= ap_const_lv8_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
                    out_7_preg <= sbox111_q8;
                end if; 
            end if;
        end if;
    end process;


    out_8_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                out_8_preg <= ap_const_lv8_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
                    out_8_preg <= sbox111_q7;
                end if; 
            end if;
        end if;
    end process;


    out_9_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                out_9_preg <= ap_const_lv8_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
                    out_9_preg <= sbox111_q6;
                end if; 
            end if;
        end if;
    end process;


    ap_NS_fsm_assign_proc : process (ap_start, ap_done_reg, ap_CS_fsm, ap_CS_fsm_state1)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XX";
        end case;
    end process;
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);

    ap_block_state1_assign_proc : process(ap_start, ap_done_reg)
    begin
                ap_block_state1 <= ((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1));
    end process;


    ap_done_assign_proc : process(ap_done_reg, ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_done_reg;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    out_0_assign_proc : process(sbox111_q15, out_0_preg, ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            out_0 <= sbox111_q15;
        else 
            out_0 <= out_0_preg;
        end if; 
    end process;


    out_0_ap_vld_assign_proc : process(ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            out_0_ap_vld <= ap_const_logic_1;
        else 
            out_0_ap_vld <= ap_const_logic_0;
        end if; 
    end process;


    out_1_assign_proc : process(sbox111_q14, ap_CS_fsm_state2, out_1_preg)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            out_1 <= sbox111_q14;
        else 
            out_1 <= out_1_preg;
        end if; 
    end process;


    out_10_assign_proc : process(sbox111_q5, ap_CS_fsm_state2, out_10_preg)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            out_10 <= sbox111_q5;
        else 
            out_10 <= out_10_preg;
        end if; 
    end process;


    out_10_ap_vld_assign_proc : process(ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            out_10_ap_vld <= ap_const_logic_1;
        else 
            out_10_ap_vld <= ap_const_logic_0;
        end if; 
    end process;


    out_11_assign_proc : process(sbox111_q4, ap_CS_fsm_state2, out_11_preg)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            out_11 <= sbox111_q4;
        else 
            out_11 <= out_11_preg;
        end if; 
    end process;


    out_11_ap_vld_assign_proc : process(ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            out_11_ap_vld <= ap_const_logic_1;
        else 
            out_11_ap_vld <= ap_const_logic_0;
        end if; 
    end process;


    out_12_assign_proc : process(sbox111_q3, ap_CS_fsm_state2, out_12_preg)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            out_12 <= sbox111_q3;
        else 
            out_12 <= out_12_preg;
        end if; 
    end process;


    out_12_ap_vld_assign_proc : process(ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            out_12_ap_vld <= ap_const_logic_1;
        else 
            out_12_ap_vld <= ap_const_logic_0;
        end if; 
    end process;


    out_13_assign_proc : process(sbox111_q2, ap_CS_fsm_state2, out_13_preg)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            out_13 <= sbox111_q2;
        else 
            out_13 <= out_13_preg;
        end if; 
    end process;


    out_13_ap_vld_assign_proc : process(ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            out_13_ap_vld <= ap_const_logic_1;
        else 
            out_13_ap_vld <= ap_const_logic_0;
        end if; 
    end process;


    out_14_assign_proc : process(sbox111_q1, ap_CS_fsm_state2, out_14_preg)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            out_14 <= sbox111_q1;
        else 
            out_14 <= out_14_preg;
        end if; 
    end process;


    out_14_ap_vld_assign_proc : process(ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            out_14_ap_vld <= ap_const_logic_1;
        else 
            out_14_ap_vld <= ap_const_logic_0;
        end if; 
    end process;


    out_15_assign_proc : process(sbox111_q0, ap_CS_fsm_state2, out_15_preg)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            out_15 <= sbox111_q0;
        else 
            out_15 <= out_15_preg;
        end if; 
    end process;


    out_15_ap_vld_assign_proc : process(ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            out_15_ap_vld <= ap_const_logic_1;
        else 
            out_15_ap_vld <= ap_const_logic_0;
        end if; 
    end process;


    out_1_ap_vld_assign_proc : process(ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            out_1_ap_vld <= ap_const_logic_1;
        else 
            out_1_ap_vld <= ap_const_logic_0;
        end if; 
    end process;


    out_2_assign_proc : process(sbox111_q13, ap_CS_fsm_state2, out_2_preg)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            out_2 <= sbox111_q13;
        else 
            out_2 <= out_2_preg;
        end if; 
    end process;


    out_2_ap_vld_assign_proc : process(ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            out_2_ap_vld <= ap_const_logic_1;
        else 
            out_2_ap_vld <= ap_const_logic_0;
        end if; 
    end process;


    out_3_assign_proc : process(sbox111_q12, ap_CS_fsm_state2, out_3_preg)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            out_3 <= sbox111_q12;
        else 
            out_3 <= out_3_preg;
        end if; 
    end process;


    out_3_ap_vld_assign_proc : process(ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            out_3_ap_vld <= ap_const_logic_1;
        else 
            out_3_ap_vld <= ap_const_logic_0;
        end if; 
    end process;


    out_4_assign_proc : process(sbox111_q11, ap_CS_fsm_state2, out_4_preg)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            out_4 <= sbox111_q11;
        else 
            out_4 <= out_4_preg;
        end if; 
    end process;


    out_4_ap_vld_assign_proc : process(ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            out_4_ap_vld <= ap_const_logic_1;
        else 
            out_4_ap_vld <= ap_const_logic_0;
        end if; 
    end process;


    out_5_assign_proc : process(sbox111_q10, ap_CS_fsm_state2, out_5_preg)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            out_5 <= sbox111_q10;
        else 
            out_5 <= out_5_preg;
        end if; 
    end process;


    out_5_ap_vld_assign_proc : process(ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            out_5_ap_vld <= ap_const_logic_1;
        else 
            out_5_ap_vld <= ap_const_logic_0;
        end if; 
    end process;


    out_6_assign_proc : process(sbox111_q9, ap_CS_fsm_state2, out_6_preg)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            out_6 <= sbox111_q9;
        else 
            out_6 <= out_6_preg;
        end if; 
    end process;


    out_6_ap_vld_assign_proc : process(ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            out_6_ap_vld <= ap_const_logic_1;
        else 
            out_6_ap_vld <= ap_const_logic_0;
        end if; 
    end process;


    out_7_assign_proc : process(sbox111_q8, ap_CS_fsm_state2, out_7_preg)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            out_7 <= sbox111_q8;
        else 
            out_7 <= out_7_preg;
        end if; 
    end process;


    out_7_ap_vld_assign_proc : process(ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            out_7_ap_vld <= ap_const_logic_1;
        else 
            out_7_ap_vld <= ap_const_logic_0;
        end if; 
    end process;


    out_8_assign_proc : process(sbox111_q7, ap_CS_fsm_state2, out_8_preg)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            out_8 <= sbox111_q7;
        else 
            out_8 <= out_8_preg;
        end if; 
    end process;


    out_8_ap_vld_assign_proc : process(ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            out_8_ap_vld <= ap_const_logic_1;
        else 
            out_8_ap_vld <= ap_const_logic_0;
        end if; 
    end process;


    out_9_assign_proc : process(sbox111_q6, ap_CS_fsm_state2, out_9_preg)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            out_9 <= sbox111_q6;
        else 
            out_9 <= out_9_preg;
        end if; 
    end process;


    out_9_ap_vld_assign_proc : process(ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            out_9_ap_vld <= ap_const_logic_1;
        else 
            out_9_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    sbox111_address0 <= zext_ln10_15_fu_564_p1(8 - 1 downto 0);
    sbox111_address1 <= zext_ln10_14_fu_559_p1(8 - 1 downto 0);
    sbox111_address10 <= zext_ln10_5_fu_514_p1(8 - 1 downto 0);
    sbox111_address11 <= zext_ln10_4_fu_509_p1(8 - 1 downto 0);
    sbox111_address12 <= zext_ln10_3_fu_504_p1(8 - 1 downto 0);
    sbox111_address13 <= zext_ln10_2_fu_499_p1(8 - 1 downto 0);
    sbox111_address14 <= zext_ln10_1_fu_494_p1(8 - 1 downto 0);
    sbox111_address15 <= zext_ln10_fu_489_p1(8 - 1 downto 0);
    sbox111_address2 <= zext_ln10_13_fu_554_p1(8 - 1 downto 0);
    sbox111_address3 <= zext_ln10_12_fu_549_p1(8 - 1 downto 0);
    sbox111_address4 <= zext_ln10_11_fu_544_p1(8 - 1 downto 0);
    sbox111_address5 <= zext_ln10_10_fu_539_p1(8 - 1 downto 0);
    sbox111_address6 <= zext_ln10_9_fu_534_p1(8 - 1 downto 0);
    sbox111_address7 <= zext_ln10_8_fu_529_p1(8 - 1 downto 0);
    sbox111_address8 <= zext_ln10_7_fu_524_p1(8 - 1 downto 0);
    sbox111_address9 <= zext_ln10_6_fu_519_p1(8 - 1 downto 0);

    sbox111_ce0_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1)
    begin
        if ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            sbox111_ce0 <= ap_const_logic_1;
        else 
            sbox111_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    sbox111_ce1_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1)
    begin
        if ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            sbox111_ce1 <= ap_const_logic_1;
        else 
            sbox111_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    sbox111_ce10_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1)
    begin
        if ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            sbox111_ce10 <= ap_const_logic_1;
        else 
            sbox111_ce10 <= ap_const_logic_0;
        end if; 
    end process;


    sbox111_ce11_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1)
    begin
        if ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            sbox111_ce11 <= ap_const_logic_1;
        else 
            sbox111_ce11 <= ap_const_logic_0;
        end if; 
    end process;


    sbox111_ce12_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1)
    begin
        if ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            sbox111_ce12 <= ap_const_logic_1;
        else 
            sbox111_ce12 <= ap_const_logic_0;
        end if; 
    end process;


    sbox111_ce13_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1)
    begin
        if ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            sbox111_ce13 <= ap_const_logic_1;
        else 
            sbox111_ce13 <= ap_const_logic_0;
        end if; 
    end process;


    sbox111_ce14_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1)
    begin
        if ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            sbox111_ce14 <= ap_const_logic_1;
        else 
            sbox111_ce14 <= ap_const_logic_0;
        end if; 
    end process;


    sbox111_ce15_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1)
    begin
        if ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            sbox111_ce15 <= ap_const_logic_1;
        else 
            sbox111_ce15 <= ap_const_logic_0;
        end if; 
    end process;


    sbox111_ce2_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1)
    begin
        if ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            sbox111_ce2 <= ap_const_logic_1;
        else 
            sbox111_ce2 <= ap_const_logic_0;
        end if; 
    end process;


    sbox111_ce3_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1)
    begin
        if ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            sbox111_ce3 <= ap_const_logic_1;
        else 
            sbox111_ce3 <= ap_const_logic_0;
        end if; 
    end process;


    sbox111_ce4_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1)
    begin
        if ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            sbox111_ce4 <= ap_const_logic_1;
        else 
            sbox111_ce4 <= ap_const_logic_0;
        end if; 
    end process;


    sbox111_ce5_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1)
    begin
        if ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            sbox111_ce5 <= ap_const_logic_1;
        else 
            sbox111_ce5 <= ap_const_logic_0;
        end if; 
    end process;


    sbox111_ce6_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1)
    begin
        if ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            sbox111_ce6 <= ap_const_logic_1;
        else 
            sbox111_ce6 <= ap_const_logic_0;
        end if; 
    end process;


    sbox111_ce7_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1)
    begin
        if ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            sbox111_ce7 <= ap_const_logic_1;
        else 
            sbox111_ce7 <= ap_const_logic_0;
        end if; 
    end process;


    sbox111_ce8_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1)
    begin
        if ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            sbox111_ce8 <= ap_const_logic_1;
        else 
            sbox111_ce8 <= ap_const_logic_0;
        end if; 
    end process;


    sbox111_ce9_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1)
    begin
        if ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            sbox111_ce9 <= ap_const_logic_1;
        else 
            sbox111_ce9 <= ap_const_logic_0;
        end if; 
    end process;

    zext_ln10_10_fu_539_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_read10),64));
    zext_ln10_11_fu_544_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_read11),64));
    zext_ln10_12_fu_549_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_read12),64));
    zext_ln10_13_fu_554_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_read13),64));
    zext_ln10_14_fu_559_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_read14),64));
    zext_ln10_15_fu_564_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_read15),64));
    zext_ln10_1_fu_494_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_read1),64));
    zext_ln10_2_fu_499_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_read2),64));
    zext_ln10_3_fu_504_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_read3),64));
    zext_ln10_4_fu_509_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_read4),64));
    zext_ln10_5_fu_514_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_read5),64));
    zext_ln10_6_fu_519_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_read6),64));
    zext_ln10_7_fu_524_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_read7),64));
    zext_ln10_8_fu_529_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_read8),64));
    zext_ln10_9_fu_534_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_read9),64));
    zext_ln10_fu_489_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_read),64));
end behav;
