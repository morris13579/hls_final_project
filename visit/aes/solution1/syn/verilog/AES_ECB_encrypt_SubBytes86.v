// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
// Version: 2020.2
// Copyright (C) Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module AES_ECB_encrypt_SubBytes86 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        p_read,
        p_read1,
        p_read2,
        p_read3,
        p_read4,
        p_read5,
        p_read6,
        p_read7,
        p_read8,
        p_read9,
        p_read10,
        p_read11,
        p_read12,
        p_read13,
        p_read14,
        p_read15,
        out_0,
        out_0_ap_vld,
        out_1,
        out_1_ap_vld,
        out_2,
        out_2_ap_vld,
        out_3,
        out_3_ap_vld,
        out_4,
        out_4_ap_vld,
        out_5,
        out_5_ap_vld,
        out_6,
        out_6_ap_vld,
        out_7,
        out_7_ap_vld,
        out_8,
        out_8_ap_vld,
        out_9,
        out_9_ap_vld,
        out_10,
        out_10_ap_vld,
        out_11,
        out_11_ap_vld,
        out_12,
        out_12_ap_vld,
        out_13,
        out_13_ap_vld,
        out_14,
        out_14_ap_vld,
        out_15,
        out_15_ap_vld
);

parameter    ap_ST_fsm_state1 = 2'd1;
parameter    ap_ST_fsm_state2 = 2'd2;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
input  [7:0] p_read;
input  [7:0] p_read1;
input  [7:0] p_read2;
input  [7:0] p_read3;
input  [7:0] p_read4;
input  [7:0] p_read5;
input  [7:0] p_read6;
input  [7:0] p_read7;
input  [7:0] p_read8;
input  [7:0] p_read9;
input  [7:0] p_read10;
input  [7:0] p_read11;
input  [7:0] p_read12;
input  [7:0] p_read13;
input  [7:0] p_read14;
input  [7:0] p_read15;
output  [7:0] out_0;
output   out_0_ap_vld;
output  [7:0] out_1;
output   out_1_ap_vld;
output  [7:0] out_2;
output   out_2_ap_vld;
output  [7:0] out_3;
output   out_3_ap_vld;
output  [7:0] out_4;
output   out_4_ap_vld;
output  [7:0] out_5;
output   out_5_ap_vld;
output  [7:0] out_6;
output   out_6_ap_vld;
output  [7:0] out_7;
output   out_7_ap_vld;
output  [7:0] out_8;
output   out_8_ap_vld;
output  [7:0] out_9;
output   out_9_ap_vld;
output  [7:0] out_10;
output   out_10_ap_vld;
output  [7:0] out_11;
output   out_11_ap_vld;
output  [7:0] out_12;
output   out_12_ap_vld;
output  [7:0] out_13;
output   out_13_ap_vld;
output  [7:0] out_14;
output   out_14_ap_vld;
output  [7:0] out_15;
output   out_15_ap_vld;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg[7:0] out_0;
reg out_0_ap_vld;
reg[7:0] out_1;
reg out_1_ap_vld;
reg[7:0] out_2;
reg out_2_ap_vld;
reg[7:0] out_3;
reg out_3_ap_vld;
reg[7:0] out_4;
reg out_4_ap_vld;
reg[7:0] out_5;
reg out_5_ap_vld;
reg[7:0] out_6;
reg out_6_ap_vld;
reg[7:0] out_7;
reg out_7_ap_vld;
reg[7:0] out_8;
reg out_8_ap_vld;
reg[7:0] out_9;
reg out_9_ap_vld;
reg[7:0] out_10;
reg out_10_ap_vld;
reg[7:0] out_11;
reg out_11_ap_vld;
reg[7:0] out_12;
reg out_12_ap_vld;
reg[7:0] out_13;
reg out_13_ap_vld;
reg[7:0] out_14;
reg out_14_ap_vld;
reg[7:0] out_15;
reg out_15_ap_vld;

reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [1:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [7:0] sbox106_address0;
reg    sbox106_ce0;
wire   [7:0] sbox106_q0;
wire   [7:0] sbox106_address1;
reg    sbox106_ce1;
wire   [7:0] sbox106_q1;
wire   [7:0] sbox106_address2;
reg    sbox106_ce2;
wire   [7:0] sbox106_q2;
wire   [7:0] sbox106_address3;
reg    sbox106_ce3;
wire   [7:0] sbox106_q3;
wire   [7:0] sbox106_address4;
reg    sbox106_ce4;
wire   [7:0] sbox106_q4;
wire   [7:0] sbox106_address5;
reg    sbox106_ce5;
wire   [7:0] sbox106_q5;
wire   [7:0] sbox106_address6;
reg    sbox106_ce6;
wire   [7:0] sbox106_q6;
wire   [7:0] sbox106_address7;
reg    sbox106_ce7;
wire   [7:0] sbox106_q7;
wire   [7:0] sbox106_address8;
reg    sbox106_ce8;
wire   [7:0] sbox106_q8;
wire   [7:0] sbox106_address9;
reg    sbox106_ce9;
wire   [7:0] sbox106_q9;
wire   [7:0] sbox106_address10;
reg    sbox106_ce10;
wire   [7:0] sbox106_q10;
wire   [7:0] sbox106_address11;
reg    sbox106_ce11;
wire   [7:0] sbox106_q11;
wire   [7:0] sbox106_address12;
reg    sbox106_ce12;
wire   [7:0] sbox106_q12;
wire   [7:0] sbox106_address13;
reg    sbox106_ce13;
wire   [7:0] sbox106_q13;
wire   [7:0] sbox106_address14;
reg    sbox106_ce14;
wire   [7:0] sbox106_q14;
wire   [7:0] sbox106_address15;
reg    sbox106_ce15;
wire   [7:0] sbox106_q15;
wire   [63:0] zext_ln10_fu_489_p1;
wire   [63:0] zext_ln10_1_fu_494_p1;
wire   [63:0] zext_ln10_2_fu_499_p1;
wire   [63:0] zext_ln10_3_fu_504_p1;
wire   [63:0] zext_ln10_4_fu_509_p1;
wire   [63:0] zext_ln10_5_fu_514_p1;
wire   [63:0] zext_ln10_6_fu_519_p1;
wire   [63:0] zext_ln10_7_fu_524_p1;
wire   [63:0] zext_ln10_8_fu_529_p1;
wire   [63:0] zext_ln10_9_fu_534_p1;
wire   [63:0] zext_ln10_10_fu_539_p1;
wire   [63:0] zext_ln10_11_fu_544_p1;
wire   [63:0] zext_ln10_12_fu_549_p1;
wire   [63:0] zext_ln10_13_fu_554_p1;
wire   [63:0] zext_ln10_14_fu_559_p1;
wire   [63:0] zext_ln10_15_fu_564_p1;
reg    ap_block_state1;
reg   [7:0] out_0_preg;
wire    ap_CS_fsm_state2;
reg   [7:0] out_1_preg;
reg   [7:0] out_2_preg;
reg   [7:0] out_3_preg;
reg   [7:0] out_4_preg;
reg   [7:0] out_5_preg;
reg   [7:0] out_6_preg;
reg   [7:0] out_7_preg;
reg   [7:0] out_8_preg;
reg   [7:0] out_9_preg;
reg   [7:0] out_10_preg;
reg   [7:0] out_11_preg;
reg   [7:0] out_12_preg;
reg   [7:0] out_13_preg;
reg   [7:0] out_14_preg;
reg   [7:0] out_15_preg;
reg   [1:0] ap_NS_fsm;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 2'd1;
#0 out_0_preg = 8'd0;
#0 out_1_preg = 8'd0;
#0 out_2_preg = 8'd0;
#0 out_3_preg = 8'd0;
#0 out_4_preg = 8'd0;
#0 out_5_preg = 8'd0;
#0 out_6_preg = 8'd0;
#0 out_7_preg = 8'd0;
#0 out_8_preg = 8'd0;
#0 out_9_preg = 8'd0;
#0 out_10_preg = 8'd0;
#0 out_11_preg = 8'd0;
#0 out_12_preg = 8'd0;
#0 out_13_preg = 8'd0;
#0 out_14_preg = 8'd0;
#0 out_15_preg = 8'd0;
end

AES_ECB_encrypt_SubBytes58_sbox113 #(
    .DataWidth( 8 ),
    .AddressRange( 256 ),
    .AddressWidth( 8 ))
sbox106_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(sbox106_address0),
    .ce0(sbox106_ce0),
    .q0(sbox106_q0),
    .address1(sbox106_address1),
    .ce1(sbox106_ce1),
    .q1(sbox106_q1),
    .address2(sbox106_address2),
    .ce2(sbox106_ce2),
    .q2(sbox106_q2),
    .address3(sbox106_address3),
    .ce3(sbox106_ce3),
    .q3(sbox106_q3),
    .address4(sbox106_address4),
    .ce4(sbox106_ce4),
    .q4(sbox106_q4),
    .address5(sbox106_address5),
    .ce5(sbox106_ce5),
    .q5(sbox106_q5),
    .address6(sbox106_address6),
    .ce6(sbox106_ce6),
    .q6(sbox106_q6),
    .address7(sbox106_address7),
    .ce7(sbox106_ce7),
    .q7(sbox106_q7),
    .address8(sbox106_address8),
    .ce8(sbox106_ce8),
    .q8(sbox106_q8),
    .address9(sbox106_address9),
    .ce9(sbox106_ce9),
    .q9(sbox106_q9),
    .address10(sbox106_address10),
    .ce10(sbox106_ce10),
    .q10(sbox106_q10),
    .address11(sbox106_address11),
    .ce11(sbox106_ce11),
    .q11(sbox106_q11),
    .address12(sbox106_address12),
    .ce12(sbox106_ce12),
    .q12(sbox106_q12),
    .address13(sbox106_address13),
    .ce13(sbox106_ce13),
    .q13(sbox106_q13),
    .address14(sbox106_address14),
    .ce14(sbox106_ce14),
    .q14(sbox106_q14),
    .address15(sbox106_address15),
    .ce15(sbox106_ce15),
    .q15(sbox106_q15)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state2)) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        out_0_preg <= 8'd0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state2)) begin
            out_0_preg <= sbox106_q15;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        out_10_preg <= 8'd0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state2)) begin
            out_10_preg <= sbox106_q5;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        out_11_preg <= 8'd0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state2)) begin
            out_11_preg <= sbox106_q4;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        out_12_preg <= 8'd0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state2)) begin
            out_12_preg <= sbox106_q3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        out_13_preg <= 8'd0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state2)) begin
            out_13_preg <= sbox106_q2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        out_14_preg <= 8'd0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state2)) begin
            out_14_preg <= sbox106_q1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        out_15_preg <= 8'd0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state2)) begin
            out_15_preg <= sbox106_q0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        out_1_preg <= 8'd0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state2)) begin
            out_1_preg <= sbox106_q14;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        out_2_preg <= 8'd0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state2)) begin
            out_2_preg <= sbox106_q13;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        out_3_preg <= 8'd0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state2)) begin
            out_3_preg <= sbox106_q12;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        out_4_preg <= 8'd0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state2)) begin
            out_4_preg <= sbox106_q11;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        out_5_preg <= 8'd0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state2)) begin
            out_5_preg <= sbox106_q10;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        out_6_preg <= 8'd0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state2)) begin
            out_6_preg <= sbox106_q9;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        out_7_preg <= 8'd0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state2)) begin
            out_7_preg <= sbox106_q8;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        out_8_preg <= 8'd0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state2)) begin
            out_8_preg <= sbox106_q7;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        out_9_preg <= 8'd0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state2)) begin
            out_9_preg <= sbox106_q6;
        end
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        out_0 = sbox106_q15;
    end else begin
        out_0 = out_0_preg;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        out_0_ap_vld = 1'b1;
    end else begin
        out_0_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        out_1 = sbox106_q14;
    end else begin
        out_1 = out_1_preg;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        out_10 = sbox106_q5;
    end else begin
        out_10 = out_10_preg;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        out_10_ap_vld = 1'b1;
    end else begin
        out_10_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        out_11 = sbox106_q4;
    end else begin
        out_11 = out_11_preg;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        out_11_ap_vld = 1'b1;
    end else begin
        out_11_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        out_12 = sbox106_q3;
    end else begin
        out_12 = out_12_preg;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        out_12_ap_vld = 1'b1;
    end else begin
        out_12_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        out_13 = sbox106_q2;
    end else begin
        out_13 = out_13_preg;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        out_13_ap_vld = 1'b1;
    end else begin
        out_13_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        out_14 = sbox106_q1;
    end else begin
        out_14 = out_14_preg;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        out_14_ap_vld = 1'b1;
    end else begin
        out_14_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        out_15 = sbox106_q0;
    end else begin
        out_15 = out_15_preg;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        out_15_ap_vld = 1'b1;
    end else begin
        out_15_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        out_1_ap_vld = 1'b1;
    end else begin
        out_1_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        out_2 = sbox106_q13;
    end else begin
        out_2 = out_2_preg;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        out_2_ap_vld = 1'b1;
    end else begin
        out_2_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        out_3 = sbox106_q12;
    end else begin
        out_3 = out_3_preg;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        out_3_ap_vld = 1'b1;
    end else begin
        out_3_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        out_4 = sbox106_q11;
    end else begin
        out_4 = out_4_preg;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        out_4_ap_vld = 1'b1;
    end else begin
        out_4_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        out_5 = sbox106_q10;
    end else begin
        out_5 = out_5_preg;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        out_5_ap_vld = 1'b1;
    end else begin
        out_5_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        out_6 = sbox106_q9;
    end else begin
        out_6 = out_6_preg;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        out_6_ap_vld = 1'b1;
    end else begin
        out_6_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        out_7 = sbox106_q8;
    end else begin
        out_7 = out_7_preg;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        out_7_ap_vld = 1'b1;
    end else begin
        out_7_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        out_8 = sbox106_q7;
    end else begin
        out_8 = out_8_preg;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        out_8_ap_vld = 1'b1;
    end else begin
        out_8_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        out_9 = sbox106_q6;
    end else begin
        out_9 = out_9_preg;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        out_9_ap_vld = 1'b1;
    end else begin
        out_9_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        sbox106_ce0 = 1'b1;
    end else begin
        sbox106_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        sbox106_ce1 = 1'b1;
    end else begin
        sbox106_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        sbox106_ce10 = 1'b1;
    end else begin
        sbox106_ce10 = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        sbox106_ce11 = 1'b1;
    end else begin
        sbox106_ce11 = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        sbox106_ce12 = 1'b1;
    end else begin
        sbox106_ce12 = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        sbox106_ce13 = 1'b1;
    end else begin
        sbox106_ce13 = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        sbox106_ce14 = 1'b1;
    end else begin
        sbox106_ce14 = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        sbox106_ce15 = 1'b1;
    end else begin
        sbox106_ce15 = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        sbox106_ce2 = 1'b1;
    end else begin
        sbox106_ce2 = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        sbox106_ce3 = 1'b1;
    end else begin
        sbox106_ce3 = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        sbox106_ce4 = 1'b1;
    end else begin
        sbox106_ce4 = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        sbox106_ce5 = 1'b1;
    end else begin
        sbox106_ce5 = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        sbox106_ce6 = 1'b1;
    end else begin
        sbox106_ce6 = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        sbox106_ce7 = 1'b1;
    end else begin
        sbox106_ce7 = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        sbox106_ce8 = 1'b1;
    end else begin
        sbox106_ce8 = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        sbox106_ce9 = 1'b1;
    end else begin
        sbox106_ce9 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

always @ (*) begin
    ap_block_state1 = ((ap_start == 1'b0) | (ap_done_reg == 1'b1));
end

assign sbox106_address0 = zext_ln10_15_fu_564_p1;

assign sbox106_address1 = zext_ln10_14_fu_559_p1;

assign sbox106_address10 = zext_ln10_5_fu_514_p1;

assign sbox106_address11 = zext_ln10_4_fu_509_p1;

assign sbox106_address12 = zext_ln10_3_fu_504_p1;

assign sbox106_address13 = zext_ln10_2_fu_499_p1;

assign sbox106_address14 = zext_ln10_1_fu_494_p1;

assign sbox106_address15 = zext_ln10_fu_489_p1;

assign sbox106_address2 = zext_ln10_13_fu_554_p1;

assign sbox106_address3 = zext_ln10_12_fu_549_p1;

assign sbox106_address4 = zext_ln10_11_fu_544_p1;

assign sbox106_address5 = zext_ln10_10_fu_539_p1;

assign sbox106_address6 = zext_ln10_9_fu_534_p1;

assign sbox106_address7 = zext_ln10_8_fu_529_p1;

assign sbox106_address8 = zext_ln10_7_fu_524_p1;

assign sbox106_address9 = zext_ln10_6_fu_519_p1;

assign zext_ln10_10_fu_539_p1 = p_read10;

assign zext_ln10_11_fu_544_p1 = p_read11;

assign zext_ln10_12_fu_549_p1 = p_read12;

assign zext_ln10_13_fu_554_p1 = p_read13;

assign zext_ln10_14_fu_559_p1 = p_read14;

assign zext_ln10_15_fu_564_p1 = p_read15;

assign zext_ln10_1_fu_494_p1 = p_read1;

assign zext_ln10_2_fu_499_p1 = p_read2;

assign zext_ln10_3_fu_504_p1 = p_read3;

assign zext_ln10_4_fu_509_p1 = p_read4;

assign zext_ln10_5_fu_514_p1 = p_read5;

assign zext_ln10_6_fu_519_p1 = p_read6;

assign zext_ln10_7_fu_524_p1 = p_read7;

assign zext_ln10_8_fu_529_p1 = p_read8;

assign zext_ln10_9_fu_534_p1 = p_read9;

assign zext_ln10_fu_489_p1 = p_read;

endmodule //AES_ECB_encrypt_SubBytes86
