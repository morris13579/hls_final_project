-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2018.3
-- Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity MixColumns56 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    in_V_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    in_V_ce0 : OUT STD_LOGIC;
    in_V_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    in_V_address1 : OUT STD_LOGIC_VECTOR (3 downto 0);
    in_V_ce1 : OUT STD_LOGIC;
    in_V_q1 : IN STD_LOGIC_VECTOR (7 downto 0);
    out_V_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    out_V_ce0 : OUT STD_LOGIC;
    out_V_we0 : OUT STD_LOGIC;
    out_V_d0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    out_V_address1 : OUT STD_LOGIC_VECTOR (3 downto 0);
    out_V_ce1 : OUT STD_LOGIC;
    out_V_we1 : OUT STD_LOGIC;
    out_V_d1 : OUT STD_LOGIC_VECTOR (7 downto 0) );
end;


architecture behav of MixColumns56 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (4 downto 0) := "00010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (4 downto 0) := "00100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (4 downto 0) := "01000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (4 downto 0) := "10000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv5_4 : STD_LOGIC_VECTOR (4 downto 0) := "00100";
    constant ap_const_lv4_2 : STD_LOGIC_VECTOR (3 downto 0) := "0010";
    constant ap_const_lv4_3 : STD_LOGIC_VECTOR (3 downto 0) := "0011";
    constant ap_const_lv8_1 : STD_LOGIC_VECTOR (7 downto 0) := "00000001";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv8_1B : STD_LOGIC_VECTOR (7 downto 0) := "00011011";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_CS_fsm : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal tmp_4_fu_135_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_4_reg_370 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal tmp_fu_127_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_49_fu_140_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_49_reg_380 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_7_fu_150_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_7_reg_386 : STD_LOGIC_VECTOR (63 downto 0);
    signal i_V_fu_155_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal i_V_reg_396 : STD_LOGIC_VECTOR (4 downto 0);
    signal t_V_reg_401 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal rhs_V_reg_408 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_9_fu_166_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_9_reg_415 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_s_fu_176_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_s_reg_425 : STD_LOGIC_VECTOR (63 downto 0);
    signal ret_V_13_fu_322_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal ret_V_13_reg_435 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal ret_V_16_fu_361_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal ret_V_16_reg_440 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_s_reg_116 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_block_state1 : BOOLEAN;
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal ret_V_7_fu_230_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal ret_V_10_fu_275_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal ret_V_fu_144_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal ret_V_2_fu_161_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal ret_V_4_fu_171_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal ret_V_17_fu_181_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal ret_V_18_fu_185_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_51_fu_203_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_i_cast_cast_cast_fu_211_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal r_V_fu_197_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal ret_V_51_fu_191_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp2_fu_224_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp1_fu_219_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal ret_V_52_fu_237_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_53_fu_248_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_i23_cast_cast_cast_fu_256_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal r_V_16_fu_242_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp4_fu_269_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp3_fu_264_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal ret_V_53_fu_282_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_55_fu_294_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_i28_cast_cast_cast_fu_302_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal r_V_17_fu_288_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp6_fu_316_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp5_fu_310_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal ret_V_54_fu_328_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_57_fu_339_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal r_V_18_fu_333_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp7_fu_355_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_i33_cast_cast_cast_fu_347_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (4 downto 0);


begin




    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((tmp_fu_127_p3 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    p_s_reg_116_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
                p_s_reg_116 <= i_V_reg_396;
            elsif ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                p_s_reg_116 <= ap_const_lv5_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_fu_127_p3 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                i_V_reg_396 <= i_V_fu_155_p2;
                tmp_49_reg_380 <= tmp_49_fu_140_p1;
                    tmp_4_reg_370(4 downto 0) <= tmp_4_fu_135_p1(4 downto 0);
                    tmp_7_reg_386(3 downto 1) <= tmp_7_fu_150_p1(3 downto 1);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then
                ret_V_13_reg_435 <= ret_V_13_fu_322_p2;
                ret_V_16_reg_440 <= ret_V_16_fu_361_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                rhs_V_reg_408 <= in_V_q1;
                t_V_reg_401 <= in_V_q0;
                    tmp_9_reg_415(0) <= tmp_9_fu_166_p1(0);    tmp_9_reg_415(3 downto 2) <= tmp_9_fu_166_p1(3 downto 2);
                    tmp_s_reg_425(3 downto 2) <= tmp_s_fu_176_p1(3 downto 2);
            end if;
        end if;
    end process;
    tmp_4_reg_370(63 downto 5) <= "00000000000000000000000000000000000000000000000000000000000";
    tmp_7_reg_386(0) <= '1';
    tmp_7_reg_386(63 downto 4) <= "000000000000000000000000000000000000000000000000000000000000";
    tmp_9_reg_415(1) <= '1';
    tmp_9_reg_415(63 downto 4) <= "000000000000000000000000000000000000000000000000000000000000";
    tmp_s_reg_425(1 downto 0) <= "11";
    tmp_s_reg_425(63 downto 4) <= "000000000000000000000000000000000000000000000000000000000000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_done_reg, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state2, tmp_fu_127_p3)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((tmp_fu_127_p3 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state2;
            when others =>  
                ap_NS_fsm <= "XXXXX";
        end case;
    end process;
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);

    ap_block_state1_assign_proc : process(ap_start, ap_done_reg)
    begin
                ap_block_state1 <= ((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1));
    end process;


    ap_done_assign_proc : process(ap_done_reg, ap_CS_fsm_state2, tmp_fu_127_p3)
    begin
        if (((tmp_fu_127_p3 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_done_reg;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state2, tmp_fu_127_p3)
    begin
        if (((tmp_fu_127_p3 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    i_V_fu_155_p2 <= std_logic_vector(unsigned(ap_const_lv5_4) + unsigned(p_s_reg_116));

    in_V_address0_assign_proc : process(tmp_4_fu_135_p1, ap_CS_fsm_state2, ap_CS_fsm_state3, tmp_9_fu_166_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            in_V_address0 <= tmp_9_fu_166_p1(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            in_V_address0 <= tmp_4_fu_135_p1(4 - 1 downto 0);
        else 
            in_V_address0 <= "XXXX";
        end if; 
    end process;


    in_V_address1_assign_proc : process(ap_CS_fsm_state2, tmp_7_fu_150_p1, ap_CS_fsm_state3, tmp_s_fu_176_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            in_V_address1 <= tmp_s_fu_176_p1(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            in_V_address1 <= tmp_7_fu_150_p1(4 - 1 downto 0);
        else 
            in_V_address1 <= "XXXX";
        end if; 
    end process;


    in_V_ce0_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state3)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            in_V_ce0 <= ap_const_logic_1;
        else 
            in_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    in_V_ce1_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state3)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            in_V_ce1 <= ap_const_logic_1;
        else 
            in_V_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    out_V_address0_assign_proc : process(tmp_4_reg_370, tmp_9_reg_415, ap_CS_fsm_state4, ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            out_V_address0 <= tmp_9_reg_415(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            out_V_address0 <= tmp_4_reg_370(4 - 1 downto 0);
        else 
            out_V_address0 <= "XXXX";
        end if; 
    end process;


    out_V_address1_assign_proc : process(tmp_7_reg_386, tmp_s_reg_425, ap_CS_fsm_state4, ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            out_V_address1 <= tmp_s_reg_425(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            out_V_address1 <= tmp_7_reg_386(4 - 1 downto 0);
        else 
            out_V_address1 <= "XXXX";
        end if; 
    end process;


    out_V_ce0_assign_proc : process(ap_CS_fsm_state4, ap_CS_fsm_state5)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state5))) then 
            out_V_ce0 <= ap_const_logic_1;
        else 
            out_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    out_V_ce1_assign_proc : process(ap_CS_fsm_state4, ap_CS_fsm_state5)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state5))) then 
            out_V_ce1 <= ap_const_logic_1;
        else 
            out_V_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    out_V_d0_assign_proc : process(ret_V_13_reg_435, ap_CS_fsm_state4, ap_CS_fsm_state5, ret_V_7_fu_230_p2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            out_V_d0 <= ret_V_13_reg_435;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            out_V_d0 <= ret_V_7_fu_230_p2;
        else 
            out_V_d0 <= "XXXXXXXX";
        end if; 
    end process;


    out_V_d1_assign_proc : process(ap_CS_fsm_state4, ret_V_16_reg_440, ap_CS_fsm_state5, ret_V_10_fu_275_p2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            out_V_d1 <= ret_V_16_reg_440;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            out_V_d1 <= ret_V_10_fu_275_p2;
        else 
            out_V_d1 <= "XXXXXXXX";
        end if; 
    end process;


    out_V_we0_assign_proc : process(ap_CS_fsm_state4, ap_CS_fsm_state5)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state5))) then 
            out_V_we0 <= ap_const_logic_1;
        else 
            out_V_we0 <= ap_const_logic_0;
        end if; 
    end process;


    out_V_we1_assign_proc : process(ap_CS_fsm_state4, ap_CS_fsm_state5)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state5))) then 
            out_V_we1 <= ap_const_logic_1;
        else 
            out_V_we1 <= ap_const_logic_0;
        end if; 
    end process;

    p_i23_cast_cast_cast_fu_256_p3 <= 
        ap_const_lv8_1B when (tmp_53_fu_248_p3(0) = '1') else 
        ap_const_lv8_0;
    p_i28_cast_cast_cast_fu_302_p3 <= 
        ap_const_lv8_1B when (tmp_55_fu_294_p3(0) = '1') else 
        ap_const_lv8_0;
    p_i33_cast_cast_cast_fu_347_p3 <= 
        ap_const_lv8_1B when (tmp_57_fu_339_p3(0) = '1') else 
        ap_const_lv8_0;
    p_i_cast_cast_cast_fu_211_p3 <= 
        ap_const_lv8_1B when (tmp_51_fu_203_p3(0) = '1') else 
        ap_const_lv8_0;
    r_V_16_fu_242_p2 <= std_logic_vector(shift_left(unsigned(ret_V_52_fu_237_p2),to_integer(unsigned('0' & ap_const_lv8_1(8-1 downto 0)))));
    r_V_17_fu_288_p2 <= std_logic_vector(shift_left(unsigned(ret_V_53_fu_282_p2),to_integer(unsigned('0' & ap_const_lv8_1(8-1 downto 0)))));
    r_V_18_fu_333_p2 <= std_logic_vector(shift_left(unsigned(ret_V_54_fu_328_p2),to_integer(unsigned('0' & ap_const_lv8_1(8-1 downto 0)))));
    r_V_fu_197_p2 <= std_logic_vector(shift_left(unsigned(ret_V_17_fu_181_p2),to_integer(unsigned('0' & ap_const_lv8_1(8-1 downto 0)))));
    ret_V_10_fu_275_p2 <= (tmp4_fu_269_p2 xor tmp3_fu_264_p2);
    ret_V_13_fu_322_p2 <= (tmp6_fu_316_p2 xor tmp5_fu_310_p2);
    ret_V_16_fu_361_p2 <= (tmp7_fu_355_p2 xor p_i33_cast_cast_cast_fu_347_p3);
    ret_V_17_fu_181_p2 <= (t_V_reg_401 xor rhs_V_reg_408);
    ret_V_18_fu_185_p2 <= (ret_V_17_fu_181_p2 xor in_V_q0);
    ret_V_2_fu_161_p2 <= (tmp_49_reg_380 or ap_const_lv4_2);
    ret_V_4_fu_171_p2 <= (tmp_49_reg_380 or ap_const_lv4_3);
    ret_V_51_fu_191_p2 <= (ret_V_18_fu_185_p2 xor in_V_q1);
    ret_V_52_fu_237_p2 <= (rhs_V_reg_408 xor in_V_q0);
    ret_V_53_fu_282_p2 <= (in_V_q1 xor in_V_q0);
    ret_V_54_fu_328_p2 <= (t_V_reg_401 xor in_V_q1);
    ret_V_7_fu_230_p2 <= (tmp2_fu_224_p2 xor tmp1_fu_219_p2);
    ret_V_fu_144_p2 <= (tmp_49_fu_140_p1 or ap_const_lv4_1);
    tmp1_fu_219_p2 <= (t_V_reg_401 xor p_i_cast_cast_cast_fu_211_p3);
    tmp2_fu_224_p2 <= (ret_V_51_fu_191_p2 xor r_V_fu_197_p2);
    tmp3_fu_264_p2 <= (rhs_V_reg_408 xor p_i23_cast_cast_cast_fu_256_p3);
    tmp4_fu_269_p2 <= (ret_V_51_fu_191_p2 xor r_V_16_fu_242_p2);
    tmp5_fu_310_p2 <= (p_i28_cast_cast_cast_fu_302_p3 xor in_V_q0);
    tmp6_fu_316_p2 <= (ret_V_51_fu_191_p2 xor r_V_17_fu_288_p2);
    tmp7_fu_355_p2 <= (ret_V_18_fu_185_p2 xor r_V_18_fu_333_p2);
    tmp_49_fu_140_p1 <= p_s_reg_116(4 - 1 downto 0);
    tmp_4_fu_135_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_s_reg_116),64));
    tmp_51_fu_203_p3 <= ret_V_17_fu_181_p2(7 downto 7);
    tmp_53_fu_248_p3 <= ret_V_52_fu_237_p2(7 downto 7);
    tmp_55_fu_294_p3 <= ret_V_53_fu_282_p2(7 downto 7);
    tmp_57_fu_339_p3 <= ret_V_54_fu_328_p2(7 downto 7);
    tmp_7_fu_150_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ret_V_fu_144_p2),64));
    tmp_9_fu_166_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ret_V_2_fu_161_p2),64));
    tmp_fu_127_p3 <= p_s_reg_116(4 downto 4);
    tmp_s_fu_176_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ret_V_4_fu_171_p2),64));
end behav;
