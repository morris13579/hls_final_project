-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2018.3
-- Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity AES_ECB_encrypt is
generic (
    C_S_AXI_AXILITES_ADDR_WIDTH : INTEGER := 8;
    C_S_AXI_AXILITES_DATA_WIDTH : INTEGER := 32 );
port (
    ap_clk : IN STD_LOGIC;
    ap_rst_n : IN STD_LOGIC;
    plain_V_V_TDATA : IN STD_LOGIC_VECTOR (7 downto 0);
    plain_V_V_TVALID : IN STD_LOGIC;
    plain_V_V_TREADY : OUT STD_LOGIC;
    encrypt_V_V_TDATA : OUT STD_LOGIC_VECTOR (7 downto 0);
    encrypt_V_V_TVALID : OUT STD_LOGIC;
    encrypt_V_V_TREADY : IN STD_LOGIC;
    s_axi_AXILiteS_AWVALID : IN STD_LOGIC;
    s_axi_AXILiteS_AWREADY : OUT STD_LOGIC;
    s_axi_AXILiteS_AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_AXILITES_ADDR_WIDTH-1 downto 0);
    s_axi_AXILiteS_WVALID : IN STD_LOGIC;
    s_axi_AXILiteS_WREADY : OUT STD_LOGIC;
    s_axi_AXILiteS_WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_AXILITES_DATA_WIDTH-1 downto 0);
    s_axi_AXILiteS_WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_AXILITES_DATA_WIDTH/8-1 downto 0);
    s_axi_AXILiteS_ARVALID : IN STD_LOGIC;
    s_axi_AXILiteS_ARREADY : OUT STD_LOGIC;
    s_axi_AXILiteS_ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_AXILITES_ADDR_WIDTH-1 downto 0);
    s_axi_AXILiteS_RVALID : OUT STD_LOGIC;
    s_axi_AXILiteS_RREADY : IN STD_LOGIC;
    s_axi_AXILiteS_RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_AXILITES_DATA_WIDTH-1 downto 0);
    s_axi_AXILiteS_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    s_axi_AXILiteS_BVALID : OUT STD_LOGIC;
    s_axi_AXILiteS_BREADY : IN STD_LOGIC;
    s_axi_AXILiteS_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    interrupt : OUT STD_LOGIC );
end;


architecture behav of AES_ECB_encrypt is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "AES_ECB_encrypt,hls_ip_2018_3,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=1,HLS_INPUT_PART=xc7z020clg484-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=7.812000,HLS_SYN_LAT=-1,HLS_SYN_TPT=none,HLS_SYN_MEM=51,HLS_SYN_DSP=0,HLS_SYN_FF=2635,HLS_SYN_LUT=8615,HLS_VERSION=2018_3}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (6 downto 0) := "0000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (6 downto 0) := "0000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (6 downto 0) := "0001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (6 downto 0) := "0010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (6 downto 0) := "0100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (6 downto 0) := "1000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv2_2 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_lv2_3 : STD_LOGIC_VECTOR (1 downto 0) := "11";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant C_S_AXI_DATA_WIDTH : INTEGER range 63 downto 0 := 20;
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv5_10 : STD_LOGIC_VECTOR (4 downto 0) := "10000";
    constant ap_const_lv5_1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_rst_n_inv : STD_LOGIC;
    signal ap_start : STD_LOGIC;
    signal ap_done : STD_LOGIC;
    signal ap_idle : STD_LOGIC;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal ap_ready : STD_LOGIC;
    signal plain_V_V_0_data_out : STD_LOGIC_VECTOR (7 downto 0);
    signal plain_V_V_0_vld_in : STD_LOGIC;
    signal plain_V_V_0_vld_out : STD_LOGIC;
    signal plain_V_V_0_ack_in : STD_LOGIC;
    signal plain_V_V_0_ack_out : STD_LOGIC;
    signal plain_V_V_0_payload_A : STD_LOGIC_VECTOR (7 downto 0);
    signal plain_V_V_0_payload_B : STD_LOGIC_VECTOR (7 downto 0);
    signal plain_V_V_0_sel_rd : STD_LOGIC := '0';
    signal plain_V_V_0_sel_wr : STD_LOGIC := '0';
    signal plain_V_V_0_sel : STD_LOGIC;
    signal plain_V_V_0_load_A : STD_LOGIC;
    signal plain_V_V_0_load_B : STD_LOGIC;
    signal plain_V_V_0_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal plain_V_V_0_state_cmp_full : STD_LOGIC;
    signal encrypt_V_V_1_data_out : STD_LOGIC_VECTOR (7 downto 0);
    signal encrypt_V_V_1_vld_in : STD_LOGIC;
    signal encrypt_V_V_1_vld_out : STD_LOGIC;
    signal encrypt_V_V_1_ack_in : STD_LOGIC;
    signal encrypt_V_V_1_ack_out : STD_LOGIC;
    signal encrypt_V_V_1_payload_A : STD_LOGIC_VECTOR (7 downto 0);
    signal encrypt_V_V_1_payload_B : STD_LOGIC_VECTOR (7 downto 0);
    signal encrypt_V_V_1_sel_rd : STD_LOGIC := '0';
    signal encrypt_V_V_1_sel_wr : STD_LOGIC := '0';
    signal encrypt_V_V_1_sel : STD_LOGIC;
    signal encrypt_V_V_1_load_A : STD_LOGIC;
    signal encrypt_V_V_1_load_B : STD_LOGIC;
    signal encrypt_V_V_1_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal encrypt_V_V_1_state_cmp_full : STD_LOGIC;
    signal key_0_V_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal key_1_V_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal key_2_V_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal key_3_V_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal key_4_V_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal key_5_V_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal key_6_V_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal key_7_V_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal key_8_V_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal key_9_V_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal key_10_V_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal len : STD_LOGIC_VECTOR (31 downto 0);
    signal plain_V_V_TDATA_blk_n : STD_LOGIC;
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal exitcond1_fu_240_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal encrypt_V_V_TDATA_blk_n : STD_LOGIC;
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal len_read_reg_280 : STD_LOGIC_VECTOR (31 downto 0);
    signal j_1_fu_246_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_block_state3 : BOOLEAN;
    signal j_2_fu_263_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal j_2_reg_299 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal exitcond_fu_257_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_1_fu_274_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal out_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal in_V_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal in_V_ce0 : STD_LOGIC;
    signal in_V_we0 : STD_LOGIC;
    signal in_V_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal out_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal out_ce0 : STD_LOGIC;
    signal out_we0 : STD_LOGIC;
    signal grp_Cipher_fu_187_plain_V_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_Cipher_fu_187_plain_V_ce0 : STD_LOGIC;
    signal grp_Cipher_fu_187_plain_V_d0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_Cipher_fu_187_plain_V_we0 : STD_LOGIC;
    signal grp_Cipher_fu_187_plain_V_address1 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_Cipher_fu_187_plain_V_ce1 : STD_LOGIC;
    signal grp_Cipher_fu_187_plain_V_d1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_Cipher_fu_187_plain_V_we1 : STD_LOGIC;
    signal grp_Cipher_fu_187_encrypt_V_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_Cipher_fu_187_encrypt_V_ce0 : STD_LOGIC;
    signal grp_Cipher_fu_187_encrypt_V_d0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_Cipher_fu_187_encrypt_V_we0 : STD_LOGIC;
    signal grp_Cipher_fu_187_encrypt_V_address1 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_Cipher_fu_187_encrypt_V_ce1 : STD_LOGIC;
    signal grp_Cipher_fu_187_encrypt_V_d1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_Cipher_fu_187_encrypt_V_we1 : STD_LOGIC;
    signal grp_Cipher_fu_187_key_0_V_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_Cipher_fu_187_key_0_V_ce0 : STD_LOGIC;
    signal grp_Cipher_fu_187_key_0_V_d0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_Cipher_fu_187_key_0_V_we0 : STD_LOGIC;
    signal grp_Cipher_fu_187_key_1_V_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_Cipher_fu_187_key_1_V_ce0 : STD_LOGIC;
    signal grp_Cipher_fu_187_key_1_V_d0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_Cipher_fu_187_key_1_V_we0 : STD_LOGIC;
    signal grp_Cipher_fu_187_key_2_V_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_Cipher_fu_187_key_2_V_ce0 : STD_LOGIC;
    signal grp_Cipher_fu_187_key_2_V_d0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_Cipher_fu_187_key_2_V_we0 : STD_LOGIC;
    signal grp_Cipher_fu_187_key_3_V_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_Cipher_fu_187_key_3_V_ce0 : STD_LOGIC;
    signal grp_Cipher_fu_187_key_3_V_d0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_Cipher_fu_187_key_3_V_we0 : STD_LOGIC;
    signal grp_Cipher_fu_187_key_4_V_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_Cipher_fu_187_key_4_V_ce0 : STD_LOGIC;
    signal grp_Cipher_fu_187_key_4_V_d0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_Cipher_fu_187_key_4_V_we0 : STD_LOGIC;
    signal grp_Cipher_fu_187_key_5_V_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_Cipher_fu_187_key_5_V_ce0 : STD_LOGIC;
    signal grp_Cipher_fu_187_key_5_V_d0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_Cipher_fu_187_key_5_V_we0 : STD_LOGIC;
    signal grp_Cipher_fu_187_key_6_V_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_Cipher_fu_187_key_6_V_ce0 : STD_LOGIC;
    signal grp_Cipher_fu_187_key_6_V_d0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_Cipher_fu_187_key_6_V_we0 : STD_LOGIC;
    signal grp_Cipher_fu_187_key_7_V_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_Cipher_fu_187_key_7_V_ce0 : STD_LOGIC;
    signal grp_Cipher_fu_187_key_7_V_d0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_Cipher_fu_187_key_7_V_we0 : STD_LOGIC;
    signal grp_Cipher_fu_187_key_8_V_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_Cipher_fu_187_key_8_V_ce0 : STD_LOGIC;
    signal grp_Cipher_fu_187_key_8_V_d0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_Cipher_fu_187_key_8_V_we0 : STD_LOGIC;
    signal grp_Cipher_fu_187_key_9_V_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_Cipher_fu_187_key_9_V_ce0 : STD_LOGIC;
    signal grp_Cipher_fu_187_key_9_V_d0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_Cipher_fu_187_key_9_V_we0 : STD_LOGIC;
    signal grp_Cipher_fu_187_key_10_V_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_Cipher_fu_187_key_10_V_ce0 : STD_LOGIC;
    signal grp_Cipher_fu_187_key_10_V_d0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_Cipher_fu_187_key_10_V_we0 : STD_LOGIC;
    signal grp_Cipher_fu_187_ap_start : STD_LOGIC;
    signal grp_Cipher_fu_187_ap_done : STD_LOGIC;
    signal grp_Cipher_fu_187_ap_ready : STD_LOGIC;
    signal grp_Cipher_fu_187_ap_idle : STD_LOGIC;
    signal grp_Cipher_fu_187_ap_continue : STD_LOGIC;
    signal i_reg_153 : STD_LOGIC_VECTOR (31 downto 0);
    signal j_reg_165 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal tmp_fu_235_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal j2_reg_176 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal ap_sync_grp_Cipher_fu_187_ap_ready : STD_LOGIC;
    signal ap_sync_grp_Cipher_fu_187_ap_done : STD_LOGIC;
    signal ap_block_state4_on_subcall_done : BOOLEAN;
    signal grp_Cipher_fu_187_ap_start_reg : STD_LOGIC := '0';
    signal ap_block_state3_ignore_call0 : BOOLEAN;
    signal ap_sync_reg_grp_Cipher_fu_187_ap_ready : STD_LOGIC := '0';
    signal ap_sync_reg_grp_Cipher_fu_187_ap_done : STD_LOGIC := '0';
    signal tmp_s_fu_252_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_3_fu_269_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (6 downto 0);

    component Cipher IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        plain_V_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
        plain_V_ce0 : OUT STD_LOGIC;
        plain_V_d0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        plain_V_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
        plain_V_we0 : OUT STD_LOGIC;
        plain_V_address1 : OUT STD_LOGIC_VECTOR (3 downto 0);
        plain_V_ce1 : OUT STD_LOGIC;
        plain_V_d1 : OUT STD_LOGIC_VECTOR (7 downto 0);
        plain_V_q1 : IN STD_LOGIC_VECTOR (7 downto 0);
        plain_V_we1 : OUT STD_LOGIC;
        encrypt_V_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
        encrypt_V_ce0 : OUT STD_LOGIC;
        encrypt_V_d0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        encrypt_V_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
        encrypt_V_we0 : OUT STD_LOGIC;
        encrypt_V_address1 : OUT STD_LOGIC_VECTOR (3 downto 0);
        encrypt_V_ce1 : OUT STD_LOGIC;
        encrypt_V_d1 : OUT STD_LOGIC_VECTOR (7 downto 0);
        encrypt_V_q1 : IN STD_LOGIC_VECTOR (7 downto 0);
        encrypt_V_we1 : OUT STD_LOGIC;
        key_0_V_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
        key_0_V_ce0 : OUT STD_LOGIC;
        key_0_V_d0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        key_0_V_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
        key_0_V_we0 : OUT STD_LOGIC;
        key_1_V_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
        key_1_V_ce0 : OUT STD_LOGIC;
        key_1_V_d0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        key_1_V_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
        key_1_V_we0 : OUT STD_LOGIC;
        key_2_V_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
        key_2_V_ce0 : OUT STD_LOGIC;
        key_2_V_d0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        key_2_V_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
        key_2_V_we0 : OUT STD_LOGIC;
        key_3_V_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
        key_3_V_ce0 : OUT STD_LOGIC;
        key_3_V_d0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        key_3_V_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
        key_3_V_we0 : OUT STD_LOGIC;
        key_4_V_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
        key_4_V_ce0 : OUT STD_LOGIC;
        key_4_V_d0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        key_4_V_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
        key_4_V_we0 : OUT STD_LOGIC;
        key_5_V_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
        key_5_V_ce0 : OUT STD_LOGIC;
        key_5_V_d0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        key_5_V_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
        key_5_V_we0 : OUT STD_LOGIC;
        key_6_V_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
        key_6_V_ce0 : OUT STD_LOGIC;
        key_6_V_d0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        key_6_V_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
        key_6_V_we0 : OUT STD_LOGIC;
        key_7_V_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
        key_7_V_ce0 : OUT STD_LOGIC;
        key_7_V_d0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        key_7_V_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
        key_7_V_we0 : OUT STD_LOGIC;
        key_8_V_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
        key_8_V_ce0 : OUT STD_LOGIC;
        key_8_V_d0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        key_8_V_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
        key_8_V_we0 : OUT STD_LOGIC;
        key_9_V_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
        key_9_V_ce0 : OUT STD_LOGIC;
        key_9_V_d0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        key_9_V_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
        key_9_V_we0 : OUT STD_LOGIC;
        key_10_V_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
        key_10_V_ce0 : OUT STD_LOGIC;
        key_10_V_d0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        key_10_V_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
        key_10_V_we0 : OUT STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC );
    end component;


    component AES_ECB_encrypt_ibkb IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (3 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (7 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (7 downto 0) );
    end component;


    component AES_ECB_encrypt_AXILiteS_s_axi IS
    generic (
        C_S_AXI_ADDR_WIDTH : INTEGER;
        C_S_AXI_DATA_WIDTH : INTEGER );
    port (
        AWVALID : IN STD_LOGIC;
        AWREADY : OUT STD_LOGIC;
        AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        WVALID : IN STD_LOGIC;
        WREADY : OUT STD_LOGIC;
        WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH/8-1 downto 0);
        ARVALID : IN STD_LOGIC;
        ARREADY : OUT STD_LOGIC;
        ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        RVALID : OUT STD_LOGIC;
        RREADY : IN STD_LOGIC;
        RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        BVALID : OUT STD_LOGIC;
        BREADY : IN STD_LOGIC;
        BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        ap_start : OUT STD_LOGIC;
        interrupt : OUT STD_LOGIC;
        ap_ready : IN STD_LOGIC;
        ap_done : IN STD_LOGIC;
        ap_idle : IN STD_LOGIC;
        key_0_V_address0 : IN STD_LOGIC_VECTOR (3 downto 0);
        key_0_V_ce0 : IN STD_LOGIC;
        key_0_V_q0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        key_1_V_address0 : IN STD_LOGIC_VECTOR (3 downto 0);
        key_1_V_ce0 : IN STD_LOGIC;
        key_1_V_q0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        key_2_V_address0 : IN STD_LOGIC_VECTOR (3 downto 0);
        key_2_V_ce0 : IN STD_LOGIC;
        key_2_V_q0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        key_3_V_address0 : IN STD_LOGIC_VECTOR (3 downto 0);
        key_3_V_ce0 : IN STD_LOGIC;
        key_3_V_q0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        key_4_V_address0 : IN STD_LOGIC_VECTOR (3 downto 0);
        key_4_V_ce0 : IN STD_LOGIC;
        key_4_V_q0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        key_5_V_address0 : IN STD_LOGIC_VECTOR (3 downto 0);
        key_5_V_ce0 : IN STD_LOGIC;
        key_5_V_q0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        key_6_V_address0 : IN STD_LOGIC_VECTOR (3 downto 0);
        key_6_V_ce0 : IN STD_LOGIC;
        key_6_V_q0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        key_7_V_address0 : IN STD_LOGIC_VECTOR (3 downto 0);
        key_7_V_ce0 : IN STD_LOGIC;
        key_7_V_q0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        key_8_V_address0 : IN STD_LOGIC_VECTOR (3 downto 0);
        key_8_V_ce0 : IN STD_LOGIC;
        key_8_V_q0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        key_9_V_address0 : IN STD_LOGIC_VECTOR (3 downto 0);
        key_9_V_ce0 : IN STD_LOGIC;
        key_9_V_q0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        key_10_V_address0 : IN STD_LOGIC_VECTOR (3 downto 0);
        key_10_V_ce0 : IN STD_LOGIC;
        key_10_V_q0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        len : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;



begin
    AES_ECB_encrypt_AXILiteS_s_axi_U : component AES_ECB_encrypt_AXILiteS_s_axi
    generic map (
        C_S_AXI_ADDR_WIDTH => C_S_AXI_AXILITES_ADDR_WIDTH,
        C_S_AXI_DATA_WIDTH => C_S_AXI_AXILITES_DATA_WIDTH)
    port map (
        AWVALID => s_axi_AXILiteS_AWVALID,
        AWREADY => s_axi_AXILiteS_AWREADY,
        AWADDR => s_axi_AXILiteS_AWADDR,
        WVALID => s_axi_AXILiteS_WVALID,
        WREADY => s_axi_AXILiteS_WREADY,
        WDATA => s_axi_AXILiteS_WDATA,
        WSTRB => s_axi_AXILiteS_WSTRB,
        ARVALID => s_axi_AXILiteS_ARVALID,
        ARREADY => s_axi_AXILiteS_ARREADY,
        ARADDR => s_axi_AXILiteS_ARADDR,
        RVALID => s_axi_AXILiteS_RVALID,
        RREADY => s_axi_AXILiteS_RREADY,
        RDATA => s_axi_AXILiteS_RDATA,
        RRESP => s_axi_AXILiteS_RRESP,
        BVALID => s_axi_AXILiteS_BVALID,
        BREADY => s_axi_AXILiteS_BREADY,
        BRESP => s_axi_AXILiteS_BRESP,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        ap_start => ap_start,
        interrupt => interrupt,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_idle => ap_idle,
        key_0_V_address0 => grp_Cipher_fu_187_key_0_V_address0,
        key_0_V_ce0 => grp_Cipher_fu_187_key_0_V_ce0,
        key_0_V_q0 => key_0_V_q0,
        key_1_V_address0 => grp_Cipher_fu_187_key_1_V_address0,
        key_1_V_ce0 => grp_Cipher_fu_187_key_1_V_ce0,
        key_1_V_q0 => key_1_V_q0,
        key_2_V_address0 => grp_Cipher_fu_187_key_2_V_address0,
        key_2_V_ce0 => grp_Cipher_fu_187_key_2_V_ce0,
        key_2_V_q0 => key_2_V_q0,
        key_3_V_address0 => grp_Cipher_fu_187_key_3_V_address0,
        key_3_V_ce0 => grp_Cipher_fu_187_key_3_V_ce0,
        key_3_V_q0 => key_3_V_q0,
        key_4_V_address0 => grp_Cipher_fu_187_key_4_V_address0,
        key_4_V_ce0 => grp_Cipher_fu_187_key_4_V_ce0,
        key_4_V_q0 => key_4_V_q0,
        key_5_V_address0 => grp_Cipher_fu_187_key_5_V_address0,
        key_5_V_ce0 => grp_Cipher_fu_187_key_5_V_ce0,
        key_5_V_q0 => key_5_V_q0,
        key_6_V_address0 => grp_Cipher_fu_187_key_6_V_address0,
        key_6_V_ce0 => grp_Cipher_fu_187_key_6_V_ce0,
        key_6_V_q0 => key_6_V_q0,
        key_7_V_address0 => grp_Cipher_fu_187_key_7_V_address0,
        key_7_V_ce0 => grp_Cipher_fu_187_key_7_V_ce0,
        key_7_V_q0 => key_7_V_q0,
        key_8_V_address0 => grp_Cipher_fu_187_key_8_V_address0,
        key_8_V_ce0 => grp_Cipher_fu_187_key_8_V_ce0,
        key_8_V_q0 => key_8_V_q0,
        key_9_V_address0 => grp_Cipher_fu_187_key_9_V_address0,
        key_9_V_ce0 => grp_Cipher_fu_187_key_9_V_ce0,
        key_9_V_q0 => key_9_V_q0,
        key_10_V_address0 => grp_Cipher_fu_187_key_10_V_address0,
        key_10_V_ce0 => grp_Cipher_fu_187_key_10_V_ce0,
        key_10_V_q0 => key_10_V_q0,
        len => len);

    in_V_U : component AES_ECB_encrypt_ibkb
    generic map (
        DataWidth => 8,
        AddressRange => 16,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => in_V_address0,
        ce0 => in_V_ce0,
        we0 => in_V_we0,
        d0 => plain_V_V_0_data_out,
        q0 => in_V_q0);

    out_U : component AES_ECB_encrypt_ibkb
    generic map (
        DataWidth => 8,
        AddressRange => 16,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => out_address0,
        ce0 => out_ce0,
        we0 => out_we0,
        d0 => grp_Cipher_fu_187_encrypt_V_d0,
        q0 => out_q0);

    grp_Cipher_fu_187 : component Cipher
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        plain_V_address0 => grp_Cipher_fu_187_plain_V_address0,
        plain_V_ce0 => grp_Cipher_fu_187_plain_V_ce0,
        plain_V_d0 => grp_Cipher_fu_187_plain_V_d0,
        plain_V_q0 => in_V_q0,
        plain_V_we0 => grp_Cipher_fu_187_plain_V_we0,
        plain_V_address1 => grp_Cipher_fu_187_plain_V_address1,
        plain_V_ce1 => grp_Cipher_fu_187_plain_V_ce1,
        plain_V_d1 => grp_Cipher_fu_187_plain_V_d1,
        plain_V_q1 => ap_const_lv8_0,
        plain_V_we1 => grp_Cipher_fu_187_plain_V_we1,
        encrypt_V_address0 => grp_Cipher_fu_187_encrypt_V_address0,
        encrypt_V_ce0 => grp_Cipher_fu_187_encrypt_V_ce0,
        encrypt_V_d0 => grp_Cipher_fu_187_encrypt_V_d0,
        encrypt_V_q0 => ap_const_lv8_0,
        encrypt_V_we0 => grp_Cipher_fu_187_encrypt_V_we0,
        encrypt_V_address1 => grp_Cipher_fu_187_encrypt_V_address1,
        encrypt_V_ce1 => grp_Cipher_fu_187_encrypt_V_ce1,
        encrypt_V_d1 => grp_Cipher_fu_187_encrypt_V_d1,
        encrypt_V_q1 => ap_const_lv8_0,
        encrypt_V_we1 => grp_Cipher_fu_187_encrypt_V_we1,
        key_0_V_address0 => grp_Cipher_fu_187_key_0_V_address0,
        key_0_V_ce0 => grp_Cipher_fu_187_key_0_V_ce0,
        key_0_V_d0 => grp_Cipher_fu_187_key_0_V_d0,
        key_0_V_q0 => key_0_V_q0,
        key_0_V_we0 => grp_Cipher_fu_187_key_0_V_we0,
        key_1_V_address0 => grp_Cipher_fu_187_key_1_V_address0,
        key_1_V_ce0 => grp_Cipher_fu_187_key_1_V_ce0,
        key_1_V_d0 => grp_Cipher_fu_187_key_1_V_d0,
        key_1_V_q0 => key_1_V_q0,
        key_1_V_we0 => grp_Cipher_fu_187_key_1_V_we0,
        key_2_V_address0 => grp_Cipher_fu_187_key_2_V_address0,
        key_2_V_ce0 => grp_Cipher_fu_187_key_2_V_ce0,
        key_2_V_d0 => grp_Cipher_fu_187_key_2_V_d0,
        key_2_V_q0 => key_2_V_q0,
        key_2_V_we0 => grp_Cipher_fu_187_key_2_V_we0,
        key_3_V_address0 => grp_Cipher_fu_187_key_3_V_address0,
        key_3_V_ce0 => grp_Cipher_fu_187_key_3_V_ce0,
        key_3_V_d0 => grp_Cipher_fu_187_key_3_V_d0,
        key_3_V_q0 => key_3_V_q0,
        key_3_V_we0 => grp_Cipher_fu_187_key_3_V_we0,
        key_4_V_address0 => grp_Cipher_fu_187_key_4_V_address0,
        key_4_V_ce0 => grp_Cipher_fu_187_key_4_V_ce0,
        key_4_V_d0 => grp_Cipher_fu_187_key_4_V_d0,
        key_4_V_q0 => key_4_V_q0,
        key_4_V_we0 => grp_Cipher_fu_187_key_4_V_we0,
        key_5_V_address0 => grp_Cipher_fu_187_key_5_V_address0,
        key_5_V_ce0 => grp_Cipher_fu_187_key_5_V_ce0,
        key_5_V_d0 => grp_Cipher_fu_187_key_5_V_d0,
        key_5_V_q0 => key_5_V_q0,
        key_5_V_we0 => grp_Cipher_fu_187_key_5_V_we0,
        key_6_V_address0 => grp_Cipher_fu_187_key_6_V_address0,
        key_6_V_ce0 => grp_Cipher_fu_187_key_6_V_ce0,
        key_6_V_d0 => grp_Cipher_fu_187_key_6_V_d0,
        key_6_V_q0 => key_6_V_q0,
        key_6_V_we0 => grp_Cipher_fu_187_key_6_V_we0,
        key_7_V_address0 => grp_Cipher_fu_187_key_7_V_address0,
        key_7_V_ce0 => grp_Cipher_fu_187_key_7_V_ce0,
        key_7_V_d0 => grp_Cipher_fu_187_key_7_V_d0,
        key_7_V_q0 => key_7_V_q0,
        key_7_V_we0 => grp_Cipher_fu_187_key_7_V_we0,
        key_8_V_address0 => grp_Cipher_fu_187_key_8_V_address0,
        key_8_V_ce0 => grp_Cipher_fu_187_key_8_V_ce0,
        key_8_V_d0 => grp_Cipher_fu_187_key_8_V_d0,
        key_8_V_q0 => key_8_V_q0,
        key_8_V_we0 => grp_Cipher_fu_187_key_8_V_we0,
        key_9_V_address0 => grp_Cipher_fu_187_key_9_V_address0,
        key_9_V_ce0 => grp_Cipher_fu_187_key_9_V_ce0,
        key_9_V_d0 => grp_Cipher_fu_187_key_9_V_d0,
        key_9_V_q0 => key_9_V_q0,
        key_9_V_we0 => grp_Cipher_fu_187_key_9_V_we0,
        key_10_V_address0 => grp_Cipher_fu_187_key_10_V_address0,
        key_10_V_ce0 => grp_Cipher_fu_187_key_10_V_ce0,
        key_10_V_d0 => grp_Cipher_fu_187_key_10_V_d0,
        key_10_V_q0 => key_10_V_q0,
        key_10_V_we0 => grp_Cipher_fu_187_key_10_V_we0,
        ap_start => grp_Cipher_fu_187_ap_start,
        ap_done => grp_Cipher_fu_187_ap_done,
        ap_ready => grp_Cipher_fu_187_ap_ready,
        ap_idle => grp_Cipher_fu_187_ap_idle,
        ap_continue => grp_Cipher_fu_187_ap_continue);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_sync_reg_grp_Cipher_fu_187_ap_done_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_sync_reg_grp_Cipher_fu_187_ap_done <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_state4_on_subcall_done) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
                    ap_sync_reg_grp_Cipher_fu_187_ap_done <= ap_const_logic_0;
                elsif ((grp_Cipher_fu_187_ap_done = ap_const_logic_1)) then 
                    ap_sync_reg_grp_Cipher_fu_187_ap_done <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_sync_reg_grp_Cipher_fu_187_ap_ready_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_sync_reg_grp_Cipher_fu_187_ap_ready <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_state4_on_subcall_done) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
                    ap_sync_reg_grp_Cipher_fu_187_ap_ready <= ap_const_logic_0;
                elsif ((grp_Cipher_fu_187_ap_ready = ap_const_logic_1)) then 
                    ap_sync_reg_grp_Cipher_fu_187_ap_ready <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    encrypt_V_V_1_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                encrypt_V_V_1_sel_rd <= ap_const_logic_0;
            else
                if (((encrypt_V_V_1_ack_out = ap_const_logic_1) and (encrypt_V_V_1_vld_out = ap_const_logic_1))) then 
                                        encrypt_V_V_1_sel_rd <= not(encrypt_V_V_1_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    encrypt_V_V_1_sel_wr_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                encrypt_V_V_1_sel_wr <= ap_const_logic_0;
            else
                if (((encrypt_V_V_1_ack_in = ap_const_logic_1) and (encrypt_V_V_1_vld_in = ap_const_logic_1))) then 
                                        encrypt_V_V_1_sel_wr <= not(encrypt_V_V_1_sel_wr);
                end if; 
            end if;
        end if;
    end process;


    encrypt_V_V_1_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                encrypt_V_V_1_state <= ap_const_lv2_0;
            else
                if ((((encrypt_V_V_1_state = ap_const_lv2_2) and (encrypt_V_V_1_vld_in = ap_const_logic_0)) or ((encrypt_V_V_1_state = ap_const_lv2_3) and (encrypt_V_V_1_vld_in = ap_const_logic_0) and (encrypt_V_V_1_ack_out = ap_const_logic_1)))) then 
                    encrypt_V_V_1_state <= ap_const_lv2_2;
                elsif ((((encrypt_V_V_1_state = ap_const_lv2_1) and (encrypt_V_V_1_ack_out = ap_const_logic_0)) or ((encrypt_V_V_1_state = ap_const_lv2_3) and (encrypt_V_V_1_ack_out = ap_const_logic_0) and (encrypt_V_V_1_vld_in = ap_const_logic_1)))) then 
                    encrypt_V_V_1_state <= ap_const_lv2_1;
                elsif (((not(((encrypt_V_V_1_vld_in = ap_const_logic_0) and (encrypt_V_V_1_ack_out = ap_const_logic_1))) and not(((encrypt_V_V_1_ack_out = ap_const_logic_0) and (encrypt_V_V_1_vld_in = ap_const_logic_1))) and (encrypt_V_V_1_state = ap_const_lv2_3)) or ((encrypt_V_V_1_state = ap_const_lv2_1) and (encrypt_V_V_1_ack_out = ap_const_logic_1)) or ((encrypt_V_V_1_state = ap_const_lv2_2) and (encrypt_V_V_1_vld_in = ap_const_logic_1)))) then 
                    encrypt_V_V_1_state <= ap_const_lv2_3;
                else 
                    encrypt_V_V_1_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    grp_Cipher_fu_187_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                grp_Cipher_fu_187_ap_start_reg <= ap_const_logic_0;
            else
                if ((((ap_sync_grp_Cipher_fu_187_ap_ready = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state4)) or (not(((exitcond1_fu_240_p2 = ap_const_lv1_0) and (plain_V_V_0_vld_out = ap_const_logic_0))) and (exitcond1_fu_240_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3)))) then 
                    grp_Cipher_fu_187_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_Cipher_fu_187_ap_ready = ap_const_logic_1)) then 
                    grp_Cipher_fu_187_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    plain_V_V_0_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                plain_V_V_0_sel_rd <= ap_const_logic_0;
            else
                if (((plain_V_V_0_ack_out = ap_const_logic_1) and (plain_V_V_0_vld_out = ap_const_logic_1))) then 
                                        plain_V_V_0_sel_rd <= not(plain_V_V_0_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    plain_V_V_0_sel_wr_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                plain_V_V_0_sel_wr <= ap_const_logic_0;
            else
                if (((plain_V_V_0_ack_in = ap_const_logic_1) and (plain_V_V_0_vld_in = ap_const_logic_1))) then 
                                        plain_V_V_0_sel_wr <= not(plain_V_V_0_sel_wr);
                end if; 
            end if;
        end if;
    end process;


    plain_V_V_0_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                plain_V_V_0_state <= ap_const_lv2_0;
            else
                if ((((plain_V_V_0_state = ap_const_lv2_2) and (plain_V_V_0_vld_in = ap_const_logic_0)) or ((plain_V_V_0_state = ap_const_lv2_3) and (plain_V_V_0_vld_in = ap_const_logic_0) and (plain_V_V_0_ack_out = ap_const_logic_1)))) then 
                    plain_V_V_0_state <= ap_const_lv2_2;
                elsif ((((plain_V_V_0_state = ap_const_lv2_1) and (plain_V_V_0_ack_out = ap_const_logic_0)) or ((plain_V_V_0_state = ap_const_lv2_3) and (plain_V_V_0_ack_out = ap_const_logic_0) and (plain_V_V_0_vld_in = ap_const_logic_1)))) then 
                    plain_V_V_0_state <= ap_const_lv2_1;
                elsif (((not(((plain_V_V_0_vld_in = ap_const_logic_0) and (plain_V_V_0_ack_out = ap_const_logic_1))) and not(((plain_V_V_0_ack_out = ap_const_logic_0) and (plain_V_V_0_vld_in = ap_const_logic_1))) and (plain_V_V_0_state = ap_const_lv2_3)) or ((plain_V_V_0_state = ap_const_lv2_1) and (plain_V_V_0_ack_out = ap_const_logic_1)) or ((plain_V_V_0_state = ap_const_lv2_2) and (plain_V_V_0_vld_in = ap_const_logic_1)))) then 
                    plain_V_V_0_state <= ap_const_lv2_3;
                else 
                    plain_V_V_0_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    i_reg_153_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond_fu_257_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
                i_reg_153 <= i_1_fu_274_p2;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                i_reg_153 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;

    j2_reg_176_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state7) and (encrypt_V_V_1_ack_in = ap_const_logic_1))) then 
                j2_reg_176 <= j_2_reg_299;
            elsif (((ap_const_boolean_0 = ap_block_state4_on_subcall_done) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
                j2_reg_176 <= ap_const_lv5_0;
            end if; 
        end if;
    end process;

    j_reg_165_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_fu_235_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2) and (encrypt_V_V_1_ack_in = ap_const_logic_1))) then 
                j_reg_165 <= ap_const_lv5_0;
            elsif ((not(((exitcond1_fu_240_p2 = ap_const_lv1_0) and (plain_V_V_0_vld_out = ap_const_logic_0))) and (exitcond1_fu_240_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                j_reg_165 <= j_1_fu_246_p2;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((encrypt_V_V_1_load_A = ap_const_logic_1)) then
                encrypt_V_V_1_payload_A <= out_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((encrypt_V_V_1_load_B = ap_const_logic_1)) then
                encrypt_V_V_1_payload_B <= out_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then
                j_2_reg_299 <= j_2_fu_263_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                len_read_reg_280 <= len;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((plain_V_V_0_load_A = ap_const_logic_1)) then
                plain_V_V_0_payload_A <= plain_V_V_TDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((plain_V_V_0_load_B = ap_const_logic_1)) then
                plain_V_V_0_payload_B <= plain_V_V_TDATA;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, plain_V_V_0_vld_out, encrypt_V_V_1_ack_in, encrypt_V_V_1_state, ap_CS_fsm_state3, exitcond1_fu_240_p2, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state5, exitcond_fu_257_p2, ap_CS_fsm_state2, tmp_fu_235_p2, ap_CS_fsm_state4, ap_block_state4_on_subcall_done)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((tmp_fu_235_p2 = ap_const_lv1_0) and (encrypt_V_V_1_state(0) = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state2) and (encrypt_V_V_1_ack_in = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                elsif (((tmp_fu_235_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2) and (encrypt_V_V_1_ack_in = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state2;
                end if;
            when ap_ST_fsm_state3 => 
                if ((not(((exitcond1_fu_240_p2 = ap_const_lv1_0) and (plain_V_V_0_vld_out = ap_const_logic_0))) and (exitcond1_fu_240_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                elsif ((not(((exitcond1_fu_240_p2 = ap_const_lv1_0) and (plain_V_V_0_vld_out = ap_const_logic_0))) and (exitcond1_fu_240_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                    ap_NS_fsm <= ap_ST_fsm_state4;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state4 => 
                if (((ap_const_boolean_0 = ap_block_state4_on_subcall_done) and (ap_const_logic_1 = ap_CS_fsm_state4))) then
                    ap_NS_fsm <= ap_ST_fsm_state5;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state5 => 
                if (((exitcond_fu_257_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state5))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state6;
                end if;
            when ap_ST_fsm_state6 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state6) and (encrypt_V_V_1_ack_in = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state7;
                else
                    ap_NS_fsm <= ap_ST_fsm_state6;
                end if;
            when ap_ST_fsm_state7 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state7) and (encrypt_V_V_1_ack_in = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state5;
                else
                    ap_NS_fsm <= ap_ST_fsm_state7;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXXXX";
        end case;
    end process;
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);

    ap_block_state3_assign_proc : process(plain_V_V_0_vld_out, exitcond1_fu_240_p2)
    begin
                ap_block_state3 <= ((exitcond1_fu_240_p2 = ap_const_lv1_0) and (plain_V_V_0_vld_out = ap_const_logic_0));
    end process;


    ap_block_state3_ignore_call0_assign_proc : process(plain_V_V_0_vld_out, exitcond1_fu_240_p2)
    begin
                ap_block_state3_ignore_call0 <= ((exitcond1_fu_240_p2 = ap_const_lv1_0) and (plain_V_V_0_vld_out = ap_const_logic_0));
    end process;


    ap_block_state4_on_subcall_done_assign_proc : process(ap_sync_grp_Cipher_fu_187_ap_ready, ap_sync_grp_Cipher_fu_187_ap_done)
    begin
                ap_block_state4_on_subcall_done <= ((ap_sync_grp_Cipher_fu_187_ap_ready and ap_sync_grp_Cipher_fu_187_ap_done) = ap_const_logic_0);
    end process;


    ap_done_assign_proc : process(encrypt_V_V_1_ack_in, encrypt_V_V_1_state, ap_CS_fsm_state2, tmp_fu_235_p2)
    begin
        if (((tmp_fu_235_p2 = ap_const_lv1_0) and (encrypt_V_V_1_state(0) = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state2) and (encrypt_V_V_1_ack_in = ap_const_logic_1))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(encrypt_V_V_1_ack_in, encrypt_V_V_1_state, ap_CS_fsm_state2, tmp_fu_235_p2)
    begin
        if (((tmp_fu_235_p2 = ap_const_lv1_0) and (encrypt_V_V_1_state(0) = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state2) and (encrypt_V_V_1_ack_in = ap_const_logic_1))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_rst_n_inv_assign_proc : process(ap_rst_n)
    begin
                ap_rst_n_inv <= not(ap_rst_n);
    end process;

    ap_sync_grp_Cipher_fu_187_ap_done <= (grp_Cipher_fu_187_ap_done or ap_sync_reg_grp_Cipher_fu_187_ap_done);
    ap_sync_grp_Cipher_fu_187_ap_ready <= (grp_Cipher_fu_187_ap_ready or ap_sync_reg_grp_Cipher_fu_187_ap_ready);
    encrypt_V_V_1_ack_in <= encrypt_V_V_1_state(1);
    encrypt_V_V_1_ack_out <= encrypt_V_V_TREADY;

    encrypt_V_V_1_data_out_assign_proc : process(encrypt_V_V_1_payload_A, encrypt_V_V_1_payload_B, encrypt_V_V_1_sel)
    begin
        if ((encrypt_V_V_1_sel = ap_const_logic_1)) then 
            encrypt_V_V_1_data_out <= encrypt_V_V_1_payload_B;
        else 
            encrypt_V_V_1_data_out <= encrypt_V_V_1_payload_A;
        end if; 
    end process;

    encrypt_V_V_1_load_A <= (not(encrypt_V_V_1_sel_wr) and encrypt_V_V_1_state_cmp_full);
    encrypt_V_V_1_load_B <= (encrypt_V_V_1_state_cmp_full and encrypt_V_V_1_sel_wr);
    encrypt_V_V_1_sel <= encrypt_V_V_1_sel_rd;
    encrypt_V_V_1_state_cmp_full <= '0' when (encrypt_V_V_1_state = ap_const_lv2_1) else '1';

    encrypt_V_V_1_vld_in_assign_proc : process(encrypt_V_V_1_ack_in, ap_CS_fsm_state6)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state6) and (encrypt_V_V_1_ack_in = ap_const_logic_1))) then 
            encrypt_V_V_1_vld_in <= ap_const_logic_1;
        else 
            encrypt_V_V_1_vld_in <= ap_const_logic_0;
        end if; 
    end process;

    encrypt_V_V_1_vld_out <= encrypt_V_V_1_state(0);
    encrypt_V_V_TDATA <= encrypt_V_V_1_data_out;

    encrypt_V_V_TDATA_blk_n_assign_proc : process(encrypt_V_V_1_state, ap_CS_fsm_state6, ap_CS_fsm_state7)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state6))) then 
            encrypt_V_V_TDATA_blk_n <= encrypt_V_V_1_state(1);
        else 
            encrypt_V_V_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    encrypt_V_V_TVALID <= encrypt_V_V_1_state(0);
    exitcond1_fu_240_p2 <= "1" when (j_reg_165 = ap_const_lv5_10) else "0";
    exitcond_fu_257_p2 <= "1" when (j2_reg_176 = ap_const_lv5_10) else "0";

    grp_Cipher_fu_187_ap_continue_assign_proc : process(ap_CS_fsm_state4, ap_block_state4_on_subcall_done)
    begin
        if (((ap_const_boolean_0 = ap_block_state4_on_subcall_done) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
            grp_Cipher_fu_187_ap_continue <= ap_const_logic_1;
        else 
            grp_Cipher_fu_187_ap_continue <= ap_const_logic_0;
        end if; 
    end process;

    grp_Cipher_fu_187_ap_start <= grp_Cipher_fu_187_ap_start_reg;
    i_1_fu_274_p2 <= std_logic_vector(unsigned(i_reg_153) + unsigned(ap_const_lv32_10));

    in_V_address0_assign_proc : process(ap_CS_fsm_state3, exitcond1_fu_240_p2, grp_Cipher_fu_187_plain_V_address0, ap_CS_fsm_state4, tmp_s_fu_252_p1)
    begin
        if (((exitcond1_fu_240_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            in_V_address0 <= tmp_s_fu_252_p1(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            in_V_address0 <= grp_Cipher_fu_187_plain_V_address0;
        else 
            in_V_address0 <= "XXXX";
        end if; 
    end process;


    in_V_ce0_assign_proc : process(plain_V_V_0_vld_out, ap_CS_fsm_state3, exitcond1_fu_240_p2, grp_Cipher_fu_187_plain_V_ce0, ap_CS_fsm_state4)
    begin
        if ((not(((exitcond1_fu_240_p2 = ap_const_lv1_0) and (plain_V_V_0_vld_out = ap_const_logic_0))) and (exitcond1_fu_240_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            in_V_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            in_V_ce0 <= grp_Cipher_fu_187_plain_V_ce0;
        else 
            in_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    in_V_we0_assign_proc : process(plain_V_V_0_vld_out, ap_CS_fsm_state3, exitcond1_fu_240_p2)
    begin
        if ((not(((exitcond1_fu_240_p2 = ap_const_lv1_0) and (plain_V_V_0_vld_out = ap_const_logic_0))) and (exitcond1_fu_240_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            in_V_we0 <= ap_const_logic_1;
        else 
            in_V_we0 <= ap_const_logic_0;
        end if; 
    end process;

    j_1_fu_246_p2 <= std_logic_vector(unsigned(j_reg_165) + unsigned(ap_const_lv5_1));
    j_2_fu_263_p2 <= std_logic_vector(unsigned(j2_reg_176) + unsigned(ap_const_lv5_1));

    out_address0_assign_proc : process(ap_CS_fsm_state5, grp_Cipher_fu_187_encrypt_V_address0, ap_CS_fsm_state4, tmp_3_fu_269_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            out_address0 <= tmp_3_fu_269_p1(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            out_address0 <= grp_Cipher_fu_187_encrypt_V_address0;
        else 
            out_address0 <= "XXXX";
        end if; 
    end process;


    out_ce0_assign_proc : process(ap_CS_fsm_state5, grp_Cipher_fu_187_encrypt_V_ce0, ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            out_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            out_ce0 <= grp_Cipher_fu_187_encrypt_V_ce0;
        else 
            out_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    out_we0_assign_proc : process(grp_Cipher_fu_187_encrypt_V_we0, ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            out_we0 <= grp_Cipher_fu_187_encrypt_V_we0;
        else 
            out_we0 <= ap_const_logic_0;
        end if; 
    end process;

    plain_V_V_0_ack_in <= plain_V_V_0_state(1);

    plain_V_V_0_ack_out_assign_proc : process(plain_V_V_0_vld_out, ap_CS_fsm_state3, exitcond1_fu_240_p2)
    begin
        if ((not(((exitcond1_fu_240_p2 = ap_const_lv1_0) and (plain_V_V_0_vld_out = ap_const_logic_0))) and (exitcond1_fu_240_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            plain_V_V_0_ack_out <= ap_const_logic_1;
        else 
            plain_V_V_0_ack_out <= ap_const_logic_0;
        end if; 
    end process;


    plain_V_V_0_data_out_assign_proc : process(plain_V_V_0_payload_A, plain_V_V_0_payload_B, plain_V_V_0_sel)
    begin
        if ((plain_V_V_0_sel = ap_const_logic_1)) then 
            plain_V_V_0_data_out <= plain_V_V_0_payload_B;
        else 
            plain_V_V_0_data_out <= plain_V_V_0_payload_A;
        end if; 
    end process;

    plain_V_V_0_load_A <= (plain_V_V_0_state_cmp_full and not(plain_V_V_0_sel_wr));
    plain_V_V_0_load_B <= (plain_V_V_0_state_cmp_full and plain_V_V_0_sel_wr);
    plain_V_V_0_sel <= plain_V_V_0_sel_rd;
    plain_V_V_0_state_cmp_full <= '0' when (plain_V_V_0_state = ap_const_lv2_1) else '1';
    plain_V_V_0_vld_in <= plain_V_V_TVALID;
    plain_V_V_0_vld_out <= plain_V_V_0_state(0);

    plain_V_V_TDATA_blk_n_assign_proc : process(plain_V_V_0_state, ap_CS_fsm_state3, exitcond1_fu_240_p2)
    begin
        if (((exitcond1_fu_240_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            plain_V_V_TDATA_blk_n <= plain_V_V_0_state(0);
        else 
            plain_V_V_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    plain_V_V_TREADY <= plain_V_V_0_state(1);
    tmp_3_fu_269_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j2_reg_176),64));
    tmp_fu_235_p2 <= "1" when (unsigned(i_reg_153) < unsigned(len_read_reg_280)) else "0";
    tmp_s_fu_252_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j_reg_165),64));
end behav;
