// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.3
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#ifndef _Cipher_Loop_2_proc_HH_
#define _Cipher_Loop_2_proc_HH_

#include "systemc.h"
#include "AESL_pkg.h"


namespace ap_rtl {

struct Cipher_Loop_2_proc : public sc_module {
    // Port declarations 14
    sc_in_clk ap_clk;
    sc_in< sc_logic > ap_rst;
    sc_in< sc_logic > ap_start;
    sc_out< sc_logic > ap_done;
    sc_in< sc_logic > ap_continue;
    sc_out< sc_logic > ap_idle;
    sc_out< sc_logic > ap_ready;
    sc_out< sc_lv<4> > state_40_address0;
    sc_out< sc_logic > state_40_ce0;
    sc_in< sc_lv<8> > state_40_q0;
    sc_out< sc_lv<4> > encrypt_address0;
    sc_out< sc_logic > encrypt_ce0;
    sc_out< sc_logic > encrypt_we0;
    sc_out< sc_lv<8> > encrypt_d0;


    // Module declarations
    Cipher_Loop_2_proc(sc_module_name name);
    SC_HAS_PROCESS(Cipher_Loop_2_proc);

    ~Cipher_Loop_2_proc();

    sc_trace_file* mVcdFile;

    sc_signal< sc_logic > ap_done_reg;
    sc_signal< sc_lv<3> > ap_CS_fsm;
    sc_signal< sc_logic > ap_CS_fsm_state1;
    sc_signal< sc_lv<5> > i_fu_60_p2;
    sc_signal< sc_lv<5> > i_reg_74;
    sc_signal< sc_logic > ap_CS_fsm_state2;
    sc_signal< sc_lv<64> > tmp_32_fu_66_p1;
    sc_signal< sc_lv<64> > tmp_32_reg_79;
    sc_signal< sc_lv<1> > tmp_s_fu_54_p2;
    sc_signal< sc_lv<5> > i1_reg_43;
    sc_signal< bool > ap_block_state1;
    sc_signal< sc_logic > ap_CS_fsm_state3;
    sc_signal< sc_lv<3> > ap_NS_fsm;
    static const sc_logic ap_const_logic_1;
    static const sc_logic ap_const_logic_0;
    static const sc_lv<3> ap_ST_fsm_state1;
    static const sc_lv<3> ap_ST_fsm_state2;
    static const sc_lv<3> ap_ST_fsm_state3;
    static const sc_lv<32> ap_const_lv32_0;
    static const sc_lv<32> ap_const_lv32_1;
    static const sc_lv<1> ap_const_lv1_0;
    static const sc_lv<5> ap_const_lv5_0;
    static const sc_lv<32> ap_const_lv32_2;
    static const sc_lv<5> ap_const_lv5_10;
    static const sc_lv<5> ap_const_lv5_1;
    static const sc_lv<1> ap_const_lv1_1;
    static const bool ap_const_boolean_1;
    // Thread declarations
    void thread_ap_clk_no_reset_();
    void thread_ap_CS_fsm_state1();
    void thread_ap_CS_fsm_state2();
    void thread_ap_CS_fsm_state3();
    void thread_ap_block_state1();
    void thread_ap_done();
    void thread_ap_idle();
    void thread_ap_ready();
    void thread_encrypt_address0();
    void thread_encrypt_ce0();
    void thread_encrypt_d0();
    void thread_encrypt_we0();
    void thread_i_fu_60_p2();
    void thread_state_40_address0();
    void thread_state_40_ce0();
    void thread_tmp_32_fu_66_p1();
    void thread_tmp_s_fu_54_p2();
    void thread_ap_NS_fsm();
};

}

using namespace ap_rtl;

#endif
