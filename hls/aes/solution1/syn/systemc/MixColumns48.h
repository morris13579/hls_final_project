// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.3
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#ifndef _MixColumns48_HH_
#define _MixColumns48_HH_

#include "systemc.h"
#include "AESL_pkg.h"


namespace ap_rtl {

struct MixColumns48 : public sc_module {
    // Port declarations 21
    sc_in_clk ap_clk;
    sc_in< sc_logic > ap_rst;
    sc_in< sc_logic > ap_start;
    sc_out< sc_logic > ap_done;
    sc_in< sc_logic > ap_continue;
    sc_out< sc_logic > ap_idle;
    sc_out< sc_logic > ap_ready;
    sc_out< sc_lv<4> > in_V_address0;
    sc_out< sc_logic > in_V_ce0;
    sc_in< sc_lv<8> > in_V_q0;
    sc_out< sc_lv<4> > in_V_address1;
    sc_out< sc_logic > in_V_ce1;
    sc_in< sc_lv<8> > in_V_q1;
    sc_out< sc_lv<4> > out_V_address0;
    sc_out< sc_logic > out_V_ce0;
    sc_out< sc_logic > out_V_we0;
    sc_out< sc_lv<8> > out_V_d0;
    sc_out< sc_lv<4> > out_V_address1;
    sc_out< sc_logic > out_V_ce1;
    sc_out< sc_logic > out_V_we1;
    sc_out< sc_lv<8> > out_V_d1;


    // Module declarations
    MixColumns48(sc_module_name name);
    SC_HAS_PROCESS(MixColumns48);

    ~MixColumns48();

    sc_trace_file* mVcdFile;

    sc_signal< sc_logic > ap_done_reg;
    sc_signal< sc_lv<5> > ap_CS_fsm;
    sc_signal< sc_logic > ap_CS_fsm_state1;
    sc_signal< sc_lv<64> > tmp_4_fu_135_p1;
    sc_signal< sc_lv<64> > tmp_4_reg_370;
    sc_signal< sc_logic > ap_CS_fsm_state2;
    sc_signal< sc_lv<1> > tmp_fu_127_p3;
    sc_signal< sc_lv<4> > tmp_67_fu_140_p1;
    sc_signal< sc_lv<4> > tmp_67_reg_380;
    sc_signal< sc_lv<64> > tmp_7_fu_150_p1;
    sc_signal< sc_lv<64> > tmp_7_reg_386;
    sc_signal< sc_lv<5> > i_V_fu_155_p2;
    sc_signal< sc_lv<5> > i_V_reg_396;
    sc_signal< sc_lv<8> > t_V_reg_401;
    sc_signal< sc_logic > ap_CS_fsm_state3;
    sc_signal< sc_lv<8> > rhs_V_reg_408;
    sc_signal< sc_lv<64> > tmp_9_fu_166_p1;
    sc_signal< sc_lv<64> > tmp_9_reg_415;
    sc_signal< sc_lv<64> > tmp_s_fu_176_p1;
    sc_signal< sc_lv<64> > tmp_s_reg_425;
    sc_signal< sc_lv<8> > ret_V_13_fu_322_p2;
    sc_signal< sc_lv<8> > ret_V_13_reg_435;
    sc_signal< sc_logic > ap_CS_fsm_state4;
    sc_signal< sc_lv<8> > ret_V_16_fu_361_p2;
    sc_signal< sc_lv<8> > ret_V_16_reg_440;
    sc_signal< sc_lv<5> > p_s_reg_116;
    sc_signal< bool > ap_block_state1;
    sc_signal< sc_logic > ap_CS_fsm_state5;
    sc_signal< sc_lv<8> > ret_V_7_fu_230_p2;
    sc_signal< sc_lv<8> > ret_V_10_fu_275_p2;
    sc_signal< sc_lv<4> > ret_V_fu_144_p2;
    sc_signal< sc_lv<4> > ret_V_2_fu_161_p2;
    sc_signal< sc_lv<4> > ret_V_4_fu_171_p2;
    sc_signal< sc_lv<8> > ret_V_17_fu_181_p2;
    sc_signal< sc_lv<8> > ret_V_18_fu_185_p2;
    sc_signal< sc_lv<1> > tmp_69_fu_203_p3;
    sc_signal< sc_lv<8> > p_i_cast_cast_cast_fu_211_p3;
    sc_signal< sc_lv<8> > r_V_fu_197_p2;
    sc_signal< sc_lv<8> > ret_V_67_fu_191_p2;
    sc_signal< sc_lv<8> > tmp2_fu_224_p2;
    sc_signal< sc_lv<8> > tmp1_fu_219_p2;
    sc_signal< sc_lv<8> > ret_V_68_fu_237_p2;
    sc_signal< sc_lv<1> > tmp_71_fu_248_p3;
    sc_signal< sc_lv<8> > p_i23_cast_cast_cast_fu_256_p3;
    sc_signal< sc_lv<8> > r_V_22_fu_242_p2;
    sc_signal< sc_lv<8> > tmp4_fu_269_p2;
    sc_signal< sc_lv<8> > tmp3_fu_264_p2;
    sc_signal< sc_lv<8> > ret_V_69_fu_282_p2;
    sc_signal< sc_lv<1> > tmp_73_fu_294_p3;
    sc_signal< sc_lv<8> > p_i28_cast_cast_cast_fu_302_p3;
    sc_signal< sc_lv<8> > r_V_23_fu_288_p2;
    sc_signal< sc_lv<8> > tmp6_fu_316_p2;
    sc_signal< sc_lv<8> > tmp5_fu_310_p2;
    sc_signal< sc_lv<8> > ret_V_70_fu_328_p2;
    sc_signal< sc_lv<1> > tmp_75_fu_339_p3;
    sc_signal< sc_lv<8> > r_V_24_fu_333_p2;
    sc_signal< sc_lv<8> > tmp7_fu_355_p2;
    sc_signal< sc_lv<8> > p_i33_cast_cast_cast_fu_347_p3;
    sc_signal< sc_lv<5> > ap_NS_fsm;
    static const sc_logic ap_const_logic_1;
    static const sc_logic ap_const_logic_0;
    static const sc_lv<5> ap_ST_fsm_state1;
    static const sc_lv<5> ap_ST_fsm_state2;
    static const sc_lv<5> ap_ST_fsm_state3;
    static const sc_lv<5> ap_ST_fsm_state4;
    static const sc_lv<5> ap_ST_fsm_state5;
    static const sc_lv<32> ap_const_lv32_0;
    static const sc_lv<32> ap_const_lv32_1;
    static const sc_lv<1> ap_const_lv1_0;
    static const sc_lv<32> ap_const_lv32_2;
    static const sc_lv<32> ap_const_lv32_3;
    static const sc_lv<5> ap_const_lv5_0;
    static const sc_lv<32> ap_const_lv32_4;
    static const sc_lv<4> ap_const_lv4_1;
    static const sc_lv<5> ap_const_lv5_4;
    static const sc_lv<4> ap_const_lv4_2;
    static const sc_lv<4> ap_const_lv4_3;
    static const sc_lv<8> ap_const_lv8_1;
    static const sc_lv<32> ap_const_lv32_7;
    static const sc_lv<8> ap_const_lv8_1B;
    static const sc_lv<8> ap_const_lv8_0;
    static const sc_lv<1> ap_const_lv1_1;
    static const bool ap_const_boolean_1;
    // Thread declarations
    void thread_ap_clk_no_reset_();
    void thread_ap_CS_fsm_state1();
    void thread_ap_CS_fsm_state2();
    void thread_ap_CS_fsm_state3();
    void thread_ap_CS_fsm_state4();
    void thread_ap_CS_fsm_state5();
    void thread_ap_block_state1();
    void thread_ap_done();
    void thread_ap_idle();
    void thread_ap_ready();
    void thread_i_V_fu_155_p2();
    void thread_in_V_address0();
    void thread_in_V_address1();
    void thread_in_V_ce0();
    void thread_in_V_ce1();
    void thread_out_V_address0();
    void thread_out_V_address1();
    void thread_out_V_ce0();
    void thread_out_V_ce1();
    void thread_out_V_d0();
    void thread_out_V_d1();
    void thread_out_V_we0();
    void thread_out_V_we1();
    void thread_p_i23_cast_cast_cast_fu_256_p3();
    void thread_p_i28_cast_cast_cast_fu_302_p3();
    void thread_p_i33_cast_cast_cast_fu_347_p3();
    void thread_p_i_cast_cast_cast_fu_211_p3();
    void thread_r_V_22_fu_242_p2();
    void thread_r_V_23_fu_288_p2();
    void thread_r_V_24_fu_333_p2();
    void thread_r_V_fu_197_p2();
    void thread_ret_V_10_fu_275_p2();
    void thread_ret_V_13_fu_322_p2();
    void thread_ret_V_16_fu_361_p2();
    void thread_ret_V_17_fu_181_p2();
    void thread_ret_V_18_fu_185_p2();
    void thread_ret_V_2_fu_161_p2();
    void thread_ret_V_4_fu_171_p2();
    void thread_ret_V_67_fu_191_p2();
    void thread_ret_V_68_fu_237_p2();
    void thread_ret_V_69_fu_282_p2();
    void thread_ret_V_70_fu_328_p2();
    void thread_ret_V_7_fu_230_p2();
    void thread_ret_V_fu_144_p2();
    void thread_tmp1_fu_219_p2();
    void thread_tmp2_fu_224_p2();
    void thread_tmp3_fu_264_p2();
    void thread_tmp4_fu_269_p2();
    void thread_tmp5_fu_310_p2();
    void thread_tmp6_fu_316_p2();
    void thread_tmp7_fu_355_p2();
    void thread_tmp_4_fu_135_p1();
    void thread_tmp_67_fu_140_p1();
    void thread_tmp_69_fu_203_p3();
    void thread_tmp_71_fu_248_p3();
    void thread_tmp_73_fu_294_p3();
    void thread_tmp_75_fu_339_p3();
    void thread_tmp_7_fu_150_p1();
    void thread_tmp_9_fu_166_p1();
    void thread_tmp_fu_127_p3();
    void thread_tmp_s_fu_176_p1();
    void thread_ap_NS_fsm();
};

}

using namespace ap_rtl;

#endif
