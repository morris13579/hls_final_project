// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.3
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#include "SubBytes32.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const sc_logic SubBytes32::ap_const_logic_1 = sc_dt::Log_1;
const sc_logic SubBytes32::ap_const_logic_0 = sc_dt::Log_0;
const sc_lv<4> SubBytes32::ap_ST_fsm_state1 = "1";
const sc_lv<4> SubBytes32::ap_ST_fsm_state2 = "10";
const sc_lv<4> SubBytes32::ap_ST_fsm_state3 = "100";
const sc_lv<4> SubBytes32::ap_ST_fsm_state4 = "1000";
const sc_lv<32> SubBytes32::ap_const_lv32_0 = "00000000000000000000000000000000";
const sc_lv<32> SubBytes32::ap_const_lv32_1 = "1";
const sc_lv<1> SubBytes32::ap_const_lv1_0 = "0";
const sc_lv<32> SubBytes32::ap_const_lv32_2 = "10";
const sc_lv<5> SubBytes32::ap_const_lv5_0 = "00000";
const sc_lv<32> SubBytes32::ap_const_lv32_3 = "11";
const sc_lv<5> SubBytes32::ap_const_lv5_10 = "10000";
const sc_lv<5> SubBytes32::ap_const_lv5_1 = "1";
const sc_lv<1> SubBytes32::ap_const_lv1_1 = "1";
const bool SubBytes32::ap_const_boolean_1 = true;

SubBytes32::SubBytes32(sc_module_name name) : sc_module(name), mVcdFile(0) {
    sbox60_U = new SubBytes20_sbox63("sbox60_U");
    sbox60_U->clk(ap_clk);
    sbox60_U->reset(ap_rst);
    sbox60_U->address0(sbox60_address0);
    sbox60_U->ce0(sbox60_ce0);
    sbox60_U->q0(sbox60_q0);

    SC_METHOD(thread_ap_clk_no_reset_);
    dont_initialize();
    sensitive << ( ap_clk.pos() );

    SC_METHOD(thread_ap_CS_fsm_state1);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state2);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state3);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state4);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_block_state1);
    sensitive << ( ap_start );
    sensitive << ( ap_done_reg );

    SC_METHOD(thread_ap_done);
    sensitive << ( ap_done_reg );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( tmp_fu_69_p2 );

    SC_METHOD(thread_ap_idle);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );

    SC_METHOD(thread_ap_ready);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( tmp_fu_69_p2 );

    SC_METHOD(thread_i_1_fu_75_p2);
    sensitive << ( i_reg_58 );

    SC_METHOD(thread_in_r_address0);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( tmp_4_fu_81_p1 );

    SC_METHOD(thread_in_r_ce0);
    sensitive << ( ap_CS_fsm_state2 );

    SC_METHOD(thread_out_r_address0);
    sensitive << ( tmp_4_reg_99 );
    sensitive << ( ap_CS_fsm_state4 );

    SC_METHOD(thread_out_r_ce0);
    sensitive << ( ap_CS_fsm_state4 );

    SC_METHOD(thread_out_r_d0);
    sensitive << ( sbox60_q0 );
    sensitive << ( ap_CS_fsm_state4 );

    SC_METHOD(thread_out_r_we0);
    sensitive << ( ap_CS_fsm_state4 );

    SC_METHOD(thread_sbox60_address0);
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( tmp_5_fu_86_p1 );

    SC_METHOD(thread_sbox60_ce0);
    sensitive << ( ap_CS_fsm_state3 );

    SC_METHOD(thread_tmp_4_fu_81_p1);
    sensitive << ( i_reg_58 );

    SC_METHOD(thread_tmp_5_fu_86_p1);
    sensitive << ( in_r_q0 );

    SC_METHOD(thread_tmp_fu_69_p2);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( i_reg_58 );

    SC_METHOD(thread_ap_NS_fsm);
    sensitive << ( ap_start );
    sensitive << ( ap_done_reg );
    sensitive << ( ap_CS_fsm );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( tmp_fu_69_p2 );

    ap_done_reg = SC_LOGIC_0;
    ap_CS_fsm = "0001";
    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "SubBytes32_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT_HIER__
    sc_trace(mVcdFile, ap_clk, "(port)ap_clk");
    sc_trace(mVcdFile, ap_rst, "(port)ap_rst");
    sc_trace(mVcdFile, ap_start, "(port)ap_start");
    sc_trace(mVcdFile, ap_done, "(port)ap_done");
    sc_trace(mVcdFile, ap_continue, "(port)ap_continue");
    sc_trace(mVcdFile, ap_idle, "(port)ap_idle");
    sc_trace(mVcdFile, ap_ready, "(port)ap_ready");
    sc_trace(mVcdFile, in_r_address0, "(port)in_r_address0");
    sc_trace(mVcdFile, in_r_ce0, "(port)in_r_ce0");
    sc_trace(mVcdFile, in_r_q0, "(port)in_r_q0");
    sc_trace(mVcdFile, out_r_address0, "(port)out_r_address0");
    sc_trace(mVcdFile, out_r_ce0, "(port)out_r_ce0");
    sc_trace(mVcdFile, out_r_we0, "(port)out_r_we0");
    sc_trace(mVcdFile, out_r_d0, "(port)out_r_d0");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, ap_done_reg, "ap_done_reg");
    sc_trace(mVcdFile, ap_CS_fsm, "ap_CS_fsm");
    sc_trace(mVcdFile, ap_CS_fsm_state1, "ap_CS_fsm_state1");
    sc_trace(mVcdFile, sbox60_address0, "sbox60_address0");
    sc_trace(mVcdFile, sbox60_ce0, "sbox60_ce0");
    sc_trace(mVcdFile, sbox60_q0, "sbox60_q0");
    sc_trace(mVcdFile, i_1_fu_75_p2, "i_1_fu_75_p2");
    sc_trace(mVcdFile, i_1_reg_94, "i_1_reg_94");
    sc_trace(mVcdFile, ap_CS_fsm_state2, "ap_CS_fsm_state2");
    sc_trace(mVcdFile, tmp_4_fu_81_p1, "tmp_4_fu_81_p1");
    sc_trace(mVcdFile, tmp_4_reg_99, "tmp_4_reg_99");
    sc_trace(mVcdFile, tmp_fu_69_p2, "tmp_fu_69_p2");
    sc_trace(mVcdFile, ap_CS_fsm_state3, "ap_CS_fsm_state3");
    sc_trace(mVcdFile, i_reg_58, "i_reg_58");
    sc_trace(mVcdFile, ap_block_state1, "ap_block_state1");
    sc_trace(mVcdFile, ap_CS_fsm_state4, "ap_CS_fsm_state4");
    sc_trace(mVcdFile, tmp_5_fu_86_p1, "tmp_5_fu_86_p1");
    sc_trace(mVcdFile, ap_NS_fsm, "ap_NS_fsm");
#endif

    }
}

SubBytes32::~SubBytes32() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

    delete sbox60_U;
}

void SubBytes32::thread_ap_clk_no_reset_() {
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_CS_fsm = ap_ST_fsm_state1;
    } else {
        ap_CS_fsm = ap_NS_fsm.read();
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_done_reg = ap_const_logic_0;
    } else {
        if (esl_seteq<1,1,1>(ap_const_logic_1, ap_continue.read())) {
            ap_done_reg = ap_const_logic_0;
        } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
                    esl_seteq<1,1,1>(tmp_fu_69_p2.read(), ap_const_lv1_1))) {
            ap_done_reg = ap_const_logic_1;
        }
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read())) {
        i_reg_58 = i_1_reg_94.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
                !(esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1)))) {
        i_reg_58 = ap_const_lv5_0;
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())) {
        i_1_reg_94 = i_1_fu_75_p2.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && esl_seteq<1,1,1>(tmp_fu_69_p2.read(), ap_const_lv1_0))) {
        tmp_4_reg_99 = tmp_4_fu_81_p1.read();
    }
}

void SubBytes32::thread_ap_CS_fsm_state1() {
    ap_CS_fsm_state1 = ap_CS_fsm.read()[0];
}

void SubBytes32::thread_ap_CS_fsm_state2() {
    ap_CS_fsm_state2 = ap_CS_fsm.read()[1];
}

void SubBytes32::thread_ap_CS_fsm_state3() {
    ap_CS_fsm_state3 = ap_CS_fsm.read()[2];
}

void SubBytes32::thread_ap_CS_fsm_state4() {
    ap_CS_fsm_state4 = ap_CS_fsm.read()[3];
}

void SubBytes32::thread_ap_block_state1() {
    ap_block_state1 = (esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1));
}

void SubBytes32::thread_ap_done() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
         esl_seteq<1,1,1>(tmp_fu_69_p2.read(), ap_const_lv1_1))) {
        ap_done = ap_const_logic_1;
    } else {
        ap_done = ap_done_reg.read();
    }
}

void SubBytes32::thread_ap_idle() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()))) {
        ap_idle = ap_const_logic_1;
    } else {
        ap_idle = ap_const_logic_0;
    }
}

void SubBytes32::thread_ap_ready() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
         esl_seteq<1,1,1>(tmp_fu_69_p2.read(), ap_const_lv1_1))) {
        ap_ready = ap_const_logic_1;
    } else {
        ap_ready = ap_const_logic_0;
    }
}

void SubBytes32::thread_i_1_fu_75_p2() {
    i_1_fu_75_p2 = (!i_reg_58.read().is_01() || !ap_const_lv5_1.is_01())? sc_lv<5>(): (sc_biguint<5>(i_reg_58.read()) + sc_biguint<5>(ap_const_lv5_1));
}

void SubBytes32::thread_in_r_address0() {
    in_r_address0 =  (sc_lv<4>) (tmp_4_fu_81_p1.read());
}

void SubBytes32::thread_in_r_ce0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())) {
        in_r_ce0 = ap_const_logic_1;
    } else {
        in_r_ce0 = ap_const_logic_0;
    }
}

void SubBytes32::thread_out_r_address0() {
    out_r_address0 =  (sc_lv<4>) (tmp_4_reg_99.read());
}

void SubBytes32::thread_out_r_ce0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read())) {
        out_r_ce0 = ap_const_logic_1;
    } else {
        out_r_ce0 = ap_const_logic_0;
    }
}

void SubBytes32::thread_out_r_d0() {
    out_r_d0 = sbox60_q0.read();
}

void SubBytes32::thread_out_r_we0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read())) {
        out_r_we0 = ap_const_logic_1;
    } else {
        out_r_we0 = ap_const_logic_0;
    }
}

void SubBytes32::thread_sbox60_address0() {
    sbox60_address0 =  (sc_lv<8>) (tmp_5_fu_86_p1.read());
}

void SubBytes32::thread_sbox60_ce0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read())) {
        sbox60_ce0 = ap_const_logic_1;
    } else {
        sbox60_ce0 = ap_const_logic_0;
    }
}

void SubBytes32::thread_tmp_4_fu_81_p1() {
    tmp_4_fu_81_p1 = esl_zext<64,5>(i_reg_58.read());
}

void SubBytes32::thread_tmp_5_fu_86_p1() {
    tmp_5_fu_86_p1 = esl_zext<64,8>(in_r_q0.read());
}

void SubBytes32::thread_tmp_fu_69_p2() {
    tmp_fu_69_p2 = (!i_reg_58.read().is_01() || !ap_const_lv5_10.is_01())? sc_lv<1>(): sc_lv<1>(i_reg_58.read() == ap_const_lv5_10);
}

void SubBytes32::thread_ap_NS_fsm() {
    switch (ap_CS_fsm.read().to_uint64()) {
        case 1 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && !(esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1)))) {
                ap_NS_fsm = ap_ST_fsm_state2;
            } else {
                ap_NS_fsm = ap_ST_fsm_state1;
            }
            break;
        case 2 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && esl_seteq<1,1,1>(tmp_fu_69_p2.read(), ap_const_lv1_1))) {
                ap_NS_fsm = ap_ST_fsm_state1;
            } else {
                ap_NS_fsm = ap_ST_fsm_state3;
            }
            break;
        case 4 : 
            ap_NS_fsm = ap_ST_fsm_state4;
            break;
        case 8 : 
            ap_NS_fsm = ap_ST_fsm_state2;
            break;
        default : 
            ap_NS_fsm = "XXXX";
            break;
    }
}

}

