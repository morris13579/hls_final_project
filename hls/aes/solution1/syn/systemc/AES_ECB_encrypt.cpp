// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.3
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#include "AES_ECB_encrypt.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const sc_logic AES_ECB_encrypt::ap_const_logic_1 = sc_dt::Log_1;
const sc_logic AES_ECB_encrypt::ap_const_logic_0 = sc_dt::Log_0;
const sc_lv<7> AES_ECB_encrypt::ap_ST_fsm_state1 = "1";
const sc_lv<7> AES_ECB_encrypt::ap_ST_fsm_state2 = "10";
const sc_lv<7> AES_ECB_encrypt::ap_ST_fsm_state3 = "100";
const sc_lv<7> AES_ECB_encrypt::ap_ST_fsm_state4 = "1000";
const sc_lv<7> AES_ECB_encrypt::ap_ST_fsm_state5 = "10000";
const sc_lv<7> AES_ECB_encrypt::ap_ST_fsm_state6 = "100000";
const sc_lv<7> AES_ECB_encrypt::ap_ST_fsm_state7 = "1000000";
const sc_lv<32> AES_ECB_encrypt::ap_const_lv32_0 = "00000000000000000000000000000000";
const sc_lv<1> AES_ECB_encrypt::ap_const_lv1_0 = "0";
const sc_lv<1> AES_ECB_encrypt::ap_const_lv1_1 = "1";
const sc_lv<2> AES_ECB_encrypt::ap_const_lv2_0 = "00";
const sc_lv<2> AES_ECB_encrypt::ap_const_lv2_2 = "10";
const sc_lv<2> AES_ECB_encrypt::ap_const_lv2_3 = "11";
const sc_lv<2> AES_ECB_encrypt::ap_const_lv2_1 = "1";
const sc_lv<32> AES_ECB_encrypt::ap_const_lv32_2 = "10";
const sc_lv<32> AES_ECB_encrypt::ap_const_lv32_5 = "101";
const sc_lv<32> AES_ECB_encrypt::ap_const_lv32_6 = "110";
const int AES_ECB_encrypt::C_S_AXI_DATA_WIDTH = "100000";
const sc_lv<32> AES_ECB_encrypt::ap_const_lv32_4 = "100";
const sc_lv<5> AES_ECB_encrypt::ap_const_lv5_0 = "00000";
const sc_lv<32> AES_ECB_encrypt::ap_const_lv32_1 = "1";
const sc_lv<32> AES_ECB_encrypt::ap_const_lv32_3 = "11";
const bool AES_ECB_encrypt::ap_const_boolean_0 = false;
const sc_lv<5> AES_ECB_encrypt::ap_const_lv5_10 = "10000";
const sc_lv<5> AES_ECB_encrypt::ap_const_lv5_1 = "1";
const sc_lv<32> AES_ECB_encrypt::ap_const_lv32_10 = "10000";
const sc_lv<8> AES_ECB_encrypt::ap_const_lv8_0 = "00000000";
const bool AES_ECB_encrypt::ap_const_boolean_1 = true;

AES_ECB_encrypt::AES_ECB_encrypt(sc_module_name name) : sc_module(name), mVcdFile(0) {
    AES_ECB_encrypt_AXILiteS_s_axi_U = new AES_ECB_encrypt_AXILiteS_s_axi<C_S_AXI_AXILITES_ADDR_WIDTH,C_S_AXI_AXILITES_DATA_WIDTH>("AES_ECB_encrypt_AXILiteS_s_axi_U");
    AES_ECB_encrypt_AXILiteS_s_axi_U->AWVALID(s_axi_AXILiteS_AWVALID);
    AES_ECB_encrypt_AXILiteS_s_axi_U->AWREADY(s_axi_AXILiteS_AWREADY);
    AES_ECB_encrypt_AXILiteS_s_axi_U->AWADDR(s_axi_AXILiteS_AWADDR);
    AES_ECB_encrypt_AXILiteS_s_axi_U->WVALID(s_axi_AXILiteS_WVALID);
    AES_ECB_encrypt_AXILiteS_s_axi_U->WREADY(s_axi_AXILiteS_WREADY);
    AES_ECB_encrypt_AXILiteS_s_axi_U->WDATA(s_axi_AXILiteS_WDATA);
    AES_ECB_encrypt_AXILiteS_s_axi_U->WSTRB(s_axi_AXILiteS_WSTRB);
    AES_ECB_encrypt_AXILiteS_s_axi_U->ARVALID(s_axi_AXILiteS_ARVALID);
    AES_ECB_encrypt_AXILiteS_s_axi_U->ARREADY(s_axi_AXILiteS_ARREADY);
    AES_ECB_encrypt_AXILiteS_s_axi_U->ARADDR(s_axi_AXILiteS_ARADDR);
    AES_ECB_encrypt_AXILiteS_s_axi_U->RVALID(s_axi_AXILiteS_RVALID);
    AES_ECB_encrypt_AXILiteS_s_axi_U->RREADY(s_axi_AXILiteS_RREADY);
    AES_ECB_encrypt_AXILiteS_s_axi_U->RDATA(s_axi_AXILiteS_RDATA);
    AES_ECB_encrypt_AXILiteS_s_axi_U->RRESP(s_axi_AXILiteS_RRESP);
    AES_ECB_encrypt_AXILiteS_s_axi_U->BVALID(s_axi_AXILiteS_BVALID);
    AES_ECB_encrypt_AXILiteS_s_axi_U->BREADY(s_axi_AXILiteS_BREADY);
    AES_ECB_encrypt_AXILiteS_s_axi_U->BRESP(s_axi_AXILiteS_BRESP);
    AES_ECB_encrypt_AXILiteS_s_axi_U->ACLK(ap_clk);
    AES_ECB_encrypt_AXILiteS_s_axi_U->ARESET(ap_rst_n_inv);
    AES_ECB_encrypt_AXILiteS_s_axi_U->ACLK_EN(ap_var_for_const0);
    AES_ECB_encrypt_AXILiteS_s_axi_U->ap_start(ap_start);
    AES_ECB_encrypt_AXILiteS_s_axi_U->interrupt(interrupt);
    AES_ECB_encrypt_AXILiteS_s_axi_U->ap_ready(ap_ready);
    AES_ECB_encrypt_AXILiteS_s_axi_U->ap_done(ap_done);
    AES_ECB_encrypt_AXILiteS_s_axi_U->ap_idle(ap_idle);
    AES_ECB_encrypt_AXILiteS_s_axi_U->key_0_V_address0(grp_Cipher_fu_187_key_0_V_address0);
    AES_ECB_encrypt_AXILiteS_s_axi_U->key_0_V_ce0(grp_Cipher_fu_187_key_0_V_ce0);
    AES_ECB_encrypt_AXILiteS_s_axi_U->key_0_V_q0(key_0_V_q0);
    AES_ECB_encrypt_AXILiteS_s_axi_U->key_1_V_address0(grp_Cipher_fu_187_key_1_V_address0);
    AES_ECB_encrypt_AXILiteS_s_axi_U->key_1_V_ce0(grp_Cipher_fu_187_key_1_V_ce0);
    AES_ECB_encrypt_AXILiteS_s_axi_U->key_1_V_q0(key_1_V_q0);
    AES_ECB_encrypt_AXILiteS_s_axi_U->key_2_V_address0(grp_Cipher_fu_187_key_2_V_address0);
    AES_ECB_encrypt_AXILiteS_s_axi_U->key_2_V_ce0(grp_Cipher_fu_187_key_2_V_ce0);
    AES_ECB_encrypt_AXILiteS_s_axi_U->key_2_V_q0(key_2_V_q0);
    AES_ECB_encrypt_AXILiteS_s_axi_U->key_3_V_address0(grp_Cipher_fu_187_key_3_V_address0);
    AES_ECB_encrypt_AXILiteS_s_axi_U->key_3_V_ce0(grp_Cipher_fu_187_key_3_V_ce0);
    AES_ECB_encrypt_AXILiteS_s_axi_U->key_3_V_q0(key_3_V_q0);
    AES_ECB_encrypt_AXILiteS_s_axi_U->key_4_V_address0(grp_Cipher_fu_187_key_4_V_address0);
    AES_ECB_encrypt_AXILiteS_s_axi_U->key_4_V_ce0(grp_Cipher_fu_187_key_4_V_ce0);
    AES_ECB_encrypt_AXILiteS_s_axi_U->key_4_V_q0(key_4_V_q0);
    AES_ECB_encrypt_AXILiteS_s_axi_U->key_5_V_address0(grp_Cipher_fu_187_key_5_V_address0);
    AES_ECB_encrypt_AXILiteS_s_axi_U->key_5_V_ce0(grp_Cipher_fu_187_key_5_V_ce0);
    AES_ECB_encrypt_AXILiteS_s_axi_U->key_5_V_q0(key_5_V_q0);
    AES_ECB_encrypt_AXILiteS_s_axi_U->key_6_V_address0(grp_Cipher_fu_187_key_6_V_address0);
    AES_ECB_encrypt_AXILiteS_s_axi_U->key_6_V_ce0(grp_Cipher_fu_187_key_6_V_ce0);
    AES_ECB_encrypt_AXILiteS_s_axi_U->key_6_V_q0(key_6_V_q0);
    AES_ECB_encrypt_AXILiteS_s_axi_U->key_7_V_address0(grp_Cipher_fu_187_key_7_V_address0);
    AES_ECB_encrypt_AXILiteS_s_axi_U->key_7_V_ce0(grp_Cipher_fu_187_key_7_V_ce0);
    AES_ECB_encrypt_AXILiteS_s_axi_U->key_7_V_q0(key_7_V_q0);
    AES_ECB_encrypt_AXILiteS_s_axi_U->key_8_V_address0(grp_Cipher_fu_187_key_8_V_address0);
    AES_ECB_encrypt_AXILiteS_s_axi_U->key_8_V_ce0(grp_Cipher_fu_187_key_8_V_ce0);
    AES_ECB_encrypt_AXILiteS_s_axi_U->key_8_V_q0(key_8_V_q0);
    AES_ECB_encrypt_AXILiteS_s_axi_U->key_9_V_address0(grp_Cipher_fu_187_key_9_V_address0);
    AES_ECB_encrypt_AXILiteS_s_axi_U->key_9_V_ce0(grp_Cipher_fu_187_key_9_V_ce0);
    AES_ECB_encrypt_AXILiteS_s_axi_U->key_9_V_q0(key_9_V_q0);
    AES_ECB_encrypt_AXILiteS_s_axi_U->key_10_V_address0(grp_Cipher_fu_187_key_10_V_address0);
    AES_ECB_encrypt_AXILiteS_s_axi_U->key_10_V_ce0(grp_Cipher_fu_187_key_10_V_ce0);
    AES_ECB_encrypt_AXILiteS_s_axi_U->key_10_V_q0(key_10_V_q0);
    AES_ECB_encrypt_AXILiteS_s_axi_U->len(len);
    in_V_U = new AES_ECB_encrypt_ibkb("in_V_U");
    in_V_U->clk(ap_clk);
    in_V_U->reset(ap_rst_n_inv);
    in_V_U->address0(in_V_address0);
    in_V_U->ce0(in_V_ce0);
    in_V_U->we0(in_V_we0);
    in_V_U->d0(plain_V_V_0_data_out);
    in_V_U->q0(in_V_q0);
    out_U = new AES_ECB_encrypt_ibkb("out_U");
    out_U->clk(ap_clk);
    out_U->reset(ap_rst_n_inv);
    out_U->address0(out_address0);
    out_U->ce0(out_ce0);
    out_U->we0(out_we0);
    out_U->d0(grp_Cipher_fu_187_encrypt_V_d0);
    out_U->q0(out_q0);
    grp_Cipher_fu_187 = new Cipher("grp_Cipher_fu_187");
    grp_Cipher_fu_187->ap_clk(ap_clk);
    grp_Cipher_fu_187->ap_rst(ap_rst_n_inv);
    grp_Cipher_fu_187->plain_V_address0(grp_Cipher_fu_187_plain_V_address0);
    grp_Cipher_fu_187->plain_V_ce0(grp_Cipher_fu_187_plain_V_ce0);
    grp_Cipher_fu_187->plain_V_d0(grp_Cipher_fu_187_plain_V_d0);
    grp_Cipher_fu_187->plain_V_q0(in_V_q0);
    grp_Cipher_fu_187->plain_V_we0(grp_Cipher_fu_187_plain_V_we0);
    grp_Cipher_fu_187->plain_V_address1(grp_Cipher_fu_187_plain_V_address1);
    grp_Cipher_fu_187->plain_V_ce1(grp_Cipher_fu_187_plain_V_ce1);
    grp_Cipher_fu_187->plain_V_d1(grp_Cipher_fu_187_plain_V_d1);
    grp_Cipher_fu_187->plain_V_q1(ap_var_for_const1);
    grp_Cipher_fu_187->plain_V_we1(grp_Cipher_fu_187_plain_V_we1);
    grp_Cipher_fu_187->encrypt_V_address0(grp_Cipher_fu_187_encrypt_V_address0);
    grp_Cipher_fu_187->encrypt_V_ce0(grp_Cipher_fu_187_encrypt_V_ce0);
    grp_Cipher_fu_187->encrypt_V_d0(grp_Cipher_fu_187_encrypt_V_d0);
    grp_Cipher_fu_187->encrypt_V_q0(ap_var_for_const1);
    grp_Cipher_fu_187->encrypt_V_we0(grp_Cipher_fu_187_encrypt_V_we0);
    grp_Cipher_fu_187->encrypt_V_address1(grp_Cipher_fu_187_encrypt_V_address1);
    grp_Cipher_fu_187->encrypt_V_ce1(grp_Cipher_fu_187_encrypt_V_ce1);
    grp_Cipher_fu_187->encrypt_V_d1(grp_Cipher_fu_187_encrypt_V_d1);
    grp_Cipher_fu_187->encrypt_V_q1(ap_var_for_const1);
    grp_Cipher_fu_187->encrypt_V_we1(grp_Cipher_fu_187_encrypt_V_we1);
    grp_Cipher_fu_187->key_0_V_address0(grp_Cipher_fu_187_key_0_V_address0);
    grp_Cipher_fu_187->key_0_V_ce0(grp_Cipher_fu_187_key_0_V_ce0);
    grp_Cipher_fu_187->key_0_V_d0(grp_Cipher_fu_187_key_0_V_d0);
    grp_Cipher_fu_187->key_0_V_q0(key_0_V_q0);
    grp_Cipher_fu_187->key_0_V_we0(grp_Cipher_fu_187_key_0_V_we0);
    grp_Cipher_fu_187->key_1_V_address0(grp_Cipher_fu_187_key_1_V_address0);
    grp_Cipher_fu_187->key_1_V_ce0(grp_Cipher_fu_187_key_1_V_ce0);
    grp_Cipher_fu_187->key_1_V_d0(grp_Cipher_fu_187_key_1_V_d0);
    grp_Cipher_fu_187->key_1_V_q0(key_1_V_q0);
    grp_Cipher_fu_187->key_1_V_we0(grp_Cipher_fu_187_key_1_V_we0);
    grp_Cipher_fu_187->key_2_V_address0(grp_Cipher_fu_187_key_2_V_address0);
    grp_Cipher_fu_187->key_2_V_ce0(grp_Cipher_fu_187_key_2_V_ce0);
    grp_Cipher_fu_187->key_2_V_d0(grp_Cipher_fu_187_key_2_V_d0);
    grp_Cipher_fu_187->key_2_V_q0(key_2_V_q0);
    grp_Cipher_fu_187->key_2_V_we0(grp_Cipher_fu_187_key_2_V_we0);
    grp_Cipher_fu_187->key_3_V_address0(grp_Cipher_fu_187_key_3_V_address0);
    grp_Cipher_fu_187->key_3_V_ce0(grp_Cipher_fu_187_key_3_V_ce0);
    grp_Cipher_fu_187->key_3_V_d0(grp_Cipher_fu_187_key_3_V_d0);
    grp_Cipher_fu_187->key_3_V_q0(key_3_V_q0);
    grp_Cipher_fu_187->key_3_V_we0(grp_Cipher_fu_187_key_3_V_we0);
    grp_Cipher_fu_187->key_4_V_address0(grp_Cipher_fu_187_key_4_V_address0);
    grp_Cipher_fu_187->key_4_V_ce0(grp_Cipher_fu_187_key_4_V_ce0);
    grp_Cipher_fu_187->key_4_V_d0(grp_Cipher_fu_187_key_4_V_d0);
    grp_Cipher_fu_187->key_4_V_q0(key_4_V_q0);
    grp_Cipher_fu_187->key_4_V_we0(grp_Cipher_fu_187_key_4_V_we0);
    grp_Cipher_fu_187->key_5_V_address0(grp_Cipher_fu_187_key_5_V_address0);
    grp_Cipher_fu_187->key_5_V_ce0(grp_Cipher_fu_187_key_5_V_ce0);
    grp_Cipher_fu_187->key_5_V_d0(grp_Cipher_fu_187_key_5_V_d0);
    grp_Cipher_fu_187->key_5_V_q0(key_5_V_q0);
    grp_Cipher_fu_187->key_5_V_we0(grp_Cipher_fu_187_key_5_V_we0);
    grp_Cipher_fu_187->key_6_V_address0(grp_Cipher_fu_187_key_6_V_address0);
    grp_Cipher_fu_187->key_6_V_ce0(grp_Cipher_fu_187_key_6_V_ce0);
    grp_Cipher_fu_187->key_6_V_d0(grp_Cipher_fu_187_key_6_V_d0);
    grp_Cipher_fu_187->key_6_V_q0(key_6_V_q0);
    grp_Cipher_fu_187->key_6_V_we0(grp_Cipher_fu_187_key_6_V_we0);
    grp_Cipher_fu_187->key_7_V_address0(grp_Cipher_fu_187_key_7_V_address0);
    grp_Cipher_fu_187->key_7_V_ce0(grp_Cipher_fu_187_key_7_V_ce0);
    grp_Cipher_fu_187->key_7_V_d0(grp_Cipher_fu_187_key_7_V_d0);
    grp_Cipher_fu_187->key_7_V_q0(key_7_V_q0);
    grp_Cipher_fu_187->key_7_V_we0(grp_Cipher_fu_187_key_7_V_we0);
    grp_Cipher_fu_187->key_8_V_address0(grp_Cipher_fu_187_key_8_V_address0);
    grp_Cipher_fu_187->key_8_V_ce0(grp_Cipher_fu_187_key_8_V_ce0);
    grp_Cipher_fu_187->key_8_V_d0(grp_Cipher_fu_187_key_8_V_d0);
    grp_Cipher_fu_187->key_8_V_q0(key_8_V_q0);
    grp_Cipher_fu_187->key_8_V_we0(grp_Cipher_fu_187_key_8_V_we0);
    grp_Cipher_fu_187->key_9_V_address0(grp_Cipher_fu_187_key_9_V_address0);
    grp_Cipher_fu_187->key_9_V_ce0(grp_Cipher_fu_187_key_9_V_ce0);
    grp_Cipher_fu_187->key_9_V_d0(grp_Cipher_fu_187_key_9_V_d0);
    grp_Cipher_fu_187->key_9_V_q0(key_9_V_q0);
    grp_Cipher_fu_187->key_9_V_we0(grp_Cipher_fu_187_key_9_V_we0);
    grp_Cipher_fu_187->key_10_V_address0(grp_Cipher_fu_187_key_10_V_address0);
    grp_Cipher_fu_187->key_10_V_ce0(grp_Cipher_fu_187_key_10_V_ce0);
    grp_Cipher_fu_187->key_10_V_d0(grp_Cipher_fu_187_key_10_V_d0);
    grp_Cipher_fu_187->key_10_V_q0(key_10_V_q0);
    grp_Cipher_fu_187->key_10_V_we0(grp_Cipher_fu_187_key_10_V_we0);
    grp_Cipher_fu_187->ap_start(grp_Cipher_fu_187_ap_start);
    grp_Cipher_fu_187->ap_done(grp_Cipher_fu_187_ap_done);
    grp_Cipher_fu_187->ap_ready(grp_Cipher_fu_187_ap_ready);
    grp_Cipher_fu_187->ap_idle(grp_Cipher_fu_187_ap_idle);
    grp_Cipher_fu_187->ap_continue(grp_Cipher_fu_187_ap_continue);

    SC_METHOD(thread_ap_clk_no_reset_);
    dont_initialize();
    sensitive << ( ap_clk.pos() );

    SC_METHOD(thread_ap_CS_fsm_state1);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state2);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state3);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state4);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state5);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state6);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state7);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_block_state3);
    sensitive << ( plain_V_V_0_vld_out );
    sensitive << ( exitcond1_fu_240_p2 );

    SC_METHOD(thread_ap_block_state3_ignore_call0);
    sensitive << ( plain_V_V_0_vld_out );
    sensitive << ( exitcond1_fu_240_p2 );

    SC_METHOD(thread_ap_block_state4_on_subcall_done);
    sensitive << ( ap_sync_grp_Cipher_fu_187_ap_ready );
    sensitive << ( ap_sync_grp_Cipher_fu_187_ap_done );

    SC_METHOD(thread_ap_done);
    sensitive << ( encrypt_V_V_1_ack_in );
    sensitive << ( encrypt_V_V_1_state );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( tmp_fu_235_p2 );

    SC_METHOD(thread_ap_idle);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );

    SC_METHOD(thread_ap_ready);
    sensitive << ( encrypt_V_V_1_ack_in );
    sensitive << ( encrypt_V_V_1_state );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( tmp_fu_235_p2 );

    SC_METHOD(thread_ap_rst_n_inv);
    sensitive << ( ap_rst_n );

    SC_METHOD(thread_ap_sync_grp_Cipher_fu_187_ap_done);
    sensitive << ( grp_Cipher_fu_187_ap_done );
    sensitive << ( ap_sync_reg_grp_Cipher_fu_187_ap_done );

    SC_METHOD(thread_ap_sync_grp_Cipher_fu_187_ap_ready);
    sensitive << ( grp_Cipher_fu_187_ap_ready );
    sensitive << ( ap_sync_reg_grp_Cipher_fu_187_ap_ready );

    SC_METHOD(thread_encrypt_V_V_1_ack_in);
    sensitive << ( encrypt_V_V_1_state );

    SC_METHOD(thread_encrypt_V_V_1_ack_out);
    sensitive << ( encrypt_V_V_TREADY );

    SC_METHOD(thread_encrypt_V_V_1_data_out);
    sensitive << ( encrypt_V_V_1_payload_A );
    sensitive << ( encrypt_V_V_1_payload_B );
    sensitive << ( encrypt_V_V_1_sel );

    SC_METHOD(thread_encrypt_V_V_1_load_A);
    sensitive << ( encrypt_V_V_1_sel_wr );
    sensitive << ( encrypt_V_V_1_state_cmp_full );

    SC_METHOD(thread_encrypt_V_V_1_load_B);
    sensitive << ( encrypt_V_V_1_sel_wr );
    sensitive << ( encrypt_V_V_1_state_cmp_full );

    SC_METHOD(thread_encrypt_V_V_1_sel);
    sensitive << ( encrypt_V_V_1_sel_rd );

    SC_METHOD(thread_encrypt_V_V_1_state_cmp_full);
    sensitive << ( encrypt_V_V_1_state );

    SC_METHOD(thread_encrypt_V_V_1_vld_in);
    sensitive << ( encrypt_V_V_1_ack_in );
    sensitive << ( ap_CS_fsm_state6 );

    SC_METHOD(thread_encrypt_V_V_1_vld_out);
    sensitive << ( encrypt_V_V_1_state );

    SC_METHOD(thread_encrypt_V_V_TDATA);
    sensitive << ( encrypt_V_V_1_data_out );

    SC_METHOD(thread_encrypt_V_V_TDATA_blk_n);
    sensitive << ( encrypt_V_V_1_state );
    sensitive << ( ap_CS_fsm_state6 );
    sensitive << ( ap_CS_fsm_state7 );

    SC_METHOD(thread_encrypt_V_V_TVALID);
    sensitive << ( encrypt_V_V_1_state );

    SC_METHOD(thread_exitcond1_fu_240_p2);
    sensitive << ( plain_V_V_0_vld_out );
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( exitcond1_fu_240_p2 );
    sensitive << ( j_reg_165 );

    SC_METHOD(thread_exitcond_fu_257_p2);
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( j2_reg_176 );

    SC_METHOD(thread_grp_Cipher_fu_187_ap_continue);
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( ap_block_state4_on_subcall_done );

    SC_METHOD(thread_grp_Cipher_fu_187_ap_start);
    sensitive << ( grp_Cipher_fu_187_ap_start_reg );

    SC_METHOD(thread_i_1_fu_274_p2);
    sensitive << ( i_reg_153 );

    SC_METHOD(thread_in_V_address0);
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( exitcond1_fu_240_p2 );
    sensitive << ( grp_Cipher_fu_187_plain_V_address0 );
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( tmp_s_fu_252_p1 );

    SC_METHOD(thread_in_V_ce0);
    sensitive << ( plain_V_V_0_vld_out );
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( exitcond1_fu_240_p2 );
    sensitive << ( grp_Cipher_fu_187_plain_V_ce0 );
    sensitive << ( ap_CS_fsm_state4 );

    SC_METHOD(thread_in_V_we0);
    sensitive << ( plain_V_V_0_vld_out );
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( exitcond1_fu_240_p2 );

    SC_METHOD(thread_j_1_fu_246_p2);
    sensitive << ( j_reg_165 );

    SC_METHOD(thread_j_2_fu_263_p2);
    sensitive << ( j2_reg_176 );

    SC_METHOD(thread_out_address0);
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( grp_Cipher_fu_187_encrypt_V_address0 );
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( tmp_3_fu_269_p1 );

    SC_METHOD(thread_out_ce0);
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( grp_Cipher_fu_187_encrypt_V_ce0 );
    sensitive << ( ap_CS_fsm_state4 );

    SC_METHOD(thread_out_we0);
    sensitive << ( grp_Cipher_fu_187_encrypt_V_we0 );
    sensitive << ( ap_CS_fsm_state4 );

    SC_METHOD(thread_plain_V_V_0_ack_in);
    sensitive << ( plain_V_V_0_state );

    SC_METHOD(thread_plain_V_V_0_ack_out);
    sensitive << ( plain_V_V_0_vld_out );
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( exitcond1_fu_240_p2 );

    SC_METHOD(thread_plain_V_V_0_data_out);
    sensitive << ( plain_V_V_0_payload_A );
    sensitive << ( plain_V_V_0_payload_B );
    sensitive << ( plain_V_V_0_sel );

    SC_METHOD(thread_plain_V_V_0_load_A);
    sensitive << ( plain_V_V_0_sel_wr );
    sensitive << ( plain_V_V_0_state_cmp_full );

    SC_METHOD(thread_plain_V_V_0_load_B);
    sensitive << ( plain_V_V_0_sel_wr );
    sensitive << ( plain_V_V_0_state_cmp_full );

    SC_METHOD(thread_plain_V_V_0_sel);
    sensitive << ( plain_V_V_0_sel_rd );

    SC_METHOD(thread_plain_V_V_0_state_cmp_full);
    sensitive << ( plain_V_V_0_state );

    SC_METHOD(thread_plain_V_V_0_vld_in);
    sensitive << ( plain_V_V_TVALID );

    SC_METHOD(thread_plain_V_V_0_vld_out);
    sensitive << ( plain_V_V_0_state );

    SC_METHOD(thread_plain_V_V_TDATA_blk_n);
    sensitive << ( plain_V_V_0_state );
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( exitcond1_fu_240_p2 );

    SC_METHOD(thread_plain_V_V_TREADY);
    sensitive << ( plain_V_V_0_state );

    SC_METHOD(thread_tmp_3_fu_269_p1);
    sensitive << ( j2_reg_176 );

    SC_METHOD(thread_tmp_fu_235_p2);
    sensitive << ( encrypt_V_V_1_ack_in );
    sensitive << ( len_read_reg_280 );
    sensitive << ( i_reg_153 );
    sensitive << ( ap_CS_fsm_state2 );

    SC_METHOD(thread_tmp_s_fu_252_p1);
    sensitive << ( j_reg_165 );

    SC_METHOD(thread_ap_NS_fsm);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( plain_V_V_0_vld_out );
    sensitive << ( encrypt_V_V_1_ack_in );
    sensitive << ( encrypt_V_V_1_state );
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( exitcond1_fu_240_p2 );
    sensitive << ( ap_CS_fsm_state6 );
    sensitive << ( ap_CS_fsm_state7 );
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( exitcond_fu_257_p2 );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( tmp_fu_235_p2 );
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( ap_block_state4_on_subcall_done );

    SC_THREAD(thread_hdltv_gen);
    sensitive << ( ap_clk.pos() );

    SC_THREAD(thread_ap_var_for_const0);

    SC_THREAD(thread_ap_var_for_const1);

    ap_CS_fsm = "0000001";
    plain_V_V_0_sel_rd = SC_LOGIC_0;
    plain_V_V_0_sel_wr = SC_LOGIC_0;
    plain_V_V_0_state = "00";
    encrypt_V_V_1_sel_rd = SC_LOGIC_0;
    encrypt_V_V_1_sel_wr = SC_LOGIC_0;
    encrypt_V_V_1_state = "00";
    grp_Cipher_fu_187_ap_start_reg = SC_LOGIC_0;
    ap_sync_reg_grp_Cipher_fu_187_ap_ready = SC_LOGIC_0;
    ap_sync_reg_grp_Cipher_fu_187_ap_done = SC_LOGIC_0;
    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "AES_ECB_encrypt_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT__
    sc_trace(mVcdFile, ap_clk, "(port)ap_clk");
    sc_trace(mVcdFile, ap_rst_n, "(port)ap_rst_n");
    sc_trace(mVcdFile, plain_V_V_TDATA, "(port)plain_V_V_TDATA");
    sc_trace(mVcdFile, plain_V_V_TVALID, "(port)plain_V_V_TVALID");
    sc_trace(mVcdFile, plain_V_V_TREADY, "(port)plain_V_V_TREADY");
    sc_trace(mVcdFile, encrypt_V_V_TDATA, "(port)encrypt_V_V_TDATA");
    sc_trace(mVcdFile, encrypt_V_V_TVALID, "(port)encrypt_V_V_TVALID");
    sc_trace(mVcdFile, encrypt_V_V_TREADY, "(port)encrypt_V_V_TREADY");
    sc_trace(mVcdFile, s_axi_AXILiteS_AWVALID, "(port)s_axi_AXILiteS_AWVALID");
    sc_trace(mVcdFile, s_axi_AXILiteS_AWREADY, "(port)s_axi_AXILiteS_AWREADY");
    sc_trace(mVcdFile, s_axi_AXILiteS_AWADDR, "(port)s_axi_AXILiteS_AWADDR");
    sc_trace(mVcdFile, s_axi_AXILiteS_WVALID, "(port)s_axi_AXILiteS_WVALID");
    sc_trace(mVcdFile, s_axi_AXILiteS_WREADY, "(port)s_axi_AXILiteS_WREADY");
    sc_trace(mVcdFile, s_axi_AXILiteS_WDATA, "(port)s_axi_AXILiteS_WDATA");
    sc_trace(mVcdFile, s_axi_AXILiteS_WSTRB, "(port)s_axi_AXILiteS_WSTRB");
    sc_trace(mVcdFile, s_axi_AXILiteS_ARVALID, "(port)s_axi_AXILiteS_ARVALID");
    sc_trace(mVcdFile, s_axi_AXILiteS_ARREADY, "(port)s_axi_AXILiteS_ARREADY");
    sc_trace(mVcdFile, s_axi_AXILiteS_ARADDR, "(port)s_axi_AXILiteS_ARADDR");
    sc_trace(mVcdFile, s_axi_AXILiteS_RVALID, "(port)s_axi_AXILiteS_RVALID");
    sc_trace(mVcdFile, s_axi_AXILiteS_RREADY, "(port)s_axi_AXILiteS_RREADY");
    sc_trace(mVcdFile, s_axi_AXILiteS_RDATA, "(port)s_axi_AXILiteS_RDATA");
    sc_trace(mVcdFile, s_axi_AXILiteS_RRESP, "(port)s_axi_AXILiteS_RRESP");
    sc_trace(mVcdFile, s_axi_AXILiteS_BVALID, "(port)s_axi_AXILiteS_BVALID");
    sc_trace(mVcdFile, s_axi_AXILiteS_BREADY, "(port)s_axi_AXILiteS_BREADY");
    sc_trace(mVcdFile, s_axi_AXILiteS_BRESP, "(port)s_axi_AXILiteS_BRESP");
    sc_trace(mVcdFile, interrupt, "(port)interrupt");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, ap_rst_n_inv, "ap_rst_n_inv");
    sc_trace(mVcdFile, ap_start, "ap_start");
    sc_trace(mVcdFile, ap_done, "ap_done");
    sc_trace(mVcdFile, ap_idle, "ap_idle");
    sc_trace(mVcdFile, ap_CS_fsm, "ap_CS_fsm");
    sc_trace(mVcdFile, ap_CS_fsm_state1, "ap_CS_fsm_state1");
    sc_trace(mVcdFile, ap_ready, "ap_ready");
    sc_trace(mVcdFile, plain_V_V_0_data_out, "plain_V_V_0_data_out");
    sc_trace(mVcdFile, plain_V_V_0_vld_in, "plain_V_V_0_vld_in");
    sc_trace(mVcdFile, plain_V_V_0_vld_out, "plain_V_V_0_vld_out");
    sc_trace(mVcdFile, plain_V_V_0_ack_in, "plain_V_V_0_ack_in");
    sc_trace(mVcdFile, plain_V_V_0_ack_out, "plain_V_V_0_ack_out");
    sc_trace(mVcdFile, plain_V_V_0_payload_A, "plain_V_V_0_payload_A");
    sc_trace(mVcdFile, plain_V_V_0_payload_B, "plain_V_V_0_payload_B");
    sc_trace(mVcdFile, plain_V_V_0_sel_rd, "plain_V_V_0_sel_rd");
    sc_trace(mVcdFile, plain_V_V_0_sel_wr, "plain_V_V_0_sel_wr");
    sc_trace(mVcdFile, plain_V_V_0_sel, "plain_V_V_0_sel");
    sc_trace(mVcdFile, plain_V_V_0_load_A, "plain_V_V_0_load_A");
    sc_trace(mVcdFile, plain_V_V_0_load_B, "plain_V_V_0_load_B");
    sc_trace(mVcdFile, plain_V_V_0_state, "plain_V_V_0_state");
    sc_trace(mVcdFile, plain_V_V_0_state_cmp_full, "plain_V_V_0_state_cmp_full");
    sc_trace(mVcdFile, encrypt_V_V_1_data_out, "encrypt_V_V_1_data_out");
    sc_trace(mVcdFile, encrypt_V_V_1_vld_in, "encrypt_V_V_1_vld_in");
    sc_trace(mVcdFile, encrypt_V_V_1_vld_out, "encrypt_V_V_1_vld_out");
    sc_trace(mVcdFile, encrypt_V_V_1_ack_in, "encrypt_V_V_1_ack_in");
    sc_trace(mVcdFile, encrypt_V_V_1_ack_out, "encrypt_V_V_1_ack_out");
    sc_trace(mVcdFile, encrypt_V_V_1_payload_A, "encrypt_V_V_1_payload_A");
    sc_trace(mVcdFile, encrypt_V_V_1_payload_B, "encrypt_V_V_1_payload_B");
    sc_trace(mVcdFile, encrypt_V_V_1_sel_rd, "encrypt_V_V_1_sel_rd");
    sc_trace(mVcdFile, encrypt_V_V_1_sel_wr, "encrypt_V_V_1_sel_wr");
    sc_trace(mVcdFile, encrypt_V_V_1_sel, "encrypt_V_V_1_sel");
    sc_trace(mVcdFile, encrypt_V_V_1_load_A, "encrypt_V_V_1_load_A");
    sc_trace(mVcdFile, encrypt_V_V_1_load_B, "encrypt_V_V_1_load_B");
    sc_trace(mVcdFile, encrypt_V_V_1_state, "encrypt_V_V_1_state");
    sc_trace(mVcdFile, encrypt_V_V_1_state_cmp_full, "encrypt_V_V_1_state_cmp_full");
    sc_trace(mVcdFile, key_0_V_q0, "key_0_V_q0");
    sc_trace(mVcdFile, key_1_V_q0, "key_1_V_q0");
    sc_trace(mVcdFile, key_2_V_q0, "key_2_V_q0");
    sc_trace(mVcdFile, key_3_V_q0, "key_3_V_q0");
    sc_trace(mVcdFile, key_4_V_q0, "key_4_V_q0");
    sc_trace(mVcdFile, key_5_V_q0, "key_5_V_q0");
    sc_trace(mVcdFile, key_6_V_q0, "key_6_V_q0");
    sc_trace(mVcdFile, key_7_V_q0, "key_7_V_q0");
    sc_trace(mVcdFile, key_8_V_q0, "key_8_V_q0");
    sc_trace(mVcdFile, key_9_V_q0, "key_9_V_q0");
    sc_trace(mVcdFile, key_10_V_q0, "key_10_V_q0");
    sc_trace(mVcdFile, len, "len");
    sc_trace(mVcdFile, plain_V_V_TDATA_blk_n, "plain_V_V_TDATA_blk_n");
    sc_trace(mVcdFile, ap_CS_fsm_state3, "ap_CS_fsm_state3");
    sc_trace(mVcdFile, exitcond1_fu_240_p2, "exitcond1_fu_240_p2");
    sc_trace(mVcdFile, encrypt_V_V_TDATA_blk_n, "encrypt_V_V_TDATA_blk_n");
    sc_trace(mVcdFile, ap_CS_fsm_state6, "ap_CS_fsm_state6");
    sc_trace(mVcdFile, ap_CS_fsm_state7, "ap_CS_fsm_state7");
    sc_trace(mVcdFile, len_read_reg_280, "len_read_reg_280");
    sc_trace(mVcdFile, j_1_fu_246_p2, "j_1_fu_246_p2");
    sc_trace(mVcdFile, ap_block_state3, "ap_block_state3");
    sc_trace(mVcdFile, j_2_fu_263_p2, "j_2_fu_263_p2");
    sc_trace(mVcdFile, j_2_reg_299, "j_2_reg_299");
    sc_trace(mVcdFile, ap_CS_fsm_state5, "ap_CS_fsm_state5");
    sc_trace(mVcdFile, exitcond_fu_257_p2, "exitcond_fu_257_p2");
    sc_trace(mVcdFile, i_1_fu_274_p2, "i_1_fu_274_p2");
    sc_trace(mVcdFile, out_q0, "out_q0");
    sc_trace(mVcdFile, in_V_address0, "in_V_address0");
    sc_trace(mVcdFile, in_V_ce0, "in_V_ce0");
    sc_trace(mVcdFile, in_V_we0, "in_V_we0");
    sc_trace(mVcdFile, in_V_q0, "in_V_q0");
    sc_trace(mVcdFile, out_address0, "out_address0");
    sc_trace(mVcdFile, out_ce0, "out_ce0");
    sc_trace(mVcdFile, out_we0, "out_we0");
    sc_trace(mVcdFile, grp_Cipher_fu_187_plain_V_address0, "grp_Cipher_fu_187_plain_V_address0");
    sc_trace(mVcdFile, grp_Cipher_fu_187_plain_V_ce0, "grp_Cipher_fu_187_plain_V_ce0");
    sc_trace(mVcdFile, grp_Cipher_fu_187_plain_V_d0, "grp_Cipher_fu_187_plain_V_d0");
    sc_trace(mVcdFile, grp_Cipher_fu_187_plain_V_we0, "grp_Cipher_fu_187_plain_V_we0");
    sc_trace(mVcdFile, grp_Cipher_fu_187_plain_V_address1, "grp_Cipher_fu_187_plain_V_address1");
    sc_trace(mVcdFile, grp_Cipher_fu_187_plain_V_ce1, "grp_Cipher_fu_187_plain_V_ce1");
    sc_trace(mVcdFile, grp_Cipher_fu_187_plain_V_d1, "grp_Cipher_fu_187_plain_V_d1");
    sc_trace(mVcdFile, grp_Cipher_fu_187_plain_V_we1, "grp_Cipher_fu_187_plain_V_we1");
    sc_trace(mVcdFile, grp_Cipher_fu_187_encrypt_V_address0, "grp_Cipher_fu_187_encrypt_V_address0");
    sc_trace(mVcdFile, grp_Cipher_fu_187_encrypt_V_ce0, "grp_Cipher_fu_187_encrypt_V_ce0");
    sc_trace(mVcdFile, grp_Cipher_fu_187_encrypt_V_d0, "grp_Cipher_fu_187_encrypt_V_d0");
    sc_trace(mVcdFile, grp_Cipher_fu_187_encrypt_V_we0, "grp_Cipher_fu_187_encrypt_V_we0");
    sc_trace(mVcdFile, grp_Cipher_fu_187_encrypt_V_address1, "grp_Cipher_fu_187_encrypt_V_address1");
    sc_trace(mVcdFile, grp_Cipher_fu_187_encrypt_V_ce1, "grp_Cipher_fu_187_encrypt_V_ce1");
    sc_trace(mVcdFile, grp_Cipher_fu_187_encrypt_V_d1, "grp_Cipher_fu_187_encrypt_V_d1");
    sc_trace(mVcdFile, grp_Cipher_fu_187_encrypt_V_we1, "grp_Cipher_fu_187_encrypt_V_we1");
    sc_trace(mVcdFile, grp_Cipher_fu_187_key_0_V_address0, "grp_Cipher_fu_187_key_0_V_address0");
    sc_trace(mVcdFile, grp_Cipher_fu_187_key_0_V_ce0, "grp_Cipher_fu_187_key_0_V_ce0");
    sc_trace(mVcdFile, grp_Cipher_fu_187_key_0_V_d0, "grp_Cipher_fu_187_key_0_V_d0");
    sc_trace(mVcdFile, grp_Cipher_fu_187_key_0_V_we0, "grp_Cipher_fu_187_key_0_V_we0");
    sc_trace(mVcdFile, grp_Cipher_fu_187_key_1_V_address0, "grp_Cipher_fu_187_key_1_V_address0");
    sc_trace(mVcdFile, grp_Cipher_fu_187_key_1_V_ce0, "grp_Cipher_fu_187_key_1_V_ce0");
    sc_trace(mVcdFile, grp_Cipher_fu_187_key_1_V_d0, "grp_Cipher_fu_187_key_1_V_d0");
    sc_trace(mVcdFile, grp_Cipher_fu_187_key_1_V_we0, "grp_Cipher_fu_187_key_1_V_we0");
    sc_trace(mVcdFile, grp_Cipher_fu_187_key_2_V_address0, "grp_Cipher_fu_187_key_2_V_address0");
    sc_trace(mVcdFile, grp_Cipher_fu_187_key_2_V_ce0, "grp_Cipher_fu_187_key_2_V_ce0");
    sc_trace(mVcdFile, grp_Cipher_fu_187_key_2_V_d0, "grp_Cipher_fu_187_key_2_V_d0");
    sc_trace(mVcdFile, grp_Cipher_fu_187_key_2_V_we0, "grp_Cipher_fu_187_key_2_V_we0");
    sc_trace(mVcdFile, grp_Cipher_fu_187_key_3_V_address0, "grp_Cipher_fu_187_key_3_V_address0");
    sc_trace(mVcdFile, grp_Cipher_fu_187_key_3_V_ce0, "grp_Cipher_fu_187_key_3_V_ce0");
    sc_trace(mVcdFile, grp_Cipher_fu_187_key_3_V_d0, "grp_Cipher_fu_187_key_3_V_d0");
    sc_trace(mVcdFile, grp_Cipher_fu_187_key_3_V_we0, "grp_Cipher_fu_187_key_3_V_we0");
    sc_trace(mVcdFile, grp_Cipher_fu_187_key_4_V_address0, "grp_Cipher_fu_187_key_4_V_address0");
    sc_trace(mVcdFile, grp_Cipher_fu_187_key_4_V_ce0, "grp_Cipher_fu_187_key_4_V_ce0");
    sc_trace(mVcdFile, grp_Cipher_fu_187_key_4_V_d0, "grp_Cipher_fu_187_key_4_V_d0");
    sc_trace(mVcdFile, grp_Cipher_fu_187_key_4_V_we0, "grp_Cipher_fu_187_key_4_V_we0");
    sc_trace(mVcdFile, grp_Cipher_fu_187_key_5_V_address0, "grp_Cipher_fu_187_key_5_V_address0");
    sc_trace(mVcdFile, grp_Cipher_fu_187_key_5_V_ce0, "grp_Cipher_fu_187_key_5_V_ce0");
    sc_trace(mVcdFile, grp_Cipher_fu_187_key_5_V_d0, "grp_Cipher_fu_187_key_5_V_d0");
    sc_trace(mVcdFile, grp_Cipher_fu_187_key_5_V_we0, "grp_Cipher_fu_187_key_5_V_we0");
    sc_trace(mVcdFile, grp_Cipher_fu_187_key_6_V_address0, "grp_Cipher_fu_187_key_6_V_address0");
    sc_trace(mVcdFile, grp_Cipher_fu_187_key_6_V_ce0, "grp_Cipher_fu_187_key_6_V_ce0");
    sc_trace(mVcdFile, grp_Cipher_fu_187_key_6_V_d0, "grp_Cipher_fu_187_key_6_V_d0");
    sc_trace(mVcdFile, grp_Cipher_fu_187_key_6_V_we0, "grp_Cipher_fu_187_key_6_V_we0");
    sc_trace(mVcdFile, grp_Cipher_fu_187_key_7_V_address0, "grp_Cipher_fu_187_key_7_V_address0");
    sc_trace(mVcdFile, grp_Cipher_fu_187_key_7_V_ce0, "grp_Cipher_fu_187_key_7_V_ce0");
    sc_trace(mVcdFile, grp_Cipher_fu_187_key_7_V_d0, "grp_Cipher_fu_187_key_7_V_d0");
    sc_trace(mVcdFile, grp_Cipher_fu_187_key_7_V_we0, "grp_Cipher_fu_187_key_7_V_we0");
    sc_trace(mVcdFile, grp_Cipher_fu_187_key_8_V_address0, "grp_Cipher_fu_187_key_8_V_address0");
    sc_trace(mVcdFile, grp_Cipher_fu_187_key_8_V_ce0, "grp_Cipher_fu_187_key_8_V_ce0");
    sc_trace(mVcdFile, grp_Cipher_fu_187_key_8_V_d0, "grp_Cipher_fu_187_key_8_V_d0");
    sc_trace(mVcdFile, grp_Cipher_fu_187_key_8_V_we0, "grp_Cipher_fu_187_key_8_V_we0");
    sc_trace(mVcdFile, grp_Cipher_fu_187_key_9_V_address0, "grp_Cipher_fu_187_key_9_V_address0");
    sc_trace(mVcdFile, grp_Cipher_fu_187_key_9_V_ce0, "grp_Cipher_fu_187_key_9_V_ce0");
    sc_trace(mVcdFile, grp_Cipher_fu_187_key_9_V_d0, "grp_Cipher_fu_187_key_9_V_d0");
    sc_trace(mVcdFile, grp_Cipher_fu_187_key_9_V_we0, "grp_Cipher_fu_187_key_9_V_we0");
    sc_trace(mVcdFile, grp_Cipher_fu_187_key_10_V_address0, "grp_Cipher_fu_187_key_10_V_address0");
    sc_trace(mVcdFile, grp_Cipher_fu_187_key_10_V_ce0, "grp_Cipher_fu_187_key_10_V_ce0");
    sc_trace(mVcdFile, grp_Cipher_fu_187_key_10_V_d0, "grp_Cipher_fu_187_key_10_V_d0");
    sc_trace(mVcdFile, grp_Cipher_fu_187_key_10_V_we0, "grp_Cipher_fu_187_key_10_V_we0");
    sc_trace(mVcdFile, grp_Cipher_fu_187_ap_start, "grp_Cipher_fu_187_ap_start");
    sc_trace(mVcdFile, grp_Cipher_fu_187_ap_done, "grp_Cipher_fu_187_ap_done");
    sc_trace(mVcdFile, grp_Cipher_fu_187_ap_ready, "grp_Cipher_fu_187_ap_ready");
    sc_trace(mVcdFile, grp_Cipher_fu_187_ap_idle, "grp_Cipher_fu_187_ap_idle");
    sc_trace(mVcdFile, grp_Cipher_fu_187_ap_continue, "grp_Cipher_fu_187_ap_continue");
    sc_trace(mVcdFile, i_reg_153, "i_reg_153");
    sc_trace(mVcdFile, j_reg_165, "j_reg_165");
    sc_trace(mVcdFile, ap_CS_fsm_state2, "ap_CS_fsm_state2");
    sc_trace(mVcdFile, tmp_fu_235_p2, "tmp_fu_235_p2");
    sc_trace(mVcdFile, j2_reg_176, "j2_reg_176");
    sc_trace(mVcdFile, ap_CS_fsm_state4, "ap_CS_fsm_state4");
    sc_trace(mVcdFile, ap_sync_grp_Cipher_fu_187_ap_ready, "ap_sync_grp_Cipher_fu_187_ap_ready");
    sc_trace(mVcdFile, ap_sync_grp_Cipher_fu_187_ap_done, "ap_sync_grp_Cipher_fu_187_ap_done");
    sc_trace(mVcdFile, ap_block_state4_on_subcall_done, "ap_block_state4_on_subcall_done");
    sc_trace(mVcdFile, grp_Cipher_fu_187_ap_start_reg, "grp_Cipher_fu_187_ap_start_reg");
    sc_trace(mVcdFile, ap_block_state3_ignore_call0, "ap_block_state3_ignore_call0");
    sc_trace(mVcdFile, ap_sync_reg_grp_Cipher_fu_187_ap_ready, "ap_sync_reg_grp_Cipher_fu_187_ap_ready");
    sc_trace(mVcdFile, ap_sync_reg_grp_Cipher_fu_187_ap_done, "ap_sync_reg_grp_Cipher_fu_187_ap_done");
    sc_trace(mVcdFile, tmp_s_fu_252_p1, "tmp_s_fu_252_p1");
    sc_trace(mVcdFile, tmp_3_fu_269_p1, "tmp_3_fu_269_p1");
    sc_trace(mVcdFile, ap_NS_fsm, "ap_NS_fsm");
#endif

    }
    mHdltvinHandle.open("AES_ECB_encrypt.hdltvin.dat");
    mHdltvoutHandle.open("AES_ECB_encrypt.hdltvout.dat");
}

AES_ECB_encrypt::~AES_ECB_encrypt() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

    mHdltvinHandle << "] " << endl;
    mHdltvoutHandle << "] " << endl;
    mHdltvinHandle.close();
    mHdltvoutHandle.close();
    delete AES_ECB_encrypt_AXILiteS_s_axi_U;
    delete in_V_U;
    delete out_U;
    delete grp_Cipher_fu_187;
}

void AES_ECB_encrypt::thread_ap_var_for_const0() {
    ap_var_for_const0 = ap_const_logic_1;
}

void AES_ECB_encrypt::thread_ap_var_for_const1() {
    ap_var_for_const1 = ap_const_lv8_0;
}

void AES_ECB_encrypt::thread_ap_clk_no_reset_() {
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        ap_CS_fsm = ap_ST_fsm_state1;
    } else {
        ap_CS_fsm = ap_NS_fsm.read();
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        ap_sync_reg_grp_Cipher_fu_187_ap_done = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) && 
             esl_seteq<1,1,1>(ap_block_state4_on_subcall_done.read(), ap_const_boolean_0))) {
            ap_sync_reg_grp_Cipher_fu_187_ap_done = ap_const_logic_0;
        } else if (esl_seteq<1,1,1>(ap_const_logic_1, grp_Cipher_fu_187_ap_done.read())) {
            ap_sync_reg_grp_Cipher_fu_187_ap_done = ap_const_logic_1;
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        ap_sync_reg_grp_Cipher_fu_187_ap_ready = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) && 
             esl_seteq<1,1,1>(ap_block_state4_on_subcall_done.read(), ap_const_boolean_0))) {
            ap_sync_reg_grp_Cipher_fu_187_ap_ready = ap_const_logic_0;
        } else if (esl_seteq<1,1,1>(ap_const_logic_1, grp_Cipher_fu_187_ap_ready.read())) {
            ap_sync_reg_grp_Cipher_fu_187_ap_ready = ap_const_logic_1;
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        encrypt_V_V_1_sel_rd = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, encrypt_V_V_1_ack_out.read()) && 
             esl_seteq<1,1,1>(ap_const_logic_1, encrypt_V_V_1_vld_out.read()))) {
            encrypt_V_V_1_sel_rd =  (sc_logic) (~encrypt_V_V_1_sel_rd.read());
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        encrypt_V_V_1_sel_wr = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, encrypt_V_V_1_vld_in.read()) && 
             esl_seteq<1,1,1>(ap_const_logic_1, encrypt_V_V_1_ack_in.read()))) {
            encrypt_V_V_1_sel_wr =  (sc_logic) (~encrypt_V_V_1_sel_wr.read());
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        encrypt_V_V_1_state = ap_const_lv2_0;
    } else {
        if (((esl_seteq<1,1,1>(ap_const_logic_0, encrypt_V_V_1_vld_in.read()) && 
              esl_seteq<1,1,1>(ap_const_logic_1, encrypt_V_V_1_ack_out.read()) && 
              esl_seteq<1,2,2>(ap_const_lv2_3, encrypt_V_V_1_state.read())) || 
             (esl_seteq<1,1,1>(ap_const_logic_0, encrypt_V_V_1_vld_in.read()) && 
              esl_seteq<1,2,2>(ap_const_lv2_2, encrypt_V_V_1_state.read())))) {
            encrypt_V_V_1_state = ap_const_lv2_2;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, encrypt_V_V_1_vld_in.read()) && 
                     esl_seteq<1,1,1>(ap_const_logic_0, encrypt_V_V_1_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_3, encrypt_V_V_1_state.read())) || 
                    (esl_seteq<1,1,1>(ap_const_logic_0, encrypt_V_V_1_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_1, encrypt_V_V_1_state.read())))) {
            encrypt_V_V_1_state = ap_const_lv2_1;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, encrypt_V_V_1_vld_in.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_2, encrypt_V_V_1_state.read())) || 
                    (esl_seteq<1,1,1>(ap_const_logic_1, encrypt_V_V_1_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_1, encrypt_V_V_1_state.read())) || 
                    (esl_seteq<1,2,2>(ap_const_lv2_3, encrypt_V_V_1_state.read()) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_1, encrypt_V_V_1_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_0, encrypt_V_V_1_ack_out.read())) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_0, encrypt_V_V_1_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_1, encrypt_V_V_1_ack_out.read()))))) {
            encrypt_V_V_1_state = ap_const_lv2_3;
        } else {
            encrypt_V_V_1_state = ap_const_lv2_2;
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        grp_Cipher_fu_187_ap_start_reg = ap_const_logic_0;
    } else {
        if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && 
              !(esl_seteq<1,1,1>(ap_const_lv1_0, exitcond1_fu_240_p2.read()) && esl_seteq<1,1,1>(ap_const_logic_0, plain_V_V_0_vld_out.read())) && 
              esl_seteq<1,1,1>(ap_const_lv1_1, exitcond1_fu_240_p2.read())) || 
             (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) && 
              esl_seteq<1,1,1>(ap_const_logic_0, ap_sync_grp_Cipher_fu_187_ap_ready.read())))) {
            grp_Cipher_fu_187_ap_start_reg = ap_const_logic_1;
        } else if (esl_seteq<1,1,1>(ap_const_logic_1, grp_Cipher_fu_187_ap_ready.read())) {
            grp_Cipher_fu_187_ap_start_reg = ap_const_logic_0;
        }
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_1, exitcond_fu_257_p2.read()))) {
        i_reg_153 = i_1_fu_274_p2.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
                esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
        i_reg_153 = ap_const_lv32_0;
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read()) && 
         esl_seteq<1,1,1>(encrypt_V_V_1_ack_in.read(), ap_const_logic_1))) {
        j2_reg_176 = j_2_reg_299.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) && 
                esl_seteq<1,1,1>(ap_block_state4_on_subcall_done.read(), ap_const_boolean_0))) {
        j2_reg_176 = ap_const_lv5_0;
    }
    if ((esl_seteq<1,1,1>(encrypt_V_V_1_ack_in.read(), ap_const_logic_1) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_1, tmp_fu_235_p2.read()))) {
        j_reg_165 = ap_const_lv5_0;
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && 
                esl_seteq<1,1,1>(ap_const_lv1_0, exitcond1_fu_240_p2.read()) && 
                !(esl_seteq<1,1,1>(ap_const_lv1_0, exitcond1_fu_240_p2.read()) && esl_seteq<1,1,1>(ap_const_logic_0, plain_V_V_0_vld_out.read())))) {
        j_reg_165 = j_1_fu_246_p2.read();
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        plain_V_V_0_sel_rd = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, plain_V_V_0_ack_out.read()) && 
             esl_seteq<1,1,1>(ap_const_logic_1, plain_V_V_0_vld_out.read()))) {
            plain_V_V_0_sel_rd =  (sc_logic) (~plain_V_V_0_sel_rd.read());
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        plain_V_V_0_sel_wr = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, plain_V_V_0_vld_in.read()) && 
             esl_seteq<1,1,1>(ap_const_logic_1, plain_V_V_0_ack_in.read()))) {
            plain_V_V_0_sel_wr =  (sc_logic) (~plain_V_V_0_sel_wr.read());
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        plain_V_V_0_state = ap_const_lv2_0;
    } else {
        if (((esl_seteq<1,1,1>(ap_const_logic_0, plain_V_V_0_vld_in.read()) && 
              esl_seteq<1,1,1>(ap_const_logic_1, plain_V_V_0_ack_out.read()) && 
              esl_seteq<1,2,2>(plain_V_V_0_state.read(), ap_const_lv2_3)) || 
             (esl_seteq<1,1,1>(ap_const_logic_0, plain_V_V_0_vld_in.read()) && 
              esl_seteq<1,2,2>(plain_V_V_0_state.read(), ap_const_lv2_2)))) {
            plain_V_V_0_state = ap_const_lv2_2;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, plain_V_V_0_vld_in.read()) && 
                     esl_seteq<1,1,1>(ap_const_logic_0, plain_V_V_0_ack_out.read()) && 
                     esl_seteq<1,2,2>(plain_V_V_0_state.read(), ap_const_lv2_3)) || 
                    (esl_seteq<1,1,1>(ap_const_logic_0, plain_V_V_0_ack_out.read()) && 
                     esl_seteq<1,2,2>(plain_V_V_0_state.read(), ap_const_lv2_1)))) {
            plain_V_V_0_state = ap_const_lv2_1;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, plain_V_V_0_vld_in.read()) && 
                     esl_seteq<1,2,2>(plain_V_V_0_state.read(), ap_const_lv2_2)) || 
                    (esl_seteq<1,1,1>(ap_const_logic_1, plain_V_V_0_ack_out.read()) && 
                     esl_seteq<1,2,2>(plain_V_V_0_state.read(), ap_const_lv2_1)) || 
                    (esl_seteq<1,2,2>(plain_V_V_0_state.read(), ap_const_lv2_3) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_1, plain_V_V_0_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_0, plain_V_V_0_ack_out.read())) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_0, plain_V_V_0_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_1, plain_V_V_0_ack_out.read()))))) {
            plain_V_V_0_state = ap_const_lv2_3;
        } else {
            plain_V_V_0_state = ap_const_lv2_2;
        }
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, encrypt_V_V_1_load_A.read())) {
        encrypt_V_V_1_payload_A = out_q0.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, encrypt_V_V_1_load_B.read())) {
        encrypt_V_V_1_payload_B = out_q0.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read())) {
        j_2_reg_299 = j_2_fu_263_p2.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
        len_read_reg_280 = len.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, plain_V_V_0_load_A.read())) {
        plain_V_V_0_payload_A = plain_V_V_TDATA.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, plain_V_V_0_load_B.read())) {
        plain_V_V_0_payload_B = plain_V_V_TDATA.read();
    }
}

void AES_ECB_encrypt::thread_ap_CS_fsm_state1() {
    ap_CS_fsm_state1 = ap_CS_fsm.read()[0];
}

void AES_ECB_encrypt::thread_ap_CS_fsm_state2() {
    ap_CS_fsm_state2 = ap_CS_fsm.read()[1];
}

void AES_ECB_encrypt::thread_ap_CS_fsm_state3() {
    ap_CS_fsm_state3 = ap_CS_fsm.read()[2];
}

void AES_ECB_encrypt::thread_ap_CS_fsm_state4() {
    ap_CS_fsm_state4 = ap_CS_fsm.read()[3];
}

void AES_ECB_encrypt::thread_ap_CS_fsm_state5() {
    ap_CS_fsm_state5 = ap_CS_fsm.read()[4];
}

void AES_ECB_encrypt::thread_ap_CS_fsm_state6() {
    ap_CS_fsm_state6 = ap_CS_fsm.read()[5];
}

void AES_ECB_encrypt::thread_ap_CS_fsm_state7() {
    ap_CS_fsm_state7 = ap_CS_fsm.read()[6];
}

void AES_ECB_encrypt::thread_ap_block_state3() {
    ap_block_state3 = (esl_seteq<1,1,1>(ap_const_lv1_0, exitcond1_fu_240_p2.read()) && esl_seteq<1,1,1>(ap_const_logic_0, plain_V_V_0_vld_out.read()));
}

void AES_ECB_encrypt::thread_ap_block_state3_ignore_call0() {
    ap_block_state3_ignore_call0 = (esl_seteq<1,1,1>(ap_const_lv1_0, exitcond1_fu_240_p2.read()) && esl_seteq<1,1,1>(ap_const_logic_0, plain_V_V_0_vld_out.read()));
}

void AES_ECB_encrypt::thread_ap_block_state4_on_subcall_done() {
    ap_block_state4_on_subcall_done = esl_seteq<1,1,1>(ap_const_logic_0, (ap_sync_grp_Cipher_fu_187_ap_ready.read() & ap_sync_grp_Cipher_fu_187_ap_done.read()));
}

void AES_ECB_encrypt::thread_ap_done() {
    if ((esl_seteq<1,1,1>(encrypt_V_V_1_ack_in.read(), ap_const_logic_1) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_0, encrypt_V_V_1_state.read()[0]) && 
         esl_seteq<1,1,1>(ap_const_lv1_0, tmp_fu_235_p2.read()))) {
        ap_done = ap_const_logic_1;
    } else {
        ap_done = ap_const_logic_0;
    }
}

void AES_ECB_encrypt::thread_ap_idle() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()))) {
        ap_idle = ap_const_logic_1;
    } else {
        ap_idle = ap_const_logic_0;
    }
}

void AES_ECB_encrypt::thread_ap_ready() {
    if ((esl_seteq<1,1,1>(encrypt_V_V_1_ack_in.read(), ap_const_logic_1) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_0, encrypt_V_V_1_state.read()[0]) && 
         esl_seteq<1,1,1>(ap_const_lv1_0, tmp_fu_235_p2.read()))) {
        ap_ready = ap_const_logic_1;
    } else {
        ap_ready = ap_const_logic_0;
    }
}

void AES_ECB_encrypt::thread_ap_rst_n_inv() {
    ap_rst_n_inv =  (sc_logic) (~ap_rst_n.read());
}

void AES_ECB_encrypt::thread_ap_sync_grp_Cipher_fu_187_ap_done() {
    ap_sync_grp_Cipher_fu_187_ap_done = (grp_Cipher_fu_187_ap_done.read() | ap_sync_reg_grp_Cipher_fu_187_ap_done.read());
}

void AES_ECB_encrypt::thread_ap_sync_grp_Cipher_fu_187_ap_ready() {
    ap_sync_grp_Cipher_fu_187_ap_ready = (grp_Cipher_fu_187_ap_ready.read() | ap_sync_reg_grp_Cipher_fu_187_ap_ready.read());
}

void AES_ECB_encrypt::thread_encrypt_V_V_1_ack_in() {
    encrypt_V_V_1_ack_in = encrypt_V_V_1_state.read()[1];
}

void AES_ECB_encrypt::thread_encrypt_V_V_1_ack_out() {
    encrypt_V_V_1_ack_out = encrypt_V_V_TREADY.read();
}

void AES_ECB_encrypt::thread_encrypt_V_V_1_data_out() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, encrypt_V_V_1_sel.read())) {
        encrypt_V_V_1_data_out = encrypt_V_V_1_payload_B.read();
    } else {
        encrypt_V_V_1_data_out = encrypt_V_V_1_payload_A.read();
    }
}

void AES_ECB_encrypt::thread_encrypt_V_V_1_load_A() {
    encrypt_V_V_1_load_A = (encrypt_V_V_1_state_cmp_full.read() & ~encrypt_V_V_1_sel_wr.read());
}

void AES_ECB_encrypt::thread_encrypt_V_V_1_load_B() {
    encrypt_V_V_1_load_B = (encrypt_V_V_1_sel_wr.read() & encrypt_V_V_1_state_cmp_full.read());
}

void AES_ECB_encrypt::thread_encrypt_V_V_1_sel() {
    encrypt_V_V_1_sel = encrypt_V_V_1_sel_rd.read();
}

void AES_ECB_encrypt::thread_encrypt_V_V_1_state_cmp_full() {
    encrypt_V_V_1_state_cmp_full =  (sc_logic) ((!encrypt_V_V_1_state.read().is_01() || !ap_const_lv2_1.is_01())? sc_lv<1>(): sc_lv<1>(encrypt_V_V_1_state.read() != ap_const_lv2_1))[0];
}

void AES_ECB_encrypt::thread_encrypt_V_V_1_vld_in() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read()) && 
         esl_seteq<1,1,1>(encrypt_V_V_1_ack_in.read(), ap_const_logic_1))) {
        encrypt_V_V_1_vld_in = ap_const_logic_1;
    } else {
        encrypt_V_V_1_vld_in = ap_const_logic_0;
    }
}

void AES_ECB_encrypt::thread_encrypt_V_V_1_vld_out() {
    encrypt_V_V_1_vld_out = encrypt_V_V_1_state.read()[0];
}

void AES_ECB_encrypt::thread_encrypt_V_V_TDATA() {
    encrypt_V_V_TDATA = encrypt_V_V_1_data_out.read();
}

void AES_ECB_encrypt::thread_encrypt_V_V_TDATA_blk_n() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read()))) {
        encrypt_V_V_TDATA_blk_n = encrypt_V_V_1_state.read()[1];
    } else {
        encrypt_V_V_TDATA_blk_n = ap_const_logic_1;
    }
}

void AES_ECB_encrypt::thread_encrypt_V_V_TVALID() {
    encrypt_V_V_TVALID = encrypt_V_V_1_state.read()[0];
}

void AES_ECB_encrypt::thread_exitcond1_fu_240_p2() {
    exitcond1_fu_240_p2 = (!j_reg_165.read().is_01() || !ap_const_lv5_10.is_01())? sc_lv<1>(): sc_lv<1>(j_reg_165.read() == ap_const_lv5_10);
}

void AES_ECB_encrypt::thread_exitcond_fu_257_p2() {
    exitcond_fu_257_p2 = (!j2_reg_176.read().is_01() || !ap_const_lv5_10.is_01())? sc_lv<1>(): sc_lv<1>(j2_reg_176.read() == ap_const_lv5_10);
}

void AES_ECB_encrypt::thread_grp_Cipher_fu_187_ap_continue() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) && 
         esl_seteq<1,1,1>(ap_block_state4_on_subcall_done.read(), ap_const_boolean_0))) {
        grp_Cipher_fu_187_ap_continue = ap_const_logic_1;
    } else {
        grp_Cipher_fu_187_ap_continue = ap_const_logic_0;
    }
}

void AES_ECB_encrypt::thread_grp_Cipher_fu_187_ap_start() {
    grp_Cipher_fu_187_ap_start = grp_Cipher_fu_187_ap_start_reg.read();
}

void AES_ECB_encrypt::thread_i_1_fu_274_p2() {
    i_1_fu_274_p2 = (!i_reg_153.read().is_01() || !ap_const_lv32_10.is_01())? sc_lv<32>(): (sc_biguint<32>(i_reg_153.read()) + sc_biguint<32>(ap_const_lv32_10));
}

void AES_ECB_encrypt::thread_in_V_address0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_0, exitcond1_fu_240_p2.read()))) {
        in_V_address0 =  (sc_lv<4>) (tmp_s_fu_252_p1.read());
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read())) {
        in_V_address0 = grp_Cipher_fu_187_plain_V_address0.read();
    } else {
        in_V_address0 = "XXXX";
    }
}

void AES_ECB_encrypt::thread_in_V_ce0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_0, exitcond1_fu_240_p2.read()) && 
         !(esl_seteq<1,1,1>(ap_const_lv1_0, exitcond1_fu_240_p2.read()) && esl_seteq<1,1,1>(ap_const_logic_0, plain_V_V_0_vld_out.read())))) {
        in_V_ce0 = ap_const_logic_1;
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read())) {
        in_V_ce0 = grp_Cipher_fu_187_plain_V_ce0.read();
    } else {
        in_V_ce0 = ap_const_logic_0;
    }
}

void AES_ECB_encrypt::thread_in_V_we0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_0, exitcond1_fu_240_p2.read()) && 
         !(esl_seteq<1,1,1>(ap_const_lv1_0, exitcond1_fu_240_p2.read()) && esl_seteq<1,1,1>(ap_const_logic_0, plain_V_V_0_vld_out.read())))) {
        in_V_we0 = ap_const_logic_1;
    } else {
        in_V_we0 = ap_const_logic_0;
    }
}

void AES_ECB_encrypt::thread_j_1_fu_246_p2() {
    j_1_fu_246_p2 = (!j_reg_165.read().is_01() || !ap_const_lv5_1.is_01())? sc_lv<5>(): (sc_biguint<5>(j_reg_165.read()) + sc_biguint<5>(ap_const_lv5_1));
}

void AES_ECB_encrypt::thread_j_2_fu_263_p2() {
    j_2_fu_263_p2 = (!j2_reg_176.read().is_01() || !ap_const_lv5_1.is_01())? sc_lv<5>(): (sc_biguint<5>(j2_reg_176.read()) + sc_biguint<5>(ap_const_lv5_1));
}

void AES_ECB_encrypt::thread_out_address0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read())) {
        out_address0 =  (sc_lv<4>) (tmp_3_fu_269_p1.read());
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read())) {
        out_address0 = grp_Cipher_fu_187_encrypt_V_address0.read();
    } else {
        out_address0 = "XXXX";
    }
}

void AES_ECB_encrypt::thread_out_ce0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read())) {
        out_ce0 = ap_const_logic_1;
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read())) {
        out_ce0 = grp_Cipher_fu_187_encrypt_V_ce0.read();
    } else {
        out_ce0 = ap_const_logic_0;
    }
}

void AES_ECB_encrypt::thread_out_we0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read())) {
        out_we0 = grp_Cipher_fu_187_encrypt_V_we0.read();
    } else {
        out_we0 = ap_const_logic_0;
    }
}

void AES_ECB_encrypt::thread_plain_V_V_0_ack_in() {
    plain_V_V_0_ack_in = plain_V_V_0_state.read()[1];
}

void AES_ECB_encrypt::thread_plain_V_V_0_ack_out() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_0, exitcond1_fu_240_p2.read()) && 
         !(esl_seteq<1,1,1>(ap_const_lv1_0, exitcond1_fu_240_p2.read()) && esl_seteq<1,1,1>(ap_const_logic_0, plain_V_V_0_vld_out.read())))) {
        plain_V_V_0_ack_out = ap_const_logic_1;
    } else {
        plain_V_V_0_ack_out = ap_const_logic_0;
    }
}

void AES_ECB_encrypt::thread_plain_V_V_0_data_out() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, plain_V_V_0_sel.read())) {
        plain_V_V_0_data_out = plain_V_V_0_payload_B.read();
    } else {
        plain_V_V_0_data_out = plain_V_V_0_payload_A.read();
    }
}

void AES_ECB_encrypt::thread_plain_V_V_0_load_A() {
    plain_V_V_0_load_A = (plain_V_V_0_state_cmp_full.read() & ~plain_V_V_0_sel_wr.read());
}

void AES_ECB_encrypt::thread_plain_V_V_0_load_B() {
    plain_V_V_0_load_B = (plain_V_V_0_sel_wr.read() & plain_V_V_0_state_cmp_full.read());
}

void AES_ECB_encrypt::thread_plain_V_V_0_sel() {
    plain_V_V_0_sel = plain_V_V_0_sel_rd.read();
}

void AES_ECB_encrypt::thread_plain_V_V_0_state_cmp_full() {
    plain_V_V_0_state_cmp_full =  (sc_logic) ((!plain_V_V_0_state.read().is_01() || !ap_const_lv2_1.is_01())? sc_lv<1>(): sc_lv<1>(plain_V_V_0_state.read() != ap_const_lv2_1))[0];
}

void AES_ECB_encrypt::thread_plain_V_V_0_vld_in() {
    plain_V_V_0_vld_in = plain_V_V_TVALID.read();
}

void AES_ECB_encrypt::thread_plain_V_V_0_vld_out() {
    plain_V_V_0_vld_out = plain_V_V_0_state.read()[0];
}

void AES_ECB_encrypt::thread_plain_V_V_TDATA_blk_n() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_0, exitcond1_fu_240_p2.read()))) {
        plain_V_V_TDATA_blk_n = plain_V_V_0_state.read()[0];
    } else {
        plain_V_V_TDATA_blk_n = ap_const_logic_1;
    }
}

void AES_ECB_encrypt::thread_plain_V_V_TREADY() {
    plain_V_V_TREADY = plain_V_V_0_state.read()[1];
}

void AES_ECB_encrypt::thread_tmp_3_fu_269_p1() {
    tmp_3_fu_269_p1 = esl_zext<64,5>(j2_reg_176.read());
}

void AES_ECB_encrypt::thread_tmp_fu_235_p2() {
    tmp_fu_235_p2 = (!i_reg_153.read().is_01() || !len_read_reg_280.read().is_01())? sc_lv<1>(): (sc_biguint<32>(i_reg_153.read()) < sc_biguint<32>(len_read_reg_280.read()));
}

void AES_ECB_encrypt::thread_tmp_s_fu_252_p1() {
    tmp_s_fu_252_p1 = esl_zext<64,5>(j_reg_165.read());
}

void AES_ECB_encrypt::thread_ap_NS_fsm() {
    switch (ap_CS_fsm.read().to_uint64()) {
        case 1 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
                ap_NS_fsm = ap_ST_fsm_state2;
            } else {
                ap_NS_fsm = ap_ST_fsm_state1;
            }
            break;
        case 2 : 
            if ((esl_seteq<1,1,1>(encrypt_V_V_1_ack_in.read(), ap_const_logic_1) && esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && esl_seteq<1,1,1>(ap_const_logic_0, encrypt_V_V_1_state.read()[0]) && esl_seteq<1,1,1>(ap_const_lv1_0, tmp_fu_235_p2.read()))) {
                ap_NS_fsm = ap_ST_fsm_state1;
            } else if ((esl_seteq<1,1,1>(encrypt_V_V_1_ack_in.read(), ap_const_logic_1) && esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && esl_seteq<1,1,1>(ap_const_lv1_1, tmp_fu_235_p2.read()))) {
                ap_NS_fsm = ap_ST_fsm_state3;
            } else {
                ap_NS_fsm = ap_ST_fsm_state2;
            }
            break;
        case 4 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && esl_seteq<1,1,1>(ap_const_lv1_0, exitcond1_fu_240_p2.read()) && !(esl_seteq<1,1,1>(ap_const_lv1_0, exitcond1_fu_240_p2.read()) && esl_seteq<1,1,1>(ap_const_logic_0, plain_V_V_0_vld_out.read())))) {
                ap_NS_fsm = ap_ST_fsm_state3;
            } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && !(esl_seteq<1,1,1>(ap_const_lv1_0, exitcond1_fu_240_p2.read()) && esl_seteq<1,1,1>(ap_const_logic_0, plain_V_V_0_vld_out.read())) && esl_seteq<1,1,1>(ap_const_lv1_1, exitcond1_fu_240_p2.read()))) {
                ap_NS_fsm = ap_ST_fsm_state4;
            } else {
                ap_NS_fsm = ap_ST_fsm_state3;
            }
            break;
        case 8 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) && esl_seteq<1,1,1>(ap_block_state4_on_subcall_done.read(), ap_const_boolean_0))) {
                ap_NS_fsm = ap_ST_fsm_state5;
            } else {
                ap_NS_fsm = ap_ST_fsm_state4;
            }
            break;
        case 16 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()) && esl_seteq<1,1,1>(ap_const_lv1_1, exitcond_fu_257_p2.read()))) {
                ap_NS_fsm = ap_ST_fsm_state2;
            } else {
                ap_NS_fsm = ap_ST_fsm_state6;
            }
            break;
        case 32 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read()) && esl_seteq<1,1,1>(encrypt_V_V_1_ack_in.read(), ap_const_logic_1))) {
                ap_NS_fsm = ap_ST_fsm_state7;
            } else {
                ap_NS_fsm = ap_ST_fsm_state6;
            }
            break;
        case 64 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read()) && esl_seteq<1,1,1>(encrypt_V_V_1_ack_in.read(), ap_const_logic_1))) {
                ap_NS_fsm = ap_ST_fsm_state5;
            } else {
                ap_NS_fsm = ap_ST_fsm_state7;
            }
            break;
        default : 
            ap_NS_fsm =  (sc_lv<7>) ("XXXXXXX");
            break;
    }
}

void AES_ECB_encrypt::thread_hdltv_gen() {
    const char* dump_tv = std::getenv("AP_WRITE_TV");
    if (!(dump_tv && string(dump_tv) == "on")) return;

    wait();

    mHdltvinHandle << "[ " << endl;
    mHdltvoutHandle << "[ " << endl;
    int ap_cycleNo = 0;
    while (1) {
        wait();
        const char* mComma = ap_cycleNo == 0 ? " " : ", " ;
        mHdltvinHandle << mComma << "{"  <<  " \"ap_rst_n\" :  \"" << ap_rst_n.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"plain_V_V_TDATA\" :  \"" << plain_V_V_TDATA.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"plain_V_V_TVALID\" :  \"" << plain_V_V_TVALID.read() << "\" ";
        mHdltvoutHandle << mComma << "{"  <<  " \"plain_V_V_TREADY\" :  \"" << plain_V_V_TREADY.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"encrypt_V_V_TDATA\" :  \"" << encrypt_V_V_TDATA.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"encrypt_V_V_TVALID\" :  \"" << encrypt_V_V_TVALID.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"encrypt_V_V_TREADY\" :  \"" << encrypt_V_V_TREADY.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_AXILiteS_AWVALID\" :  \"" << s_axi_AXILiteS_AWVALID.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_AXILiteS_AWREADY\" :  \"" << s_axi_AXILiteS_AWREADY.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_AXILiteS_AWADDR\" :  \"" << s_axi_AXILiteS_AWADDR.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_AXILiteS_WVALID\" :  \"" << s_axi_AXILiteS_WVALID.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_AXILiteS_WREADY\" :  \"" << s_axi_AXILiteS_WREADY.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_AXILiteS_WDATA\" :  \"" << s_axi_AXILiteS_WDATA.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_AXILiteS_WSTRB\" :  \"" << s_axi_AXILiteS_WSTRB.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_AXILiteS_ARVALID\" :  \"" << s_axi_AXILiteS_ARVALID.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_AXILiteS_ARREADY\" :  \"" << s_axi_AXILiteS_ARREADY.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_AXILiteS_ARADDR\" :  \"" << s_axi_AXILiteS_ARADDR.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_AXILiteS_RVALID\" :  \"" << s_axi_AXILiteS_RVALID.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_AXILiteS_RREADY\" :  \"" << s_axi_AXILiteS_RREADY.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_AXILiteS_RDATA\" :  \"" << s_axi_AXILiteS_RDATA.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_AXILiteS_RRESP\" :  \"" << s_axi_AXILiteS_RRESP.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_AXILiteS_BVALID\" :  \"" << s_axi_AXILiteS_BVALID.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_AXILiteS_BREADY\" :  \"" << s_axi_AXILiteS_BREADY.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_AXILiteS_BRESP\" :  \"" << s_axi_AXILiteS_BRESP.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"interrupt\" :  \"" << interrupt.read() << "\" ";
        mHdltvinHandle << "}" << std::endl;
        mHdltvoutHandle << "}" << std::endl;
        ap_cycleNo++;
    }
}

}

